
            
        
        
            
        
        
            
        
        
            
        
        
        
        
        
        
        
        
        
        
        [{"categories":[],"content":"地址 github.com/1Remote/1Remote\r功能 开源且免费 支持 RDP, SSH, VNC, Telnet, (S)FTP, RemoteApp 等多种协议 多屏幕、高分辨率的 RDP 支持 一键打开你的远程连接 (Alt + M) 单个服务器配置中允许存储多个地址和账号 基于选项卡的远程桌面界面、多语言、可自定义颜色主题 易于部署，仅需解压就能运行 ","permalink":"https://gohugo.io/hugo-blog/public/post/software/1remote/","tags":[{"LinkTitle":"远程","RelPermalink":"/hugo-blog/public/tags/%E8%BF%9C%E7%A8%8B/"},{"LinkTitle":"Windows","RelPermalink":"/hugo-blog/public/tags/windows/"}],"title":"远程会话管理工具，1Remote"},{"categories":[],"content":"在 GitHub Actions 的 workflow 文件中，你可以在 steps 中使用 curl 命令调用 API 接口。以下是一个完整的示例，展示如何在 GitHub Actions 的 workflow 中使用 curl：\n示例：使用 curl 调用 API name: Call API with curl on: push: branches: [ main ] workflow_dispatch: jobs: call-api: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v4 - name: Call API using curl run: | # 示例：调用一个公开的API（如JSONPlaceholder） response=$(curl -s -X GET \u0026#34;https://jsonplaceholder.typicode.com/posts/1\u0026#34;) echo \u0026#34;API Response: $response\u0026#34; # 如果需要传递请求头（如Content-Type或Authorization） # response_with_header=$(curl -s -X GET \\ # -H \u0026#34;Content-Type: application/json\u0026#34; \\ # -H \u0026#34;Authorization: Bearer ${{ secrets.API_TOKEN }}\u0026#34; \\ # \u0026#34;https://api.example.com/data\u0026#34;) # echo \u0026#34;Response with headers: $response_with_header\u0026#34; # 如果需要发送POST请求 # post_response=$(curl -s -X POST \\ # -H \u0026#34;Content-Type: application/json\u0026#34; \\ # -d \u0026#39;{\u0026#34;key\u0026#34;: \u0026#34;value\u0026#34;}\u0026#39; \\ # \u0026#34;https://api.example.com/create\u0026#34;) # echo \u0026#34;POST Response: $post_response\u0026#34; 关键点说明： run 指令：在 steps 中使用 run 执行 shell 命令（如 curl）。 请求方法： -X GET：GET 请求（默认可以省略）。 -X POST：POST 请求。 请求头： -H \u0026quot;Content-Type: application/json\u0026quot;：设置请求头。 -H \u0026quot;Authorization: Bearer ${{ secrets.API_TOKEN }}\u0026quot;：使用 GitHub Secrets 传递敏感信息（如 API Token）。 请求体： -d '{\u0026quot;key\u0026quot;: \u0026quot;value\u0026quot;}'：发送 JSON 格式的请求体。 静默模式： -s：禁止 curl 输出进度或错误信息（适合日志干净的场景）。 输出响应： 将响应保存到变量（如 response=$(curl ...)）或直接打印。 高级用法： 处理响应状态码：\n- name: Check API status run: | status_code=$(curl -s -o /dev/null -w \u0026#34;%{http_code}\u0026#34; \u0026#34;https://api.example.com/health\u0026#34;) echo \u0026#34;Status Code: $status_code\u0026#34; if [ \u0026#34;$status_code\u0026#34; -ne 200 ]; then echo \u0026#34;API call failed!\u0026#34; exit 1 fi 使用 jq 解析 JSON 响应（需先安装）：\n- name: Parse JSON response run: | sudo apt-get install -y jq # 安装jq response=$(curl -s \u0026#34;https://jsonplaceholder.typicode.com/posts/1\u0026#34;) title=$(echo \u0026#34;$response\u0026#34; | jq -r \u0026#39;.title\u0026#39;) echo \u0026#34;Title: $title\u0026#34; 注意事项： 网络权限：GitHub Actions 默认允许出站流量，但某些 API 可能需要配置 IP 白名单。 超时处理：默认情况下，GitHub Actions 的 run 命令超时为 6 小时，但建议显式设置 curl 超时： curl --max-time 10 ... # 10秒超时 错误处理：如果 curl 失败（非 2xx 状态码），默认会返回非零退出码，导致步骤失败。 完整示例（带错误处理）： - name: Call API with error handling run: | if ! response=$(curl -s -f -X GET \u0026#34;https://api.example.com/data\u0026#34;); then echo \u0026#34;API call failed with status: $?\u0026#34; exit 1 fi echo \u0026#34;Success: $response\u0026#34; 通过以上方式，你可以在 GitHub Actions 中灵活调用 API 并处理响应。\n","permalink":"https://gohugo.io/hugo-blog/public/post/dev-log/github-action/","tags":[{"LinkTitle":"Sql","RelPermalink":"/hugo-blog/public/tags/sql/"}],"title":"在 github-workflows   steps 中，使用curl调用接口"},{"categories":[{"LinkTitle":"自定义分类","RelPermalink":"/hugo-blog/public/categories/with-slug/"}],"content":"Hugo ships with several Built-in Shortcodes\rfor rich content, along with a Privacy Config\rand a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nhttps://gist.github.com/hqqich\rGithub gist 代码块 YouTube 视频预览 BiliBili 视频预览 shell终端视频 内嵌 Local Shortcode ","permalink":"https://gohugo.io/hugo-blog/public/weekly/2025-10-20/","tags":[{"LinkTitle":"自定义标签","RelPermalink":"/hugo-blog/public/tags/custom/"}],"title":"Rich Content"},{"categories":[],"content":"sadfasdf dfasdfasdf\n","permalink":"https://gohugo.io/hugo-blog/public/about/","tags":[],"title":"About"},{"categories":[],"content":"","permalink":"https://gohugo.io/hugo-blog/public/manifest.json","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://gohugo.io/hugo-blog/public/search/_index.de/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://gohugo.io/hugo-blog/public/search/_index.es/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://gohugo.io/hugo-blog/public/search/_index.fr/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://gohugo.io/hugo-blog/public/search/_index.hi/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://gohugo.io/hugo-blog/public/search/_index.jp/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://gohugo.io/hugo-blog/public/search/_index.nl/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://gohugo.io/hugo-blog/public/search/_index.pl/","tags":[],"title":""},{"categories":[],"content":"","permalink":"https://gohugo.io/hugo-blog/public/search/_index.ru/","tags":[],"title":""}]