import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o as i,c as l,a as n,d as s,e as t,f as e}from"./app-6847d3e4.js";const c={},r={href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adbc507fc3704fd8955aae739a433db2~tplv-k3u1fbpfcp-zoom-1.image",target:"_blank",rel:"noopener noreferrer"},u=n("p",null,"希望对你有所帮助 🤣🤣",-1),d=e("<blockquote><p>对于 Android Developer 来说，很多开源库都是属于<strong>开发必备</strong>的知识点，从使用方式到实现原理再到源码解析，这些都需要我们有一定程度的了解和运用能力。所以我打算来写一系列关于开源库<strong>源码解析</strong>和<strong>实战演练</strong>的文章，初定的目标是 <strong>EventBus、ARouter、LeakCanary、Retrofit、Glide、OkHttp、Coil</strong> 等七个知名开源库，希望对你有所帮助 🤣🤣</p></blockquote><p>在使用 OkHttp 或者 Retrofit 的时候，我觉得大部分开发者做得最多的自定义实现就是<strong>拦截器</strong>了。因为 OkHttp 的拦截器真的是太有用了，我们的很多需求：<strong>添加 Header、计算并添加签名信息、网络请求记录</strong> 等都可以通过拦截器来自动完成，只要定义好规则，就可以覆盖到全局的 OkHttp 网络请求</p>",2),k=n("strong",null,"[Android 主流开源库源码分析]",-1),v={href:"https://juejin.im/post/6895369745445748749",target:"_blank",rel:"noopener noreferrer"},m={href:"https://github.com/leavesCZY/Monitor",target:"_blank",rel:"noopener noreferrer"},b=e(`<h1 id="一、monitor" tabindex="-1"><a class="header-anchor" href="#一、monitor" aria-hidden="true">#</a> 一、Monitor</h1><p>Monitor 适用于使用了 OkHttp / Retrofit 作为网络请求框架的项目，只要添加了 MonitorInterceptor 拦截器，Monitor 就会自动记录并保存所有的网络请求信息且自动弹窗展示</p><p>最后实现的效果如下所示：</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20c54fb3d67f46f682c0758d71cee67b~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h1 id="二、实现思路" tabindex="-1"><a class="header-anchor" href="#二、实现思路" aria-hidden="true">#</a> 二、实现思路</h1><p>这里来简单地介绍下 Monitor 的实现思路</p><p>其实 Monitor 是我蛮久前写的一个开源库了，刚好和我现在要写的文章主题相符，就趁着这机会做了一次整体重构，完全使用 Kotlin 语言来实现，请放心食用。其核心思路就是通过 Interceptor 拿到 Request 和 Response，记录各项请求信息，存到数据库中进行持久化保存，在实现思路上类似于 squareup 官方的<code>ogging-interceptor</code>，只是说 Monitor 会更加直接和方便😋😋</p><p>debug 版本的 MonitorInterceptor 的大体框架如下所示。HttpInformation 是对 request 和 response 的一个实体封装，也是最终会存到数据库中的实体类。通过 chain 拿到 request，先对本地数据库进行预先占位，在 proceed 后拿到 response，对本次请求结果进行解析，所有信息都存到 HttpInformation 中再来更新数据库，同时弹出 Notification</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * @Author: leavesCZY
 * @Github：https://github.com/leavesCZY
 */</span>
<span class="token keyword">class</span> <span class="token function">MonitorInterceptor</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">:</span> Interceptor <span class="token punctuation">{</span>

    <span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>IOException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">intercept</span><span class="token punctuation">(</span>chain<span class="token operator">:</span> Interceptor<span class="token punctuation">.</span>Chain<span class="token punctuation">)</span><span class="token operator">:</span> Response <span class="token punctuation">{</span>
        <span class="token keyword">val</span> request <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> httpInformation <span class="token operator">=</span> <span class="token function">HttpInformation</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> httpInformation<span class="token punctuation">)</span>
        httpInformation<span class="token punctuation">.</span>id <span class="token operator">=</span> <span class="token function">insert</span><span class="token punctuation">(</span>httpInformation<span class="token punctuation">)</span>
        <span class="token keyword">val</span> response<span class="token operator">:</span> Response
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            response <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            httpInformation<span class="token punctuation">.</span>error <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> e
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token function">update</span><span class="token punctuation">(</span>httpInformation<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token function">processResponse</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> httpInformation<span class="token punctuation">)</span>
        <span class="token function">update</span><span class="token punctuation">(</span>httpInformation<span class="token punctuation">)</span>
        <span class="token keyword">return</span> response
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>request<span class="token operator">:</span> Request<span class="token punctuation">,</span> httpInformation<span class="token operator">:</span> HttpInformation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ···
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">processResponse</span><span class="token punctuation">(</span>response<span class="token operator">:</span> Response<span class="token punctuation">,</span> httpInformation<span class="token operator">:</span> HttpInformation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ···
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">showNotification</span><span class="token punctuation">(</span>httpInformation<span class="token operator">:</span> HttpInformation<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        ···
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>release 版本的 MonitorInterceptor 则不会做任何操作，只是单纯将请求转发出去而已，不会造成多余的性能消耗和引用</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">MonitorInterceptor</span><span class="token punctuation">(</span>context<span class="token operator">:</span> Context<span class="token punctuation">)</span> <span class="token operator">:</span> Interceptor <span class="token punctuation">{</span>

    <span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>IOException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">intercept</span><span class="token punctuation">(</span>chain<span class="token operator">:</span> Interceptor<span class="token punctuation">.</span>Chain<span class="token punctuation">)</span><span class="token operator">:</span> Response <span class="token punctuation">{</span>
        <span class="token keyword">val</span> request <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HttpInformation 包含了单次网络请求下所有关于 request 和 response 的请求参数和返回值信息，responseBody 只会保存文本类型的返回值（例如 Json 和 XML），图片这类二进制文件则不会进行保存</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> HttpInformation <span class="token punctuation">{</span>
    
    <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> host <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> scheme <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> protocol <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> method <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>

    <span class="token keyword">var</span> requestHeaders <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>HttpHeader<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> responseHeaders <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>HttpHeader<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">var</span> requestBody <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> requestContentType <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> requestContentLength <span class="token operator">=</span> <span class="token number">0L</span>

    <span class="token keyword">var</span> responseBody <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> responseContentType <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> responseContentLength <span class="token operator">=</span> <span class="token number">0L</span>

    <span class="token keyword">var</span> requestDate <span class="token operator">=</span> <span class="token number">0L</span>
    <span class="token keyword">var</span> responseDate <span class="token operator">=</span> <span class="token number">0L</span>

    <span class="token keyword">var</span> responseTlsVersion <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>
    <span class="token keyword">var</span> responseCipherSuite <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>

    <span class="token keyword">var</span> responseCode <span class="token operator">=</span> DEFAULT_RESPONSE_CODE
    <span class="token keyword">var</span> responseMessage <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;&quot;</span></span>

    <span class="token keyword">var</span> error<span class="token operator">:</span> String<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>HttpInformation 则是用 Room 数据库来持久化保存，不得不说的是，Jetpack 中的 Room 和 LiveData 来搭配使用还是很爽的，将 LiveData 作为数据库的返回值，可以很方便地以观察者模式来实时监听数据库中的数据变化</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * @Author: leavesCZY
 * @Desc:
 */</span>
<span class="token annotation builtin">@Dao</span>
<span class="token keyword">interface</span> MonitorHttpInformationDao <span class="token punctuation">{</span>

    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;SELECT * FROM monitor_httpInformation WHERE id =:id&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">queryRecordObservable</span><span class="token punctuation">(</span>id<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> LiveData<span class="token operator">&lt;</span>HttpInformation<span class="token operator">&gt;</span>

    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;SELECT * FROM monitor_httpInformation order by id desc limit :limit&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">queryAllRecordObservable</span><span class="token punctuation">(</span>limit<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> LiveData<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>HttpInformation<span class="token operator">&gt;</span><span class="token operator">&gt;</span>

    <span class="token annotation builtin">@Query</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;SELECT * FROM monitor_httpInformation order by id desc&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">fun</span> <span class="token function">queryAllRecordObservable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> LiveData<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>HttpInformation<span class="token operator">&gt;</span><span class="token operator">&gt;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>UI 层则不用自己去考虑线程切换和内存泄露这类问题，直接进行 observe 即可</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">val</span> monitorViewModel <span class="token keyword">by</span> lazy <span class="token punctuation">{</span>
    <span class="token function">ViewModelProvider</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>MonitorViewModel<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span> <span class="token punctuation">{</span>
        allRecordLiveData<span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@MonitorActivity</span><span class="token punctuation">,</span> Observer <span class="token punctuation">{</span>
            monitorAdapter<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="三、远程引用" tabindex="-1"><a class="header-anchor" href="#三、远程引用" aria-hidden="true">#</a> 三、远程引用</h1><p>代码我已经发布到了 jitpack，方便大家直接远程依赖使用</p><p>同时引入 debug 和 release 版本的依赖，release 版本的 MonitorInterceptor 不会做任何操作，避免了信息泄露，也不会增加 Apk 体积大小</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>allprojects <span class="token punctuation">{</span>
    repositories <span class="token punctuation">{</span>
        maven <span class="token punctuation">{</span> url <span class="token string">&#39;https://jitpack.io&#39;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

dependencies <span class="token punctuation">{</span>
    debugImplementation <span class="token string">&#39;com.github.leavesCZY.Monitor:monitor:1.1.5&#39;</span>
    releaseImplementation <span class="token string">&#39;com.github.leavesCZY.Monitor:monitor-no-op:1.1.5&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要向 OkHttpClient 添加了 MonitorInterceptor，之后的操作就都会自动完成</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> okHttpClient <span class="token operator">=</span> OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token function">MonitorInterceptor</span><span class="token punctuation">(</span>context <span class="token operator">=</span> application<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、github" tabindex="-1"><a class="header-anchor" href="#四、github" aria-hidden="true">#</a> 四、Github</h1>`,24),g={href:"https://github.com/leavesCZY/Monitor",target:"_blank",rel:"noopener noreferrer"};function f(h,y){const a=p("ExternalLinkIcon");return i(),l("div",null,[n("blockquote",null,[n("p",null,[s("公众号："),n("a",r,[s("字节数组"),t(a)])]),u]),d,n("p",null,[s("按照我写 "),k,s(" 这系列文章的习惯，我每写一篇关于源码讲解的文章，就会接着写一篇关于该三方库的自定义实现或者是扩展阅读。所以，承接上一篇文章："),n("a",v,[s("Android 主流开源库源码分析（十一）- OkHttp 源码详解"),t(a)]),s(" ，本篇文章就来写关于 OkHttp 的实战内容，来实现一个移动端的可视化抓包工具："),n("a",m,[s("Monitor"),t(a)])]),b,n("p",null,[s("GitHub 链接点击这里："),n("a",g,[s("Monitor"),t(a)])])])}const q=o(c,[["render",f],["__file","主流开源库源码分析（12）OkHttp _ Retrofit 开发调试利器.html.vue"]]);export{q as default};
