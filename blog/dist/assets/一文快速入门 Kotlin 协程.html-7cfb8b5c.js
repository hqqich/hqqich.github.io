import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as i,a as n,d as s,e as t,f as e}from"./app-6847d3e4.js";const l={},u={href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adbc507fc3704fd8955aae739a433db2~tplv-k3u1fbpfcp-zoom-1.image",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,"希望对你有所帮助 🤣🤣",-1),k=n("p",null,"在今年的三月份，我因为需要为项目搭建一个新的网络请求框架开始接触 Kotlin 协程。那时我司项目中同时存在着两种网络请求方式，采用的技术栈各不相同，Java、Kotlin、RxJava、LiveData 各种混搭，技术栈的不统一长远来看肯定是会造成很多不便的，所以就打算封装一个新的网络请求框架来作为项目的统一规范（前面的人估计也是这么想的，所以就造成了同个项目中的网络请求方式越来越多 😂😂），那么就需要考虑采用什么技术栈来实现了",-1),d=n("p",null,"采用 Kotlin 语言来实现必不可少，都这年头了还用 Java 也说不过去。Retrofit 也必不可少，而目前 Retrofit 也已经支持 Kotlin 协程了，Google 官方推出的 Jetpack 协程扩展库也越来越多，就最终决定弃用 RxJava 拥抱 Kotlin 协程，将协程作为技术栈之一",-1),v=n("p",null,"当时我是通过翻译协程官方文档来作为入门手段，到现在也大半年了，回头来看感觉官方文档还是挺晦涩难懂的，就想着再来写一两篇入门或进阶的文章来加深下理解，希望对你有所帮助",-1),m=n("p",null,"附上我当时翻译的协程官方文档：",-1),b={href:"https://juejin.cn/post/6844903972755472391",target:"_blank",rel:"noopener noreferrer"},g={href:"https://juejin.cn/post/6844904098899181582",target:"_blank",rel:"noopener noreferrer"},f={href:"https://juejin.cn/post/6844904100102930445",target:"_blank",rel:"noopener noreferrer"},h={href:"https://juejin.cn/post/6844904100103094280",target:"_blank",rel:"noopener noreferrer"},y={href:"https://juejin.cn/post/6844904101801639949",target:"_blank",rel:"noopener noreferrer"},w={href:"https://juejin.cn/post/6844904102040698893",target:"_blank",rel:"noopener noreferrer"},x={href:"https://juejin.cn/post/6844904103080886285",target:"_blank",rel:"noopener noreferrer"},C={href:"https://juejin.cn/post/6844904104053964808",target:"_blank",rel:"noopener noreferrer"},q={href:"https://juejin.cn/post/6844904106788667400",target:"_blank",rel:"noopener noreferrer"},D=e(`<h1 id="一、kotlin-协程" tabindex="-1"><a class="header-anchor" href="#一、kotlin-协程" aria-hidden="true">#</a> 一、Kotlin 协程</h1><p>Kotlin 协程提供了一种全新处理并发的方式，你可以在 Android 平台上使用它来简化异步执行的代码。协程从 Kotlin 1.3 版本开始引入，但这一概念在编程世界诞生的黎明之际就有了，最早使用协程的编程语言可以追溯到 1967 年的 Simula 语言。在过去几年间，协程这个概念发展势头迅猛，现已经被诸多主流编程语言采用，比如 Javascript、C#、Python、Ruby 以及 Go 等。Kotlin 协程是基于来自其他语言的既定概念</p><p>Google 官方推荐将 Kotlin 协程作为在 Android 上进行异步编程的解决方案，值得关注的功能点包括：</p><ul><li>轻量：可以在单个线程上运行多个协程，因为协程支持挂起，不会使正在运行协程的线程阻塞。挂起比阻塞节省内存，且支持多个并行操作</li><li>内存泄露更少：使用结构化并发机制在一个作用域内执行多个操作</li><li>内置取消支持：取消功能会自动通过正在运行的协程层次结构传播</li><li>Jetpack 集成：许多 Jetpack 库都包含提供全面协程支持的扩展。某些库还提供自己的协程作用域，可供你用于结构化并发</li></ul><p>如果是用于 Android 平台的话，可以只引用以下的 coroutines-android，当中已经包含了 coroutines-core</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>implementation &#39;org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>kotlinx<span class="token operator">:</span>kotlinx<span class="token operator">-</span>coroutines<span class="token operator">-</span>core<span class="token operator">:</span><span class="token number">1.5</span><span class="token punctuation">.</span><span class="token number">2</span>&#39;
implementation &#39;org<span class="token punctuation">.</span>jetbrains<span class="token punctuation">.</span>kotlinx<span class="token operator">:</span>kotlinx<span class="token operator">-</span>coroutines<span class="token operator">-</span>android<span class="token operator">:</span><span class="token number">1.5</span><span class="token punctuation">.</span><span class="token number">2</span>&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="二、第一个协程" tabindex="-1"><a class="header-anchor" href="#二、第一个协程" aria-hidden="true">#</a> 二、第一个协程</h1><p>协程可以称为 <strong>轻量级线程</strong>。Kotlin 协程在 CoroutineScope 的上下文中通过 launch、async 等 <strong>协程构造器</strong>（CoroutineBuilder）来声明并启动</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>context <span class="token operator">=</span> Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//延时一秒</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;launch&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//主动休眠两秒，防止 JVM 过快退出</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;end&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> Any<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">msg</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> launch
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的例子中，通过 GlobalScope（全局作用域）启动了一个协程，在延迟一秒后输出一行日志。从输出结果可以看出来，启动的协程是运行在协程内部的<strong>线程池</strong>中。虽然从表现结果上来看，启动一个协程类似于我们直接使用 Thread 来执行耗时任务，但实际上协程和线程有着本质上的区别。通过使用协程，可以极大的提高线程的并发效率，避免以往的嵌套回调地狱，极大提高了代码的可读性</p><p>以上代码就涉及到了协程的四个基础概念：</p><ul><li>suspend function。即挂起函数，delay() 就是协程库提供的一个用于实现非阻塞式延时的挂起函数</li><li>CoroutineScope。即协程作用域，GlobalScope 是 CoroutineScope 的一个实现类，用于指定协程的作用范围，可用于管理多个协程的生命周期，所有协程都需要通过 CoroutineScope 来启动</li><li>CoroutineContext。即协程上下文，包含多种类型的配置参数。<code>Dispatchers.IO</code> 就是 CoroutineContext 这个抽象概念的一种实现，用于指定协程的运行载体，即用于指定协程要运行在哪类线程上</li><li>CoroutineBuilder。即协程构建器，协程在 CoroutineScope 的上下文中通过 launch、async 等协程构建器来进行声明并启动。launch、async 均被声明为 CoroutineScope 的扩展方法</li></ul><h1 id="三、suspend" tabindex="-1"><a class="header-anchor" href="#三、suspend" aria-hidden="true">#</a> 三、suspend</h1><p>如果上述例子试图直接在 GlobalScope 外调用 <code>delay()</code> 函数的话，IDE 就会提示一个错误：<strong>Suspend function &#39;delay&#39; should be called only from a coroutine or another suspend function</strong>。意思是：<code>delay()</code> 函数是一个挂起函数，只能由协程或者由其它挂起函数来调用</p><p><code>delay()</code> 函数就使用了 suspend 进行修饰，用 suspend 修饰的函数就是挂起函数</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">delay</span><span class="token punctuation">(</span>timeMillis<span class="token operator">:</span> Long<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>读者在网上看关于协程的文章的时候，应该经常会看到这么一句话：<strong>挂起函数不会阻塞其所在线程，而是会将协程挂起，在特定的时候才再恢复执行</strong></p><p>对于这句话我的理解是：<code>delay()</code> 函数类似于 Java 中的 <code>Thread.sleep()</code>，而之所以说 <code>delay()</code> 函数是非阻塞的，是因为它和单纯的线程休眠有着本质的区别。例如，当在 ThreadA 上运行的 CoroutineA 调用了<code>delay(1000L)</code>函数指定延迟一秒后再运行，ThreadA 会转而去执行 CoroutineB，等到一秒后再来继续执行 CoroutineA。所以，ThreadA 并不会因为 CoroutineA 的延时而阻塞，而是能继续去执行其它任务，所以挂起函数并不会阻塞其所在线程，这样就极大地提高了线程的并发灵活度，最大化了线程的利用效率。而如果是使用<code>Thread.sleep()</code>的话，线程就只能干等着而不能去执行其它任务，降低了线程的利用效率</p><p>协程是运行于线程上的，一个线程可以运行多个（几千上万个）协程。线程的调度行为是由操作系统来管理的，而协程的调度行为是可以由开发者来指定并由编译器来实现的，协程能够细粒度地控制多个任务的执行时机和执行线程，当线程所执行的当前协程被 suspend 后，该线程也可以腾出资源去处理其他任务</p><h1 id="四、suspend-挂起与恢复" tabindex="-1"><a class="header-anchor" href="#四、suspend-挂起与恢复" aria-hidden="true">#</a> 四、suspend 挂起与恢复</h1><p>协程在常规函数的基础上添加了两项操作用于处理长时间运行的任务，在<code>invoke</code>（或 <code>call</code>）和<code>return</code>之外，协程添加了<code>suspend</code>和 <code>resume</code>：</p><ul><li><code>suspend</code> 用于暂停执行当前协程，并保存所有局部变量</li><li><code>resume</code> 用于让已暂停的协程从暂停处继续执行</li></ul><p>suspend 函数只能由其它 suspend 函数调用，或者是由协程来调用</p><p>以下示例展示了一项任务（假设 get 方法是一个网络请求任务）的简单协程实现：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">fetchDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                             <span class="token comment">// Dispatchers.Main</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;https://developer.android.com&quot;</span></span><span class="token punctuation">)</span> <span class="token comment">// Dispatchers.IO for \`get\`</span>
    <span class="token function">show</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                                      <span class="token comment">// Dispatchers.Main</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面的示例中，<code>get()</code> 仍在主线程上被调用，但它会在启动网络请求之前暂停协程。<code>get()</code> 主体内通过调用 <code>withContext(Dispatchers.IO)</code> 创建了一个在 IO 线程池中运行的代码块，在该块内的任何代码都始终通过 IO 调度器执行。当网络请求完成后，<code>get()</code> 会恢复已暂停的协程，使得主线程协程可以直接拿到网络请求结果而不用使用回调来通知主线程。Retrofit 就是以这种方式来实现对协程的支持</p><p>Kotlin 使用 <strong>堆栈帧</strong> 来管理要运行哪个函数以及所有局部变量。暂停协程时，系统会复制并保存当前的堆栈帧以供稍后使用。恢复时，会将堆栈帧从其保存的位置复制回来，然后函数再次开始运行。虽然代码可能看起来像普通的顺序阻塞请求，协程也能确保网络请求不会阻塞主线程</p><p>在主线程进行的 <strong>暂停协程</strong> 和 <strong>恢复协程</strong> 的两个操作，既实现了将耗时任务交由后台线程完成，保障了主线程安全，又以同步代码的方式完成了实际上的多线程异步调用。可以说，在 Android 平台上协程主要就用来解决两个问题：</p><ol><li>处理耗时任务 (Long running tasks)，这种任务常常会阻塞主线程</li><li>保证主线程安全 (Main-safety)，即确保安全地从主线程调用任何 suspend 函数</li></ol><h1 id="五、coroutinescope" tabindex="-1"><a class="header-anchor" href="#五、coroutinescope" aria-hidden="true">#</a> 五、CoroutineScope</h1><p>CoroutineScope 即 <strong>协程作用域</strong>，用于对协程进行追踪。如果我们启动了多个协程但是没有一个可以对其进行统一管理的途径的话，就会导致我们的代码臃肿杂乱，甚至发生<strong>内存泄露</strong>或者<strong>任务泄露</strong>。为了确保所有的协程都会被追踪，Kotlin 不允许在没有 CoroutineScope 的情况下启动协程。CoroutineScope 可被看作是一个具有超能力的 ExecutorService 的轻量级版本。它能启动协程，同时这个协程还具备上文所说的 suspend 和 resume 的优势</p><p>所有的协程都需要通过 CoroutineScope 来启动，它会跟踪通过 <code>launch</code> 或 <code>async</code> 创建的所有协程，你可以随时调用 <code>scope.cancel()</code> 取消正在运行的协程。CoroutineScope 本身并不运行协程，它只是确保你不会失去对协程的追踪，即使协程被挂起也是如此。在 Android 中，某些 ktx 库为某些生命周期类提供了自己的 CoroutineScope，例如，ViewModel 有 <code>viewModelScope</code>，Lifecycle 有 <code>lifecycleScope</code></p><p>CoroutineScope 大体上可以分为三种：</p><ul><li>GlobalScope。即全局协程作用域，在这个范围内启动的协程可以一直运行直到应用停止运行。GlobalScope 本身不会阻塞当前线程，且启动的协程相当于守护线程，不会阻止 JVM 结束运行</li><li>runBlocking。一个顶层函数，和 GlobalScope 不一样，它会阻塞当前线程直到其内部所有相同作用域的协程执行结束</li><li>自定义 CoroutineScope。可用于实现主动控制协程的生命周期范围，对于 Android 开发来说最大意义之一就是可以在 Activity、Fragment、ViewModel 等具有生命周期的对象中按需取消所有协程任务，从而确保生命周期安全，避免内存泄露</li></ul><h2 id="_1、globalscope" tabindex="-1"><a class="header-anchor" href="#_1、globalscope" aria-hidden="true">#</a> 1、GlobalScope</h2><p>GlobalScope 属于 <strong>全局作用域</strong>，这意味着通过 GlobalScope 启动的协程的生命周期只受整个应用程序的生命周期的限制，只要整个应用程序还在运行且协程的任务还未结束，协程就可以一直运行</p><p>GlobalScope 不会阻塞其所在线程，所以以下代码中主线程的日志会早于 GlobalScope 内部输出日志。此外，GlobalScope 启动的协程相当于守护线程，不会阻止 JVM 结束运行，所以如果将主线程的休眠时间改为三百毫秒的话，就不会看到 launch A 输出日志</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;start&quot;</span></span><span class="token punctuation">)</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        launch <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;launch A&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        launch <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;launch B&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;GlobalScope&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;end&quot;</span></span><span class="token punctuation">)</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> start
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> end
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> GlobalScope
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> launch B
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> launch A
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>GlobalScope.launch</code> 会创建一个顶级协程，尽管它很轻量级，但在运行时还是会消耗一些内存资源，且可以一直运行直到整个应用程序停止（只要任务还未结束），这可能会导致内存泄露，所以在日常开发中应该谨慎使用 GlobalScope</p><h2 id="_2、runblocking" tabindex="-1"><a class="header-anchor" href="#_2、runblocking" aria-hidden="true">#</a> 2、runBlocking</h2><p>也可以使用 runBlocking 这个顶层函数来启动协程，runBlocking 函数的第二个参数即协程的执行体，该参数被声明为 CoroutineScope 的扩展函数，因此执行体就包含了一个隐式的 CoroutineScope，所以在 runBlocking 内部可以来直接启动协程</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">runBlocking</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> 
	EmptyCoroutineContext<span class="token punctuation">,</span> block<span class="token operator">:</span> <span class="token keyword">suspend</span> CoroutineScope<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> T<span class="token punctuation">)</span><span class="token operator">:</span> T
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>runBlocking 的一个方便之处就是：只有当内部<strong>相同作用域</strong>的所有协程都运行结束后，声明在 runBlocking 之后的代码才能执行，即 runBlocking 会阻塞其所在线程</p><p>看以下代码。runBlocking 内部启动的两个协程会各自做耗时操作，从输出结果可以看出来两个协程还是在交叉并发执行，且 runBlocking 会等到两个协程都执行结束后才会退出，外部的日志输出结果有明确的先后顺序。即 runBlocking 内部启动的协程是非阻塞式的，但 runBlocking 阻塞了其所在线程。此外，runBlocking 只会等待相同作用域的协程完成才会退出，而不会等待 GlobalScope 等其它作用域启动的协程</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;start&quot;</span></span><span class="token punctuation">)</span>
    runBlocking <span class="token punctuation">{</span>
        launch <span class="token punctuation">{</span>
            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;launchA - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        launch <span class="token punctuation">{</span>
            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;launchB - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;GlobalScope - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;end&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> start
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchA <span class="token operator">-</span> <span class="token number">0</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchB <span class="token operator">-</span> <span class="token number">0</span>
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> GlobalScope <span class="token operator">-</span> <span class="token number">0</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchA <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchB <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> GlobalScope <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchA <span class="token operator">-</span> <span class="token number">2</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchB <span class="token operator">-</span> <span class="token number">2</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> end
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>所以说，runBlocking 本身带有阻塞线程的意味，但其内部运行的协程又是非阻塞的，读者需要明白这两者的区别</strong></p><p>基于是否会阻塞线程的区别，以下代码中 runBlocking 会早于 GlobalScope 输出日志</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;GlobalScope&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    runBlocking <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;runBlocking&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//主动休眠两百毫秒，使得和 runBlocking 加起来的延迟时间多于六百毫秒</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;after sleep&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> runBlocking
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> GlobalScope
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> after sleep
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、coroutinescope" tabindex="-1"><a class="header-anchor" href="#_3、coroutinescope" aria-hidden="true">#</a> 3、coroutineScope</h2><p><code>coroutineScope</code> 函数用于创建一个独立的协程作用域，直到所有启动的协程都完成后才结束自身。<code>runBlocking</code> 和 <code>coroutineScope</code> 看起来很像，因为它们都需要等待其内部所有相同作用域的协程结束后才会结束自己。两者的主要区别在于 <code>runBlocking</code> 方法会阻塞当前线程，而 <code>coroutineScope</code>不会，而是会挂起并释放底层线程以供其它协程使用。基于这个差别，<code>runBlocking</code> 是一个普通函数，而 <code>coroutineScope</code> 是一个挂起函数</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    launch <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Task from runBlocking&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    coroutineScope <span class="token punctuation">{</span>
        launch <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Task from nested launch&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Task from coroutine scope&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine scope is over&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> Task from coroutine scope
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> Task from runBlocking
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> Task from nested launch
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> Coroutine scope <span class="token keyword">is</span> over
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、supervisorscope" tabindex="-1"><a class="header-anchor" href="#_4、supervisorscope" aria-hidden="true">#</a> 4、supervisorScope</h2><p><code>supervisorScope</code> 函数用于创建一个使用了 SupervisorJob 的 coroutineScope，该作用域的特点就是抛出的异常不会连锁取消同级协程和父协程</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    launch <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Task from runBlocking&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    supervisorScope <span class="token punctuation">{</span>
        launch <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Task throw Exception&quot;</span></span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token function">Exception</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;failed&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        launch <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Task from nested launch&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine scope is over&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> Task from runBlocking
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> Task <span class="token keyword">throw</span> Exception
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> Task from nested launch
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> Coroutine scope <span class="token keyword">is</span> over
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、自定义-coroutinescope" tabindex="-1"><a class="header-anchor" href="#_5、自定义-coroutinescope" aria-hidden="true">#</a> 5、自定义 CoroutineScope</h2><p>假设我们在 Activity 中先后启动了多个协程用于执行异步耗时操作，那么当 Activity 退出时，必须取消所有协程以避免内存泄漏。我们可以通过保留每一个 Job 引用然后在 <code>onDestroy</code>方法里来手动取消，但这种方式相当来说会比较繁琐和低效。kotlinx.coroutines 提供了 CoroutineScope 来管理多个协程的生命周期</p><p>我们可以通过创建与 Activity 生命周期相关联的协程作用域来管理协程的生命周期。CoroutineScope 的实例可以通过 <code>CoroutineScope()</code> 或 <code>MainScope()</code> 的工厂函数来构建。前者创建通用作用域，后者创建 UI 应用程序的作用域并使用 Dispatchers.Main 作为默认的调度器</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Activity <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">val</span> mainScope <span class="token operator">=</span> <span class="token function">MainScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mainScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span> <span class="token operator">*</span> it<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mainScope<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，我们可以通过委托模式来让 Activity 实现 CoroutineScope 接口，从而可以在 Activity 内直接启动协程而不必显示地指定它们的上下文，并且在 <code>onDestroy()</code>中自动取消所有协程</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Activity <span class="token operator">:</span> CoroutineScope <span class="token keyword">by</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        launch <span class="token punctuation">{</span>
            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200L</span> <span class="token operator">*</span> it<span class="token punctuation">)</span>
                <span class="token function">log</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Activity Created&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">fun</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Activity Destroyed&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> activity <span class="token operator">=</span> <span class="token function">Activity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    activity<span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
    activity<span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从输出结果可以看出，当回调了<code>onDestroy()</code>方法后协程就不会再输出日志了</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> Activity Created
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">0</span>
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">1</span>
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">2</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> Activity Destroyed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>已取消的作用域无法再创建协程。因此，仅当控制其生命周期的类被销毁时，才应调用 <code>scope.cancel()</code>。例如，使用 <code>viewModelScope</code> 时， ViewModel 会在自身的 <code>onCleared()</code> 方法中自动取消作用域</p><h1 id="六、coroutinebuilder" tabindex="-1"><a class="header-anchor" href="#六、coroutinebuilder" aria-hidden="true">#</a> 六、CoroutineBuilder</h1><h2 id="_1、launch" tabindex="-1"><a class="header-anchor" href="#_1、launch" aria-hidden="true">#</a> 1、launch</h2><p>看下 <code>launch</code> 函数的方法签名。<code>launch</code> 是一个作用于 CoroutineScope 的扩展函数，用于在不阻塞当前线程的情况下启动一个协程，并返回对该协程任务的引用，即 Job 对象</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>
    context<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> EmptyCoroutineContext<span class="token punctuation">,</span>
    start<span class="token operator">:</span> CoroutineStart <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span>
    block<span class="token operator">:</span> <span class="token keyword">suspend</span> CoroutineScope<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit
<span class="token punctuation">)</span><span class="token operator">:</span> Job
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>launch</code> 函数共包含三个参数：</p><ol><li>context。用于指定协程的上下文</li><li>start。用于指定协程的启动方式，默认值为 <code>CoroutineStart.DEFAULT</code>，即协程会在声明的同时就立即进入等待调度的状态，即可以立即执行的状态。可以通过将其设置为<code>CoroutineStart.LAZY</code>来实现延迟启动，即懒加载</li><li>block。用于传递协程的执行体，即希望交由协程执行的任务</li></ol><p>可以看到 launchA 和 launchB 是并行交叉执行的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> launchA <span class="token operator">=</span> launch <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;launchA - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">val</span> launchB <span class="token operator">=</span> launch <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;launchB - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchA <span class="token operator">-</span> <span class="token number">0</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchB <span class="token operator">-</span> <span class="token number">0</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchA <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchB <span class="token operator">-</span> <span class="token number">1</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchA <span class="token operator">-</span> <span class="token number">2</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchB <span class="token operator">-</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、job" tabindex="-1"><a class="header-anchor" href="#_2、job" aria-hidden="true">#</a> 2、Job</h2><p>Job 是协程的句柄。使用 <code>launch</code> 或 <code>async</code> 创建的每个协程都会返回一个 Job 实例，该实例唯一标识协程并管理其生命周期。Job 是一个接口类型，这里列举 Job 几个比较有用的属性和函数</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">//当 Job 处于活动状态时为 true</span>
<span class="token comment">//如果 Job 未被取消或没有失败，则均处于 active 状态</span>
<span class="token keyword">public</span> <span class="token keyword">val</span> isActive<span class="token operator">:</span> Boolean

<span class="token comment">//当 Job 正常结束或者由于异常结束，均返回 true</span>
<span class="token keyword">public</span> <span class="token keyword">val</span> isCompleted<span class="token operator">:</span> Boolean

<span class="token comment">//当 Job 被主动取消或者由于异常结束，均返回 true</span>
<span class="token keyword">public</span> <span class="token keyword">val</span> isCancelled<span class="token operator">:</span> Boolean

<span class="token comment">//启动 Job</span>
<span class="token comment">//如果此调用的确启动了 Job，则返回 true</span>
<span class="token comment">//如果 Job 调用前就已处于 started 或者是 completed 状态，则返回 false </span>
<span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean

<span class="token comment">//用于取消 Job，可同时通过传入 Exception 来标明取消原因</span>
<span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">cancel</span><span class="token punctuation">(</span>cause<span class="token operator">:</span> CancellationException<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>

<span class="token comment">//阻塞等待直到此 Job 结束运行</span>
<span class="token keyword">public</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">//当 Job 结束运行时（不管由于什么原因）回调此方法，可用于接收可能存在的运行异常</span>
<span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">invokeOnCompletion</span><span class="token punctuation">(</span>handler<span class="token operator">:</span> CompletionHandler<span class="token punctuation">)</span><span class="token operator">:</span> DisposableHandle
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Job 具有以下几种状态值，每种状态对应的属性值各不相同</p>`,82),S=n("th",{style:{"text-align":"left"}},[n("strong",null,"State")],-1),_={style:{"text-align":"left"}},j={href:"https://Kotlin.github.io/Kotlinx.coroutines/Kotlinx-coroutines-core/Kotlinx.coroutines/-job/is-active.html",target:"_blank",rel:"noopener noreferrer"},A={style:{"text-align":"left"}},T={href:"https://Kotlin.github.io/Kotlinx.coroutines/Kotlinx-coroutines-core/Kotlinx.coroutines/-job/is-completed.html",target:"_blank",rel:"noopener noreferrer"},B={style:{"text-align":"left"}},I={href:"https://Kotlin.github.io/Kotlinx.coroutines/Kotlinx-coroutines-core/Kotlinx.coroutines/-job/is-cancelled.html",target:"_blank",rel:"noopener noreferrer"},J=n("tbody",null,[n("tr",null,[n("td",{style:{"text-align":"left"}},[n("em",null,"New"),s(" (optional initial state)")]),n("td",{style:{"text-align":"left"}},"false"),n("td",{style:{"text-align":"left"}},"false"),n("td",{style:{"text-align":"left"}},"false")]),n("tr",null,[n("td",{style:{"text-align":"left"}},[n("em",null,"Active"),s(" (default initial state)")]),n("td",{style:{"text-align":"left"}},"true"),n("td",{style:{"text-align":"left"}},"false"),n("td",{style:{"text-align":"left"}},"false")]),n("tr",null,[n("td",{style:{"text-align":"left"}},[n("em",null,"Completing"),s(" (transient state)")]),n("td",{style:{"text-align":"left"}},"true"),n("td",{style:{"text-align":"left"}},"false"),n("td",{style:{"text-align":"left"}},"false")]),n("tr",null,[n("td",{style:{"text-align":"left"}},[n("em",null,"Cancelling"),s(" (transient state)")]),n("td",{style:{"text-align":"left"}},"false"),n("td",{style:{"text-align":"left"}},"false"),n("td",{style:{"text-align":"left"}},"true")]),n("tr",null,[n("td",{style:{"text-align":"left"}},[n("em",null,"Cancelled"),s(" (final state)")]),n("td",{style:{"text-align":"left"}},"false"),n("td",{style:{"text-align":"left"}},"true"),n("td",{style:{"text-align":"left"}},"true")]),n("tr",null,[n("td",{style:{"text-align":"left"}},[n("em",null,"Completed"),s(" (final state)")]),n("td",{style:{"text-align":"left"}},"false"),n("td",{style:{"text-align":"left"}},"true"),n("td",{style:{"text-align":"left"}},"false")])],-1),E=e(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//将协程设置为延迟启动</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>start <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span><span class="token operator">..</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">//每循环一次均延迟一百毫秒</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    job<span class="token punctuation">.</span><span class="token function">invokeOnCompletion</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;invokeOnCompletion：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1. job.isActive：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isActive</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1. job.isCancelled：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isCancelled</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1. job.isCompleted：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isCompleted</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    job<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2. job.isActive：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isActive</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2. job.isCancelled：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isCancelled</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;2. job.isCompleted：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isCompleted</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    <span class="token comment">//休眠四百毫秒后再主动取消协程</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>
    job<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token function">CancellationException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;test&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token comment">//休眠四百毫秒防止JVM过快停止导致 invokeOnCompletion 来不及回调</span>
    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>

    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;3. job.isActive：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isActive</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;3. job.isCancelled：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isCancelled</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;3. job.isCompleted：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">job<span class="token punctuation">.</span>isCompleted</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">1</span><span class="token punctuation">.</span> job<span class="token punctuation">.</span>isActive：<span class="token boolean">false</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">1</span><span class="token punctuation">.</span> job<span class="token punctuation">.</span>isCancelled：<span class="token boolean">false</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">1</span><span class="token punctuation">.</span> job<span class="token punctuation">.</span>isCompleted：<span class="token boolean">false</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">2</span><span class="token punctuation">.</span> job<span class="token punctuation">.</span>isActive：<span class="token boolean">true</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">2</span><span class="token punctuation">.</span> job<span class="token punctuation">.</span>isCancelled：<span class="token boolean">false</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">2</span><span class="token punctuation">.</span> job<span class="token punctuation">.</span>isCompleted：<span class="token boolean">false</span>
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> invokeOnCompletion：java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>CancellationException<span class="token operator">:</span> test
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">3</span><span class="token punctuation">.</span> job<span class="token punctuation">.</span>isActive：<span class="token boolean">false</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">3</span><span class="token punctuation">.</span> job<span class="token punctuation">.</span>isCancelled：<span class="token boolean">true</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">3</span><span class="token punctuation">.</span> job<span class="token punctuation">.</span>isCompleted：<span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、async" tabindex="-1"><a class="header-anchor" href="#_3、async" aria-hidden="true">#</a> 3、async</h2><p>看下 <code>async</code> 函数的方法签名。<code>async</code> 也是一个作用于 CoroutineScope 的扩展函数，和 <code>launch</code> 的区别主要就在于：<code>async</code> 可以返回协程的执行结果，而 <code>launch</code> 不行</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>
    context<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> EmptyCoroutineContext<span class="token punctuation">,</span>
    start<span class="token operator">:</span> CoroutineStart <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>DEFAULT<span class="token punctuation">,</span>
    block<span class="token operator">:</span> <span class="token keyword">suspend</span> CoroutineScope<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> T
<span class="token punctuation">)</span><span class="token operator">:</span> Deferred<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>await()</code>方法可以拿到 async 协程的执行结果，可以看到两个协程的总耗时是远少于七秒的，总耗时基本等于耗时最长的协程</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        runBlocking <span class="token punctuation">{</span>
            <span class="token keyword">val</span> asyncA <span class="token operator">=</span> async <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
                <span class="token number">1</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">val</span> asyncB <span class="token operator">=</span> async <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span>
                <span class="token number">2</span>
            <span class="token punctuation">}</span>
            <span class="token function">log</span><span class="token punctuation">(</span>asyncA<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> asyncB<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">3</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">4070</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>由于 launch 和 async 仅能够在 CouroutineScope 中使用，所以任何创建的协程都会被该 scope 追踪。Kotlin 禁止创建不能够被追踪的协程，从而避免协程泄漏</p></blockquote><h2 id="_4、async-错误用法" tabindex="-1"><a class="header-anchor" href="#_4、async-错误用法" aria-hidden="true">#</a> 4、async 错误用法</h2><p>修改上述代码，可以发现两个协程的总耗时就会变为七秒左右</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        runBlocking <span class="token punctuation">{</span>
            <span class="token keyword">val</span> asyncA <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>start <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
                <span class="token number">1</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">val</span> asyncB <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>start <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span>
                <span class="token number">2</span>
            <span class="token punctuation">}</span>
            <span class="token function">log</span><span class="token punctuation">(</span>asyncA<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> asyncB<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">3</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token number">7077</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>会造成这不同区别是因为 <code>CoroutineStart.LAZY</code> 不会主动启动协程，而是直到调用<code>async.await()</code>或者<code>async.satrt()</code>后才会启动（即懒加载模式），所以<code>asyncA.await() + asyncB.await()</code>会导致两个协程其实是在顺序执行。而默认值 <code>CoroutineStart.DEFAULT</code> 参数会使得协程在声明的同时就被启动了（实际上还需要等待被调度执行，但可以看做是立即就执行了），所以此时调用第一个 <code>async.await()</code>时两个协程其实都是处于运行状态，所以总耗时就是四秒左右</p><p>此时可以通过先调用<code>start()</code>再调用<code>await()</code>来实现第一个例子的效果</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>asyncA<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
asyncB<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">log</span><span class="token punctuation">(</span>asyncA<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> asyncB<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、async-并行分解" tabindex="-1"><a class="header-anchor" href="#_5、async-并行分解" aria-hidden="true">#</a> 5、async 并行分解</h2><p>由 <code>suspend</code> 函数启动的所有协程都必须在该函数返回结果时停止，因此你可能需要保证这些协程在返回结果之前完成。借助 Kotlin 中的结构化并发机制，你可以定义用于启动一个或多个协程的 <code>coroutineScope</code>。然后，你可以使用 <code>await()</code>（针对单个协程）或 <code>awaitAll()</code>（针对多个协程）保证这些协程在从函数返回结果之前完成</p><p>假设我们定义一个用于异步获取两个文档的 <code>coroutineScope</code>，通过对每个延迟引用调用 <code>await()</code>，我们可以保证这两项 <code>async</code> 操作在返回值之前完成：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">fetchTwoDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> coroutineScope <span class="token punctuation">{</span>
    <span class="token keyword">val</span> deferredOne <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">fetchDoc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token keyword">val</span> deferredTwo <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">fetchDoc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    deferredOne<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    deferredTwo<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还可以对集合使用 <code>awaitAll()</code>来达到相同效果。虽然 <code>fetchTwoDocs()</code> 使用 <code>async</code> 启动新协程，但该函数使用 <code>awaitAll()</code> 等待启动的协程完成后才会返回结果。不过，即使我们没有调用 <code>awaitAll()</code>，<code>coroutineScope</code> 构建器也会等到所有内部协程都完成后才会恢复名为 <code>fetchTwoDocs</code> 的协程。此外，<code>coroutineScope</code> 会捕获协程抛出的所有异常，并将其传送给调用方</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">fetchTwoDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> coroutineScope <span class="token punctuation">{</span>
    <span class="token keyword">val</span> deferreds <span class="token operator">=</span> <span class="token function">listOf</span><span class="token punctuation">(</span>
        async <span class="token punctuation">{</span> <span class="token function">fetchDoc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        async <span class="token punctuation">{</span> <span class="token function">fetchDoc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">)</span>
    deferreds<span class="token punctuation">.</span><span class="token function">awaitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、deferred" tabindex="-1"><a class="header-anchor" href="#_6、deferred" aria-hidden="true">#</a> 6、Deferred</h2><p><code>async</code> 函数的返回值是一个 Deferred 对象。Deferred 是一个接口类型，继承于 Job 接口，所以 Job 包含的属性和方法 Deferred 都有，其主要是在 Job 的基础上扩展了 <code>await()</code>方法</p><h1 id="七、coroutinecontext" tabindex="-1"><a class="header-anchor" href="#七、coroutinecontext" aria-hidden="true">#</a> 七、CoroutineContext</h1><p>CoroutineContext 使用以下元素集定义协程的行为：</p><ul><li>Job：控制协程的生命周期</li><li>CoroutineDispatcher：将任务指派给适当的线程</li><li>CoroutineName：协程的名称，可用于调试</li><li>CoroutineExceptionHandler：处理未捕获的异常</li></ul><h2 id="_1、job" tabindex="-1"><a class="header-anchor" href="#_1、job" aria-hidden="true">#</a> 1、Job</h2><p>协程中的 Job 是其上下文 CoroutineContext 中的一部分，可以通过 <code>coroutineContext[Job]</code> 表达式从上下文中获取到，我们可以通过控制 Job 来控制 CoroutineScope 的生命周期</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">Job</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">val</span> scope <span class="token operator">=</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>job <span class="token operator">+</span> Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Unit <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">job</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> CancellationException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job is cancelled&quot;</span></span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> e
        <span class="token punctuation">}</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;end&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;scope job is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">scope<span class="token punctuation">.</span>coroutineContext<span class="token punctuation">[</span>Job<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    scope<span class="token punctuation">.</span>coroutineContext<span class="token punctuation">[</span>Job<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> job <span class="token keyword">is</span> JobImpl<span class="token punctuation">{</span>Active<span class="token punctuation">}</span><span class="token label symbol">@759ebb3d</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> scope job <span class="token keyword">is</span> JobImpl<span class="token punctuation">{</span>Active<span class="token punctuation">}</span><span class="token label symbol">@759ebb3d</span>
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> job <span class="token keyword">is</span> cancelled
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际上 CoroutineScope 的 <code>isActive</code> 这个扩展属性只是 <code>coroutineContext[Job]?.isActive ?: true</code> 的一种简便写法</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">val</span> CoroutineScope<span class="token punctuation">.</span>isActive<span class="token operator">:</span> Boolean
    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> coroutineContext<span class="token punctuation">[</span>Job<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">.</span>isActive <span class="token operator">?:</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、coroutinedispatcher" tabindex="-1"><a class="header-anchor" href="#_2、coroutinedispatcher" aria-hidden="true">#</a> 2、CoroutineDispatcher</h2><p>CoroutineContext 包含一个 CoroutineDispatcher（协程调度器）用于指定执行协程的目标载体，即 <strong>运行于哪个线程</strong>。CoroutineDispatcher 可以将协程的执行操作限制在特定线程上，也可以将其分派到线程池中，或者让它无限制地运行。所有的协程构造器（如 launch 和 async）都接受一个可选参数，即 CoroutineContext ，该参数可用于显式指定要创建的协程和其它上下文元素所要使用的 CoroutineDispatcher</p><p>要在主线程之外运行代码，可以指定 Kotlin 协程在 Default 或 IO 调度程序上执行工作。在 Kotlin 中，所有协程都必须在 CoroutineDispatcher 中运行，即使它们在主线程上运行也是如此。协程可以自行暂停，而 CoroutineDispatcher 负责将其恢复</p><p>Kotlin 协程库提供了四个 Dispatcher 用于指定在哪一类线程中执行协程：</p><ul><li>Dispatchers.Default。默认调度器，适合用于执行占用大量 CPU 资源的任务。例如：对列表排序和解析 JSON</li><li>Dispatchers.IO。适合用于执行磁盘或网络 I/O 的任务。例如：使用 Room 组件、读写磁盘文件，执行网络请求</li><li>Dispatchers.Unconfined。对执行协程的线程不做限制，可以直接在当前调度器所在线程上执行</li><li>Dispatchers.Main。使用此调度程序可用于在 Android 主线程上运行协程，只能用于与界面交互和执行快速工作，例如：更新 UI、调用 <code>LiveData.setValue</code></li></ul><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    launch <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main runBlocking&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Default&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Unconfined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Unconfined 1&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;IO&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Unconfined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Unconfined 2&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">launch</span><span class="token punctuation">(</span><span class="token function">newSingleThreadContext</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;MyOwnThread&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;newSingleThreadContext&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Unconfined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Unconfined 4&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Unconfined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Unconfined 3&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;GlobalScope&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> Default
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> IO
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> Unconfined <span class="token number">1</span>
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> Unconfined <span class="token number">2</span>
<span class="token punctuation">[</span>MyOwnThread<span class="token punctuation">]</span> newSingleThreadContext
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> Unconfined <span class="token number">3</span>
<span class="token punctuation">[</span>MyOwnThread<span class="token punctuation">]</span> Unconfined <span class="token number">4</span>
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> GlobalScope
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> main runBlocking
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>launch</code> 在不执行 Dispatchers 的情况下使用时，它从外部的协程作用域继承上下文和调度器，即和 runBlocking 保持一致，均在 main 线程执行</li><li>IO 和 Default 均依靠后台线程池来执行</li><li>Unconfined 则不限定具体的线程类型，当前调度器在哪个线程，就在该线程上进行执行，因此上述例子中每个 Unconfined 协程所在线程均不一样</li><li>GlobalScope 启动协程时默认使用的调度器是 Dispatchers.Default，因此也是在后台线程池中执行</li><li><code>newSingleThreadContext</code> 用于为协程专门创建一个新的线程，专用线程是一种成本非常昂贵的资源，在实际开发时必须当不再需要时释放掉线程资源，或者存储在顶级变量中以便在整个应用程序中进行复用</li></ul><h2 id="_3、withcontext" tabindex="-1"><a class="header-anchor" href="#_3、withcontext" aria-hidden="true">#</a> 3、withContext</h2><p>对于以下代码，<code>get</code>方法内使用<code>withContext(Dispatchers.IO)</code> 创建了一个指定在 IO 线程池中运行的代码块，该区间内的任何代码都始终通过 IO 线程来执行。由于 <code>withContext</code> 方法本身就是一个挂起函数，因此 <code>get</code> 方法也必须定义为挂起函数</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">fetchDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                      <span class="token comment">// Dispatchers.Main</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;developer.android.com&quot;</span></span><span class="token punctuation">)</span>  <span class="token comment">// Dispatchers.Main</span>
    <span class="token function">show</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>                               <span class="token comment">// Dispatchers.Main</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span>                 <span class="token comment">// Dispatchers.Main</span>
    <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span>              <span class="token comment">// Dispatchers.IO (main-safety block)</span>
        <span class="token comment">/* perform network IO here */</span>          <span class="token comment">// Dispatchers.IO (main-safety block)</span>
    <span class="token punctuation">}</span>                                          <span class="token comment">// Dispatchers.Main</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>借助协程，你可以细粒度地来调度线程。由于<code>withContext()</code>支持在不引入回调的情况下控制任何代码的执行线程池，因此你可以将其应用于非常小的函数，例如从数据库中读取数据或执行网络请求。一种不错的做法是使用 <code>withContext()</code> 来确保每个函数都是主线程安全的，这意味着，你可以从主线程调用每个函数。这样，调用方就从不需要考虑应该使用哪个线程来执行函数了</p><p>在前面的示例中，<code>fetchDocs()</code> 方法在主线程上执行，不过它可以安全地调用 <code>get</code>方法，因为<code>get</code>方法已确保网络请求会在子线程中执行。由于协程支持 <code>suspend</code> 和 <code>resume</code>操作，因此 <code>withContext</code> 块完成后，主线程上的协程会立即根据 <code>get</code> 结果恢复</p><p>与基于回调的等效实现相比，<code>withContext()</code> 不会增加额外的开销。此外，在某些情况下，还可以优化 <code>withContext()</code> 调用，使其超越基于回调的等效实现。例如，如果某个函数需要先后调用十次网络请求，你可以在最外层调用 <code>withContext()</code> 让协程只切换一次线程，这样即使每个网络请求内部均会使用 <code>withContext()</code>，它也会留在同一调度程序上，从而避免频率切换线程。此外，协程还优化了 <code>Dispatchers.Default</code> 与 <code>Dispatchers.IO</code> 之间的切换，以尽可能避免线程切换</p><blockquote><p>使用线程池的调度器（例如 <code>Dispatchers.IO</code> 或 <code>Dispatchers.Default</code>）不能保证代码块一直在同一线程上从上到下执行，在某些情况下，协程在 <code>suspend</code> 和 <code>resume</code> 后可能会将任务移交给另一个线程来执行。这意味着，对于整个 <code>withContext()</code> 块，由于多线程并发之间的<strong>原子性</strong>和<strong>可见性</strong>等原因，先后读取到的线程局部变量可能并非是同个值</p></blockquote><h2 id="_4、coroutinename" tabindex="-1"><a class="header-anchor" href="#_4、coroutinename" aria-hidden="true">#</a> 4、CoroutineName</h2><p>CoroutineName 用于为协程指定一个名字，方便调试和定位问题</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;RunBlocking&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">launch</span><span class="token punctuation">(</span><span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;MainCoroutine&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">launch</span><span class="token punctuation">(</span><span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine#A&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;launch A&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token function">launch</span><span class="token punctuation">(</span><span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine#B&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;launch B&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、coroutineexceptionhandler" tabindex="-1"><a class="header-anchor" href="#_5、coroutineexceptionhandler" aria-hidden="true">#</a> 5、CoroutineExceptionHandler</h2><p>在下文的异常处理会讲到</p><h2 id="_6、组合上下文元素" tabindex="-1"><a class="header-anchor" href="#_6、组合上下文元素" aria-hidden="true">#</a> 6、组合上下文元素</h2><p>有时我们需要为协程上下文定义多个元素，此时就可以用 <code>+</code> 运算符。例如，我们可以同时为协程指定 Dispatcher 和 CoroutineName</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default <span class="token operator">+</span> <span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;test&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello World&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而由于 CoroutineContext 是由一组元素组成的，所以加号右侧的元素会覆盖加号左侧的元素，从而组成新的 CoroutineContext。比如，<code>(Dispatchers.Main, &quot;name&quot;) + (Dispatchers.IO)</code> 的运行结果是：<code>(Dispatchers.IO, &quot;name&quot;)</code></p><h1 id="八、取消协程" tabindex="-1"><a class="header-anchor" href="#八、取消协程" aria-hidden="true">#</a> 八、取消协程</h1><p>如果用户退出启动了协程的 Activity / Fragment，那正常情况下就应该取消所有协程</p><p><code>job.cancel()</code>就用于取消协程，<code>job.join()</code>用于阻塞等待协程运行结束。因为 <code>cancel()</code> 函数调用后会马上返回而不是等待协程结束后再返回，所以此时协程不一定就是已经停止运行了。如果需要确保协程结束运行后再执行后续代码，就需要调用 <code>join()</code> 方法来阻塞等待。也可以通过调用 Job 的扩展函数 <code>cancelAndJoin()</code> 来完成相同操作，它结合了 <code>cancel</code> 和 <code>join</code>两个操作</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job: I&#39;m sleeping </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> ...&quot;</span></span><span class="token punctuation">)</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: I&#39;m tired of waiting!&quot;</span></span><span class="token punctuation">)</span>
    job<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: Now I can quit.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> main<span class="token operator">:</span> I&#39;m tired of waiting<span class="token operator">!</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> main<span class="token operator">:</span> Now I can quit<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1、协程可能无法取消" tabindex="-1"><a class="header-anchor" href="#_1、协程可能无法取消" aria-hidden="true">#</a> 1、协程可能无法取消</h2><p>并不是所有协程都可以响应取消操作，协程的取消操作是需要协作 (cooperative) 完成的，<strong>协程必须协作才能被取消</strong>。协程库中的所有挂起函数都是可取消的，它们在运行前检查协程是否被取消了，并在取消时抛出 CancellationException 从而结束整个任务。而如果协程在执行计算任务前没有判断自身是否已被取消的话，此时就无法取消协程</p><p>所以即使以下代码主动取消了协程，协程也只会在完成既定循环后才结束运行，因为协程没有在每次循环前先进行检查，导致任务不受取消操作的影响</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> nextPrintTime <span class="token operator">=</span> startTime
        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> nextPrintTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job: I&#39;m sleeping </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">i<span class="token operator">++</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ...&quot;</span></span><span class="token punctuation">)</span>
                nextPrintTime <span class="token operator">+=</span> <span class="token number">500L</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: I&#39;m tired of waiting!&quot;</span></span><span class="token punctuation">)</span>
    job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: Now I can quit.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> main<span class="token operator">:</span> I&#39;m tired of waiting<span class="token operator">!</span>
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">3</span> <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">4</span> <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> main<span class="token operator">:</span> Now I can quit<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了实现取消协程的目的，就需要为上述代码加上判断协程是否还处于可运行状态的逻辑，当不可运行时就主动退出协程。<code>isActive</code> 是 CoroutineScope 的扩展属性，就用于判断协程是否还处于可运行状态</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> nextPrintTime <span class="token operator">=</span> startTime
        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>isActive<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> nextPrintTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job: I&#39;m sleeping </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">i<span class="token operator">++</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ...&quot;</span></span><span class="token punctuation">)</span>
                    nextPrintTime <span class="token operator">+=</span> <span class="token number">500L</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span><span class="token label symbol">@launch</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: I&#39;m tired of waiting!&quot;</span></span><span class="token punctuation">)</span>
    job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: Now I can quit.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>取消协程这个操作类似于在 Java 中调用<code>Thread.interrupt()</code>方法来向线程发起中断请求，这两个操作都不会强制停止协程和线程，外部只是相当于发起一个停止运行的请求，需要依靠协程和线程响应请求后主动停止运行</p><p>Java 和 Kotlin 之所以均没有提供一个可以直接强制停止线程或协程的方法，是因为这个操作可能会带来各种意想不到的情况。例如，在停止线程或协程的时候，它们可能还持有着某些排他性资源（例如：锁，数据库链接），如果强制性地停止，它们持有的锁就会一直无法得到释放，导致其它线程或协程一直无法得到目标资源，最终就可能导致线程死锁。所以<code>Thread.stop()</code>方法目前也是处于废弃状态，Java 官方并没有提供一个可靠的停止线程的方法</p><h2 id="_2、用-finally-释放资源" tabindex="-1"><a class="header-anchor" href="#_2、用-finally-释放资源" aria-hidden="true">#</a> 2、用 finally 释放资源</h2><p>可取消的挂起函数在取消时会抛出 CancellationException，可以依靠<code>try {...} finally {...}</code> 或者 Kotlin 的 <code>use</code> 函数在取消协程后释放持有的资源</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job: I&#39;m sleeping </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> ...&quot;</span></span><span class="token punctuation">)</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job: I&#39;m running finally&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: I&#39;m tired of waiting!&quot;</span></span><span class="token punctuation">)</span>
    job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: Now I can quit.&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> main<span class="token operator">:</span> I&#39;m tired of waiting<span class="token operator">!</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> StandaloneCoroutine was cancelled
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> job<span class="token operator">:</span> I&#39;m running <span class="token keyword">finally</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> main<span class="token operator">:</span> Now I can quit<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、noncancellable" tabindex="-1"><a class="header-anchor" href="#_3、noncancellable" aria-hidden="true">#</a> 3、NonCancellable</h2><p>如果在上一个例子中的 <code>finally</code> 块中再调用挂起函数的话，将会导致抛出 CancellationException，因为此时协程已经被取消了。通常我们并不会遇到这种情况，因为常见的资源释放操作都是非阻塞的，且不涉及任何挂起函数。但在极少数情况下我们需要在取消的协程中再调用挂起函数，此时可以使用 <code>withContext</code> 函数和 <code>NonCancellable</code>上下文将相应的代码包装在 <code>withContext(NonCancellable) {...}</code> 代码块中，NonCancellable 就用于创建一个无法取消的协程作用域</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> launchA <span class="token operator">=</span> launch <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;launchA-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;launchA isCompleted&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">val</span> launchB <span class="token operator">=</span> launch <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;launchB-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token function">withContext</span><span class="token punctuation">(</span>NonCancellable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;launchB isCompleted&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//延时一百毫秒，保证两个协程都已经被启动了</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span>
    launchA<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    launchB<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;end&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> start
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchA<span class="token operator">-</span><span class="token number">0</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchB<span class="token operator">-</span><span class="token number">0</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchA<span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchB<span class="token operator">-</span><span class="token number">1</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchA<span class="token operator">-</span><span class="token number">2</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchB<span class="token operator">-</span><span class="token number">2</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> end
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> launchB isCompleted
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4、父协程和子协程" tabindex="-1"><a class="header-anchor" href="#_4、父协程和子协程" aria-hidden="true">#</a> 4、父协程和子协程</h2><p>当一个协程在另外一个协程的协程作用域中启动时，它将通过 <code>CoroutineScope.coroutineContext</code> 继承其上下文，新启动的协程就被称为子协程，子协程的 Job 将成为父协程 Job 的子 Job。父协程总是会等待其所有子协程都完成后才结束自身，所以父协程不必显式跟踪它启动的所有子协程，也不必使用 <code>Job.join</code> 在末尾等待子协程完成</p><p>所以虽然 parentJob 启动的三个子协程的延时时间各不相同，但它们最终都会打印出日志</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> parentJob <span class="token operator">=</span> launch <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span>
            launch <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200L</span><span class="token punctuation">)</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> is done&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;request: I&#39;m done and I don&#39;t explicitly join my children that are still active&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> request<span class="token operator">:</span> I&#39;m done <span class="token operator">and</span> I don&#39;t explicitly join my children that are still active
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> Coroutine <span class="token number">0</span> <span class="token keyword">is</span> done
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> Coroutine <span class="token number">1</span> <span class="token keyword">is</span> done
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> Coroutine <span class="token number">2</span> <span class="token keyword">is</span> done
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5、传播取消操作" tabindex="-1"><a class="header-anchor" href="#_5、传播取消操作" aria-hidden="true">#</a> 5、传播取消操作</h2><p>一般情况下，协程的取消操作会通过协程的层次结构来进行传播：如果取消父协程或者父协程抛出异常，那么子协程都会被取消；而如果子协程被取消，则不会影响同级协程和父协程，但如果子协程抛出异常则也会导致同级协程和父协程被取消</p><p>对于以下代码，子协程 jon1 被取消并不影响子协程 jon2 和父协程继续运行，但父协程被取消后子协程都会被递归取消</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> request <span class="token operator">=</span> launch <span class="token punctuation">{</span>
        <span class="token keyword">val</span> job1 <span class="token operator">=</span> launch <span class="token punctuation">{</span>
            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job1: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job1 canceled&quot;</span></span><span class="token punctuation">)</span>
                    <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">val</span> job2 <span class="token operator">=</span> launch <span class="token punctuation">{</span>
            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job2: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1600</span><span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;parent job canceled&quot;</span></span><span class="token punctuation">)</span>
    request<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> job1<span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> job2<span class="token operator">:</span> <span class="token number">0</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> job1<span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> job2<span class="token operator">:</span> <span class="token number">1</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> job1<span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> job1 canceled
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> job2<span class="token operator">:</span> <span class="token number">2</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> job2<span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> job2<span class="token operator">:</span> <span class="token number">4</span>
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> parent job canceled
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、withtimeout" tabindex="-1"><a class="header-anchor" href="#_6、withtimeout" aria-hidden="true">#</a> 6、withTimeout</h2><p><code>withTimeout</code> 函数用于指定协程的运行超时时间，如果超时则会抛出 TimeoutCancellationException，从而令协程结束运行</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;start&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">withTimeout</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token number">200</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;end&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> start
Exception <span class="token keyword">in</span> thread <span class="token string-literal singleline"><span class="token string">&quot;main&quot;</span></span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>TimeoutCancellationException<span class="token operator">:</span> Timed <span class="token keyword">out</span> waiting <span class="token keyword">for</span> <span class="token number">300</span> ms
	at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>TimeoutKt<span class="token punctuation">.</span><span class="token function">TimeoutCancellationException</span><span class="token punctuation">(</span>Timeout<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">186</span><span class="token punctuation">)</span>
	at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>TimeoutCoroutine<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Timeout<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">156</span><span class="token punctuation">)</span>
	at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>EventLoopImplBase$DelayedRunnableTask<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>EventLoop<span class="token punctuation">.</span>common<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">497</span><span class="token punctuation">)</span>
	at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>EventLoopImplBase<span class="token punctuation">.</span><span class="token function">processNextEvent</span><span class="token punctuation">(</span>EventLoop<span class="token punctuation">.</span>common<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">274</span><span class="token punctuation">)</span>
	at kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>DefaultExecutor<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>DefaultExecutor<span class="token punctuation">.</span>kt<span class="token operator">:</span><span class="token number">69</span><span class="token punctuation">)</span>
	at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">748</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>withTimeout</code>方法抛出的 TimeoutCancellationException 是 CancellationException 的子类，之前我们并未在输出日志上看到关于 CancellationException 这类异常的堆栈信息，这是因为对于一个已取消的协程来说，CancellationException 被认为是触发协程结束的正常原因。但对于<code>withTimeout</code>方法来说，抛出异常是其上报超时情况的一种手段，所以该异常不会被协程内部消化掉</p><p>如果不希望因为异常导致协程结束，可以改用<code>withTimeoutOrNull</code>方法，如果超时就会返回 null</p><h1 id="九、异常处理" tabindex="-1"><a class="header-anchor" href="#九、异常处理" aria-hidden="true">#</a> 九、异常处理</h1><p>当一个协程由于异常而运行失败时，它会传播这个异常并传递给它的父协程。接下来，父协程会进行下面几步操作：</p><ul><li>取消它自己的子级</li><li>取消它自己</li><li>将异常传播并传递给它的父级</li></ul><p>异常会到达层级的根部，且当前 CoroutineScope 所启动的所有协程都会被取消，但协程并非都是一发现异常就执行以上流程，launch 和 async 在处理异常方面有着一些差异</p><p>launch 将异常视为未捕获异常，类似于 Java 的 <code>Thread.uncaughtExceptionHandler</code>，当发现异常时就会马上抛出。async 期望最终通过调用 await 来获取结果 (或者异常)，所以默认情况下它不会抛出异常，这意味着如果使用 async 启动新的协程，它会静默地将异常丢弃，直到调用 <code>async.await()</code> 才会得到目标值或者抛出存在的异常</p><p>例如，以下的 <code>fetchDocs()</code> 方法由于并没有调用 <code>Deferred.await()</code>，因此异常并不会被抛给调用方，而如果使用的是 launch 而非 async 的话，异常就会马上被抛出</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">val</span> ioScope <span class="token operator">=</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span>

<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">fetchDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    ioScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;taskA throw AssertionError&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1、coroutineexceptionhandler" tabindex="-1"><a class="header-anchor" href="#_1、coroutineexceptionhandler" aria-hidden="true">#</a> 1、CoroutineExceptionHandler</h2><p>如果想主动捕获异常信息，可以使用 CoroutineExceptionHandler 作为协程的上下文元素之一，在这里进行自定义日志记录或异常处理，它类似于对线程使用 <code>Thread.uncaughtExceptionHandler</code>。但是，CoroutineExceptionHandler 只会在预计不会由用户处理的异常上调用，因此在 async 中使用它没有任何效果，当 async 内部发生了异常且没有捕获时，那么调用 <code>async.await()</code> 依然会导致应用崩溃</p><p>以下代码只会捕获到 launch 抛出的异常</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> handler <span class="token operator">=</span> CoroutineExceptionHandler <span class="token punctuation">{</span> _<span class="token punctuation">,</span> exception <span class="token operator">-&gt;</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Caught </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">exception</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">val</span> deferred <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">async</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token function">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">joinAll</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> deferred<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> Caught java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>AssertionError
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_2、supervisorjob" tabindex="-1"><a class="header-anchor" href="#_2、supervisorjob" aria-hidden="true">#</a> 2、SupervisorJob</h2><p>由于异常导致的取消在协程中是一种双向关系，会在整个协程层次结构中传播，那如果我们需要的是<strong>单向取消</strong>该怎么实现呢？</p><p>例如，假设在 Activity 中启动了多个协程，如果单个协程所代表的子任务失败了，此时并不一定需要连锁终止整个 Activity 内部的所有其它协程任务，即此时希望子协程的异常不会传播给同级协程和父协程。而当 Activity 退出后，父协程的异常（即 CancellationException）又应该连锁传播给所有子协程，终止所有子协程</p><p>可以使用 SupervisorJob 来实现上述效果，取消操作只会向下传播，一个子协程的运行失败不会影响到同级协程和父协程</p><p>例如，以下示例中 firstChild 抛出的异常不会导致 secondChild 被取消，但当 supervisor 被取消时 secondChild 也被同时取消了</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token keyword">val</span> supervisor <span class="token operator">=</span> <span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">with</span><span class="token punctuation">(</span><span class="token function">CoroutineScope</span><span class="token punctuation">(</span>coroutineContext <span class="token operator">+</span> supervisor<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> firstChild <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>CoroutineExceptionHandler <span class="token punctuation">{</span> _<span class="token punctuation">,</span> _ <span class="token operator">-&gt;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;First child is failing&quot;</span></span><span class="token punctuation">)</span>
            <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;First child is cancelled&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">val</span> secondChild <span class="token operator">=</span> launch <span class="token punctuation">{</span>
            firstChild<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;First child is cancelled: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">firstChild<span class="token punctuation">.</span>isCancelled</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, but second one is still active&quot;</span></span><span class="token punctuation">)</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Second child is cancelled because supervisor is cancelled&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        firstChild<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Cancelling supervisor&quot;</span></span><span class="token punctuation">)</span>
        <span class="token comment">//取消所有协程</span>
        supervisor<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        secondChild<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main<span class="token punctuation">]</span> First child <span class="token keyword">is</span> failing
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> First child <span class="token keyword">is</span> cancelled<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> but second one <span class="token keyword">is</span> still active
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> Cancelling supervisor
<span class="token punctuation">[</span>main<span class="token punctuation">]</span> Second child <span class="token keyword">is</span> cancelled because supervisor <span class="token keyword">is</span> cancelled
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是，如果异常没有被处理且 CoroutineContext 没有包含一个 CoroutineExceptionHandler 的话，异常会到达默认线程的 ExceptionHandler。在 JVM 中，异常会被打印在控制台；而在 Android 中，无论异常在那个 Dispatcher 中发生，都会直接导致应用崩溃。所以如果上述例子中移除了 firstChild 包含的 CoroutineExceptionHandler 的话，就会导致 Android 应用崩溃</p><h1 id="十、android-ktx" tabindex="-1"><a class="header-anchor" href="#十、android-ktx" aria-hidden="true">#</a> 十、Android ktx</h1><p>Android ktx 是包含在 Android Jetpack 及其他 Android 库中的一组 Kotlin 扩展程序。ktx 扩展程序可以为 Jetpack、Android 平台及其他 API 提供简洁的惯用 Kotlin 代码，这些扩展程序利用了多种 Kotlin 语言功能，其中就包括了对 Kotlin 协程的支持</p><h2 id="_1、lifecycle-ktx" tabindex="-1"><a class="header-anchor" href="#_1、lifecycle-ktx" aria-hidden="true">#</a> 1、Lifecycle ktx</h2><p>Lifecycle ktx 为每个 Lifecycle 对象（Activity、Fragment、Process 等）定义了一个 LifecycleScope，该作用域具有生命周期安全的保障，在此范围内启动的协程会在 Lifecycle 被销毁时同时取消，可以使用 <code>lifecycle.coroutineScope</code> 或 <code>lifecycleOwner.lifecycleScope</code> 属性来拿到该 CoroutineScope</p><p>引入依赖</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
    implementation <span class="token interpolation-string"><span class="token string">&quot;androidx.lifecycle:lifecycle-runtime-ktx:2.4.0&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用示例</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MyActivity <span class="token operator">:</span> <span class="token function">AppCompatActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token operator">:</span> Bundle<span class="token operator">?</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span>
        lifecycleScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
            <span class="token comment">//Do Something</span>
        <span class="token punctuation">}</span>
        lifecycle<span class="token punctuation">.</span>coroutineScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
            <span class="token comment">//Do Something</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>lifecycleScope</code> 和 <code>lifecycle.coroutineScope</code> 两者是等价的，<code>lifecycleScope</code>只是 ktx 库提供的一种简便写法。从源码也可以看到，lifecycleScope 是存储在抽象类 Lifecycle 的 <code>mInternalScopeRef</code>字段中，且使用的是 SupervisorJob 和 <code>Dispatchers.Main.immediate</code>，因此我们不必担心任意子协程的异常情况会影响到全局的协程任务，且其默认就是在主线程运行协程</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">val</span> LifecycleOwner<span class="token punctuation">.</span>lifecycleScope<span class="token operator">:</span> LifecycleCoroutineScope
    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> lifecycle<span class="token punctuation">.</span>coroutineScope

<span class="token keyword">public</span> <span class="token keyword">val</span> Lifecycle<span class="token punctuation">.</span>coroutineScope<span class="token operator">:</span> LifecycleCoroutineScope
    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">val</span> existing <span class="token operator">=</span> mInternalScopeRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> LifecycleCoroutineScopeImpl<span class="token operator">?</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>existing <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> existing
            <span class="token punctuation">}</span>
            <span class="token keyword">val</span> newScope <span class="token operator">=</span> <span class="token function">LifecycleCoroutineScopeImpl</span><span class="token punctuation">(</span>
                <span class="token keyword">this</span><span class="token punctuation">,</span>
                <span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">.</span>immediate
            <span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>mInternalScopeRef<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> newScope<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                newScope<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> newScope
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、viewmodel-ktx" tabindex="-1"><a class="header-anchor" href="#_2、viewmodel-ktx" aria-hidden="true">#</a> 2、ViewModel ktx</h2><p>ViewModel ktx 库提供了一个 viewModelScope，用于在 ViewModel 中启动协程，该作用域的生命周期和 ViewModel 相等，当 ViewModel 回调了 <code>onCleared()</code>方法时会自动取消该作用域</p><p>引入依赖</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
    implementation <span class="token interpolation-string"><span class="token string">&quot;androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.0&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，以下 <code>fetchDocs()</code> 方法内就依靠 <code>viewModelScope</code> 启动了一个协程，用于在后台线程发起网络请求</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> MyViewModel <span class="token operator">:</span> <span class="token function">ViewModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">fun</span> <span class="token function">fetchDocs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        viewModelScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
            <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;https://developer.android.com&quot;</span></span><span class="token punctuation">)</span>
            <span class="token function">show</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span>url<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>IO<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码可以看到其大体实现思路和<code>lifecycleScope</code> 类似，存储在 ViewModel 类的 <code>mBagOfTags</code> 这个 Map 中，且使用的也是 SupervisorJob 和 <code>Dispatchers.Main.immediate</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">val</span> ViewModel<span class="token punctuation">.</span>viewModelScope<span class="token operator">:</span> CoroutineScope
    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> scope<span class="token operator">:</span> CoroutineScope<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getTag</span><span class="token punctuation">(</span>JOB_KEY<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>scope <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> scope
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token function">setTagIfAbsent</span><span class="token punctuation">(</span>
            JOB_KEY<span class="token punctuation">,</span>
            <span class="token function">CloseableCoroutineScope</span><span class="token punctuation">(</span><span class="token function">SupervisorJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span>
        <span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token function">CloseableCoroutineScope</span><span class="token punctuation">(</span>context<span class="token operator">:</span> CoroutineContext<span class="token punctuation">)</span> <span class="token operator">:</span> Closeable<span class="token punctuation">,</span> CoroutineScope <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> coroutineContext<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> context

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        coroutineContext<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、livedata-ktx" tabindex="-1"><a class="header-anchor" href="#_3、livedata-ktx" aria-hidden="true">#</a> 3、LiveData ktx</h2><p>在某些情况下，我们需要先完成特定的异步计算任务，根据计算结果来向 LiveData 回调值，此时就可以使用 LiveData ktx 提供的 <code>liveData</code> 构建器函数来执行 suspend 函数所代表的异步计算任务（耗时任务），并将结果赋值给 LiveData</p><p>引入依赖</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
    implementation <span class="token interpolation-string"><span class="token string">&quot;androidx.lifecycle:lifecycle-livedata-ktx:2.4.0&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在以下示例中，<code>loadUser()</code> 是在其它地方声明的 suspend 函数，你可以使用 <code>liveData</code> 构建器函数异步调用 <code>loadUser()</code>，然后使用 <code>emit()</code> 来发出结果：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> user<span class="token operator">:</span> LiveData<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span> <span class="token operator">=</span> liveData <span class="token punctuation">{</span>
    <span class="token keyword">val</span> <span class="token keyword">data</span> <span class="token operator">=</span> database<span class="token punctuation">.</span><span class="token function">loadUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">emit</span><span class="token punctuation">(</span><span class="token keyword">data</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从源码可以看到，我们所传入的 suspend 任务体 block 最终是会被 CoroutineLiveData 包装为一个 BlockRunner 对象，而 CoroutineLiveData 会在自身开始有 Observer 监听时执行 blockRunner，并在所有 Observer 均被移除时自动 Cancel 掉 blockRunner</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">liveData</span><span class="token punctuation">(</span>
    context<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> EmptyCoroutineContext<span class="token punctuation">,</span>
    timeoutInMs<span class="token operator">:</span> Long <span class="token operator">=</span> DEFAULT_TIMEOUT<span class="token punctuation">,</span>
    <span class="token annotation builtin">@BuilderInference</span> block<span class="token operator">:</span> <span class="token keyword">suspend</span> LiveDataScope<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit
<span class="token punctuation">)</span><span class="token operator">:</span> LiveData<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">CoroutineLiveData</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> timeoutInMs<span class="token punctuation">,</span> block<span class="token punctuation">)</span>

<span class="token keyword">internal</span> <span class="token keyword">class</span> CoroutineLiveData<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span>
    context<span class="token operator">:</span> CoroutineContext <span class="token operator">=</span> EmptyCoroutineContext<span class="token punctuation">,</span>
    timeoutInMs<span class="token operator">:</span> Long <span class="token operator">=</span> DEFAULT_TIMEOUT<span class="token punctuation">,</span>
    block<span class="token operator">:</span> Block<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span>
<span class="token punctuation">)</span> <span class="token operator">:</span> MediatorLiveData<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">var</span> blockRunner<span class="token operator">:</span> BlockRunner<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token operator">?</span>
    <span class="token keyword">private</span> <span class="token keyword">var</span> emittedSource<span class="token operator">:</span> EmittedSource<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>

    <span class="token keyword">init</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> supervisorJob <span class="token operator">=</span> <span class="token function">SupervisorJob</span><span class="token punctuation">(</span>context<span class="token punctuation">[</span>Job<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> scope <span class="token operator">=</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">.</span>immediate <span class="token operator">+</span> context <span class="token operator">+</span> supervisorJob<span class="token punctuation">)</span>
        blockRunner <span class="token operator">=</span> <span class="token function">BlockRunner</span><span class="token punctuation">(</span>
            liveData <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
            block <span class="token operator">=</span> block<span class="token punctuation">,</span>
            timeoutInMs <span class="token operator">=</span> timeoutInMs<span class="token punctuation">,</span>
            scope <span class="token operator">=</span> scope
        <span class="token punctuation">)</span> <span class="token punctuation">{</span>
            blockRunner <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onActive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        blockRunner<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">maybeRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">onInactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onInactive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        blockRunner<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">internal</span> <span class="token keyword">class</span> BlockRunner<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> liveData<span class="token operator">:</span> CoroutineLiveData<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> block<span class="token operator">:</span> Block<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> timeoutInMs<span class="token operator">:</span> Long<span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> scope<span class="token operator">:</span> CoroutineScope<span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> onDone<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit
<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// currently running block job.</span>
    <span class="token keyword">private</span> <span class="token keyword">var</span> runningJob<span class="token operator">:</span> Job<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>

    <span class="token comment">// cancelation job created in cancel.</span>
    <span class="token keyword">private</span> <span class="token keyword">var</span> cancellationJob<span class="token operator">:</span> Job<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>

    <span class="token annotation builtin">@MainThread</span>
    <span class="token keyword">fun</span> <span class="token function">maybeRun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        cancellationJob<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        cancellationJob <span class="token operator">=</span> <span class="token keyword">null</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>runningJob <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span>
        <span class="token punctuation">}</span>
        runningJob <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
            <span class="token keyword">val</span> liveDataScope <span class="token operator">=</span> <span class="token function">LiveDataScopeImpl</span><span class="token punctuation">(</span>liveData<span class="token punctuation">,</span> coroutineContext<span class="token punctuation">)</span>
            <span class="token function">block</span><span class="token punctuation">(</span>liveDataScope<span class="token punctuation">)</span>
            <span class="token function">onDone</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token annotation builtin">@MainThread</span>
    <span class="token keyword">fun</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>cancellationJob <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">error</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Cancel call cannot happen without a maybeRun&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        cancellationJob <span class="token operator">=</span> scope<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Main<span class="token punctuation">.</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span>timeoutInMs<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>liveData<span class="token punctuation">.</span><span class="token function">hasActiveObservers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                runningJob<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                runningJob <span class="token operator">=</span> <span class="token keyword">null</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="十一、参考资料" tabindex="-1"><a class="header-anchor" href="#十一、参考资料" aria-hidden="true">#</a> 十一、参考资料</h1><p>本文参考了以下文章中的很多资料，在此表示感谢</p><ul><li>https://github.com/Kotlin/Kotlinx.coroutines/blob/master/coroutines-guide.md</li><li>https://developer.android.google.cn/kotlin/coroutines</li><li>https://juejin.cn/post/6844904118180380680</li><li>https://juejin.cn/post/6888259219008126983</li></ul>`,144);function M(L,K){const a=o("ExternalLinkIcon");return c(),i("div",null,[n("blockquote",null,[n("p",null,[s("公众号："),n("a",u,[s("字节数组"),t(a)])]),r]),k,d,v,m,n("ul",null,[n("li",null,[n("a",b,[s("Kotlin 协程官方文档（1）-协程基础（Coroutine Basics）"),t(a)])]),n("li",null,[n("a",g,[s("Kotlin 协程官方文档（2）-取消和超时（Cancellation and Timeouts）"),t(a)])]),n("li",null,[n("a",f,[s("Kotlin 协程官方文档（3）-组合挂起函数（Coroutine Context and Dispatchers）"),t(a)])]),n("li",null,[n("a",h,[s("Kotlin 协程官方文档（4）-协程上下文和调度器（Coroutine Context and Dispatchers）"),t(a)])]),n("li",null,[n("a",y,[s("Kotlin 协程官方文档（5）-异步流（Asynchronous Flow）"),t(a)])]),n("li",null,[n("a",w,[s("Kotlin 协程官方文档（6）-通道（Channels）"),t(a)])]),n("li",null,[n("a",x,[s("Kotlin 协程官方文档（7）-异常处理（Exception Handling）"),t(a)])]),n("li",null,[n("a",C,[s("Kotlin 协程官方文档（8）-共享可变状态和并发性（Shared mutable state and concurrency）"),t(a)])]),n("li",null,[n("a",q,[s("Kotlin 协程官方文档（9）-选择表达式(实验阶段)（Select Expression (experimental)"),t(a)])])]),D,n("table",null,[n("thead",null,[n("tr",null,[S,n("th",_,[n("a",j,[s("isActive"),t(a)])]),n("th",A,[n("a",T,[s("isCompleted"),t(a)])]),n("th",B,[n("a",I,[s("isCancelled"),t(a)])])])]),J]),E])}const G=p(l,[["render",M],["__file","一文快速入门 Kotlin 协程.html.vue"]]);export{G as default};
