import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,d as s,e as t,f as i}from"./app-6847d3e4.js";const l={},u={href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adbc507fc3704fd8955aae739a433db2~tplv-k3u1fbpfcp-zoom-1.image",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,"希望对你有所帮助 🤣🤣",-1),k=n("p",null,[s("最近一直在了解关于 "),n("strong",null,"Kotlin协程"),s(" 的知识，那最好的学习资料自然是官方提供的学习文档了，看了看后我就萌生了翻译官方文档的想法。前后花了要接近一个月时间，一共九篇文章，在这里也分享出来，希望对读者有所帮助。个人知识所限，有些翻译得不是太顺畅，也希望读者能提出意见")],-1),d={href:"https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md",target:"_blank",rel:"noopener noreferrer"},v=i(`<p>可以使用多线程调度器（如 Dispatchers.Default）并发执行协程，它呈现了所有常见的并发问题。主要问题是对共享可变状态的同步访问。在协程作用域中解决这个问题的一些方法类似于多线程世界中的方法，但有一些其它方法是独有的</p><h1 id="一、一个问题" tabindex="-1"><a class="header-anchor" href="#一、一个问题" aria-hidden="true">#</a> 一、一个问题</h1><p>让我们启动一百个协程，都做同样的操作一千次。我们还将计算它们的完成时间，以便进一步比较：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">massiveRun</span><span class="token punctuation">(</span>action<span class="token operator">:</span> <span class="token keyword">suspend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> n <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment">// number of coroutines to launch</span>
    <span class="token keyword">val</span> k <span class="token operator">=</span> <span class="token number">1000</span> <span class="token comment">// times an action is repeated by each coroutine</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        coroutineScope <span class="token punctuation">{</span> <span class="token comment">// scope for coroutines </span>
            <span class="token function">repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                launch <span class="token punctuation">{</span>
                    <span class="token function">repeat</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">n <span class="token operator">*</span> k</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> actions in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们从一个非常简单的操作开始，该操作使用多线程调度器 Dispatchers.Default，并增加一个共享的可变变量</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token operator">*</span>    

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">massiveRun</span><span class="token punctuation">(</span>action<span class="token operator">:</span> <span class="token keyword">suspend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> n <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment">// number of coroutines to launch</span>
    <span class="token keyword">val</span> k <span class="token operator">=</span> <span class="token number">1000</span> <span class="token comment">// times an action is repeated by each coroutine</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        coroutineScope <span class="token punctuation">{</span> <span class="token comment">// scope for coroutines </span>
            <span class="token function">repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                launch <span class="token punctuation">{</span>
                    <span class="token function">repeat</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">n <span class="token operator">*</span> k</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> actions in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>    
<span class="token punctuation">}</span>

<span class="token comment">//sampleStart</span>
<span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        massiveRun <span class="token punctuation">{</span>
            counter<span class="token operator">++</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Counter = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//sampleEnd    </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后会打印出什么呢？不太可能打印出 “Counter=100000”，因为100个协程从多个线程并发地递增 counter 而不进行任何同步。</p><h1 id="二、volatiles-是没有作用的" tabindex="-1"><a class="header-anchor" href="#二、volatiles-是没有作用的" aria-hidden="true">#</a> 二、Volatiles 是没有作用的</h1><p>有一种常见的误解是：将变量标记为 volatile 可以解决并发问题。让我们试试：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">massiveRun</span><span class="token punctuation">(</span>action<span class="token operator">:</span> <span class="token keyword">suspend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> n <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment">// number of coroutines to launch</span>
    <span class="token keyword">val</span> k <span class="token operator">=</span> <span class="token number">1000</span> <span class="token comment">// times an action is repeated by each coroutine</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        coroutineScope <span class="token punctuation">{</span> <span class="token comment">// scope for coroutines </span>
            <span class="token function">repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                launch <span class="token punctuation">{</span>
                    <span class="token function">repeat</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">n <span class="token operator">*</span> k</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> actions in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>    
<span class="token punctuation">}</span>

<span class="token comment">//sampleStart</span>
<span class="token annotation builtin">@Volatile</span> <span class="token comment">// in Kotlin \`volatile\` is an annotation </span>
<span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        massiveRun <span class="token punctuation">{</span>
            counter<span class="token operator">++</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Counter = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//sampleEnd    </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码运行得比较慢，但是我们在最后仍然没有得到“Counter=100000”，因为 volatile 变量保证了可线性化（这是“atomic”的一个技术术语）对相应变量的读写，但不提供更大行为的原子性（在我们的例子中指递增操作）</p><h1 id="三、线程安全的数据结构" tabindex="-1"><a class="header-anchor" href="#三、线程安全的数据结构" aria-hidden="true">#</a> 三、线程安全的数据结构</h1><p>对线程和协程都有效的一个解决方案是使用线程安全的（也称为同步、可线性化或原子）数据结构，该结构为需要在共享状态上执行的相应操作提供所有必要的同步保障。对于一个简单的计数器，我们可以使用 AtomicInteger 类，该类具有保证原子性的 incrementAndGet 方法</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">massiveRun</span><span class="token punctuation">(</span>action<span class="token operator">:</span> <span class="token keyword">suspend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> n <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment">// number of coroutines to launch</span>
    <span class="token keyword">val</span> k <span class="token operator">=</span> <span class="token number">1000</span> <span class="token comment">// times an action is repeated by each coroutine</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        coroutineScope <span class="token punctuation">{</span> <span class="token comment">// scope for coroutines </span>
            <span class="token function">repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                launch <span class="token punctuation">{</span>
                    <span class="token function">repeat</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">n <span class="token operator">*</span> k</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> actions in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>    
<span class="token punctuation">}</span>

<span class="token comment">//sampleStart</span>
<span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token function">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        massiveRun <span class="token punctuation">{</span>
            counter<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Counter = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//sampleEnd    </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是解决这个特殊问题的最快方法。它适用于普通计数器、集合、队列和其他标准数据结构及其基本操作。但是，它不容易扩展到复杂的状态或没有实现好了的线程安全的复杂操作</p><h1 id="四、以细粒度限制线程" tabindex="-1"><a class="header-anchor" href="#四、以细粒度限制线程" aria-hidden="true">#</a> 四、以细粒度限制线程</h1><p>线程限制是解决共享可变状态问题的一种方法，其中对特定共享状态的所有访问都限制在一个线程内。它通常用于 UI 应用程序，其中所有的 UI 状态都限制在“单个事件分派”或“应用程序线程”中。通过使用单线程上下文，可以很容易地使用协程来实现上述的计数器</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">massiveRun</span><span class="token punctuation">(</span>action<span class="token operator">:</span> <span class="token keyword">suspend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> n <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment">// number of coroutines to launch</span>
    <span class="token keyword">val</span> k <span class="token operator">=</span> <span class="token number">1000</span> <span class="token comment">// times an action is repeated by each coroutine</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        coroutineScope <span class="token punctuation">{</span> <span class="token comment">// scope for coroutines </span>
            <span class="token function">repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                launch <span class="token punctuation">{</span>
                    <span class="token function">repeat</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">n <span class="token operator">*</span> k</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> actions in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>    
<span class="token punctuation">}</span>

<span class="token comment">//sampleStart</span>
<span class="token keyword">val</span> counterContext <span class="token operator">=</span> <span class="token function">newSingleThreadContext</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;CounterContext&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        massiveRun <span class="token punctuation">{</span>
            <span class="token comment">// confine each increment to a single-threaded context</span>
            <span class="token function">withContext</span><span class="token punctuation">(</span>counterContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                counter<span class="token operator">++</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Counter = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//sampleEnd      </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码运行得非常缓慢，因为它执行细粒度的线程限制。每个单独的增值操作都使用 withContext(counterContext) 从多线程 Dispatchers.Default 上下文切换到单线程上下文</p><h1 id="五、以粗粒度限制线程" tabindex="-1"><a class="header-anchor" href="#五、以粗粒度限制线程" aria-hidden="true">#</a> 五、以粗粒度限制线程</h1><p>在实践中，线程限制是在比较大的范围内执行的，例如，更新状态的逻辑的范围被限制在单个线程中。下面的示例就是这样做的，首先在单线程上下文中运行每个协程</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">massiveRun</span><span class="token punctuation">(</span>action<span class="token operator">:</span> <span class="token keyword">suspend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> n <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment">// number of coroutines to launch</span>
    <span class="token keyword">val</span> k <span class="token operator">=</span> <span class="token number">1000</span> <span class="token comment">// times an action is repeated by each coroutine</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        coroutineScope <span class="token punctuation">{</span> <span class="token comment">// scope for coroutines </span>
            <span class="token function">repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                launch <span class="token punctuation">{</span>
                    <span class="token function">repeat</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">n <span class="token operator">*</span> k</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> actions in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>    
<span class="token punctuation">}</span>

<span class="token comment">//sampleStart</span>
<span class="token keyword">val</span> counterContext <span class="token operator">=</span> <span class="token function">newSingleThreadContext</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;CounterContext&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token comment">// confine everything to a single-threaded context</span>
    <span class="token function">withContext</span><span class="token punctuation">(</span>counterContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        massiveRun <span class="token punctuation">{</span>
            counter<span class="token operator">++</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Counter = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//sampleEnd     </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在这段代码的运行速度会快得多，并产生了正确的结果</p><h1 id="六、互斥" tabindex="-1"><a class="header-anchor" href="#六、互斥" aria-hidden="true">#</a> 六、互斥</h1><p>互斥问题的解决方案是保护共享状态的所有修改操作，其中的关键代码永远不会同时执行。在一个阻塞的世界中，通常会使用 <code>synchronized</code> 或 <code>ReentrantLock</code>。协程的替换方案称为互斥(Mutex)。它具有 <code>lock</code> 和 <code>unlock</code> 函数以划定一个关键位置。关键的区别在于 <code>Mutex.lock()</code> 是一个挂起函数。它不会阻塞线程</p><p>还有一个扩展函数 withLock 可以方便地来实现 <code>mutex.lock(); try {...} finally { mutex.unlock() } </code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>sync<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">massiveRun</span><span class="token punctuation">(</span>action<span class="token operator">:</span> <span class="token keyword">suspend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> n <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment">// number of coroutines to launch</span>
    <span class="token keyword">val</span> k <span class="token operator">=</span> <span class="token number">1000</span> <span class="token comment">// times an action is repeated by each coroutine</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        coroutineScope <span class="token punctuation">{</span> <span class="token comment">// scope for coroutines </span>
            <span class="token function">repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                launch <span class="token punctuation">{</span>
                    <span class="token function">repeat</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">n <span class="token operator">*</span> k</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> actions in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>    
<span class="token punctuation">}</span>

<span class="token comment">//sampleStart</span>
<span class="token keyword">val</span> mutex <span class="token operator">=</span> <span class="token function">Mutex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        massiveRun <span class="token punctuation">{</span>
            <span class="token comment">// protect each increment with lock</span>
            mutex<span class="token punctuation">.</span><span class="token function">withLock</span> <span class="token punctuation">{</span>
                counter<span class="token operator">++</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Counter = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">counter</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//sampleEnd</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本例中的锁是细粒度的，因此它也付出了某些代价（消耗）。但是，在某些情况下这是一个很好的选择，比如你必须定期修改某些共享状态，但不具备修改共享状态所需的原生线程</p><h1 id="七、actors" tabindex="-1"><a class="header-anchor" href="#七、actors" aria-hidden="true">#</a> 七、Actors</h1><p>actor 是一个实体，由一个协程、被限制并封装到这个协程中的状态以及一个与其它协程通信的通道组成。简单的 actor 可以写成函数，但具有复杂状态的 actor 更适合类</p><p>有一个 actor 协程构造器，它可以方便地将 actor 的 mailbox channel 合并到其接收的消息的作用域中，并将 send channel 合并到生成的 job 对象中，以便可以将对 actor 的单个引用作为其句柄引有</p><p>使用 actor 的第一步是定义一类 actor 将要处理的消息。kotlin 的密封类非常适合这个目的。在 CounterMsg 密封类中，我们用 IncCounter 消息来定义递增计数器，用 GetCounter 消息来获取其值，后者需要返回值。为此，这里使用 CompletableDeferred communication primitive，它表示将来已知（通信）的单个值</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// Message types for counterActor</span>
<span class="token keyword">sealed</span> <span class="token keyword">class</span> CounterMsg
<span class="token keyword">object</span> IncCounter <span class="token operator">:</span> <span class="token function">CounterMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// one-way message to increment counter</span>
<span class="token keyword">class</span> <span class="token function">GetCounter</span><span class="token punctuation">(</span><span class="token keyword">val</span> response<span class="token operator">:</span> CompletableDeferred<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">CounterMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// a request with reply</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们定义一个函数，该函数使用 actor 协程构造器来启动 actor：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// This function launches a new counter actor</span>
<span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">counterActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> actor<span class="token operator">&lt;</span>CounterMsg<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// actor state</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>msg <span class="token keyword">in</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// iterate over incoming messages</span>
        <span class="token keyword">when</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">is</span> IncCounter <span class="token operator">-&gt;</span> counter<span class="token operator">++</span>
            <span class="token keyword">is</span> GetCounter <span class="token operator">-&gt;</span> msg<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码很简单：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>channels<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">massiveRun</span><span class="token punctuation">(</span>action<span class="token operator">:</span> <span class="token keyword">suspend</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> Unit<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> n <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment">// number of coroutines to launch</span>
    <span class="token keyword">val</span> k <span class="token operator">=</span> <span class="token number">1000</span> <span class="token comment">// times an action is repeated by each coroutine</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        coroutineScope <span class="token punctuation">{</span> <span class="token comment">// scope for coroutines </span>
            <span class="token function">repeat</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                launch <span class="token punctuation">{</span>
                    <span class="token function">repeat</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">n <span class="token operator">*</span> k</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> actions in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>    
<span class="token punctuation">}</span>

<span class="token comment">// Message types for counterActor</span>
<span class="token keyword">sealed</span> <span class="token keyword">class</span> CounterMsg
<span class="token keyword">object</span> IncCounter <span class="token operator">:</span> <span class="token function">CounterMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// one-way message to increment counter</span>
<span class="token keyword">class</span> <span class="token function">GetCounter</span><span class="token punctuation">(</span><span class="token keyword">val</span> response<span class="token operator">:</span> CompletableDeferred<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">CounterMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// a request with reply</span>

<span class="token comment">// This function launches a new counter actor</span>
<span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">counterActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> actor<span class="token operator">&lt;</span>CounterMsg<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> counter <span class="token operator">=</span> <span class="token number">0</span> <span class="token comment">// actor state</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>msg <span class="token keyword">in</span> channel<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// iterate over incoming messages</span>
        <span class="token keyword">when</span> <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">is</span> IncCounter <span class="token operator">-&gt;</span> counter<span class="token operator">++</span>
            <span class="token keyword">is</span> GetCounter <span class="token operator">-&gt;</span> msg<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">complete</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">//sampleStart</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> counter <span class="token operator">=</span> <span class="token function">counterActor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// create the actor</span>
    <span class="token function">withContext</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        massiveRun <span class="token punctuation">{</span>
            counter<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>IncCounter<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// send a message to get a counter value from an actor</span>
    <span class="token keyword">val</span> response <span class="token operator">=</span> CompletableDeferred<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    counter<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">GetCounter</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Counter = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">response<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    counter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// shutdown the actor</span>
<span class="token punctuation">}</span>
<span class="token comment">//sampleEnd    </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在什么上下文中执行 actor 本身并不重要（为了正确）。actor 是一个协程，并且协程是按顺序执行的，因此将状态限制到特定的协程可以解决共享可变状态的问题。实际上，actors 可以修改自己的私有状态，但只能通过消息相互影响（避免需要任何锁）</p><p>actor 比使用锁更为有效，因为在这种情况下，它总是有工作要做，根本不需要切换到不同的上下文</p><blockquote><p>注意，actor 协程构造器是一个双重的 product 协程构造器 。actor 与它接收消息的通道相关联，而 producer 与向其发送元素的通道相关联</p></blockquote>`,40);function m(b,g){const a=e("ExternalLinkIcon");return o(),c("div",null,[n("blockquote",null,[n("p",null,[s("公众号："),n("a",u,[s("字节数组"),t(a)])]),r]),n("blockquote",null,[k,n("p",null,[s("协程官方文档："),n("a",d,[s("coroutines-guide"),t(a)])])]),v])}const y=p(l,[["render",m],["__file","Kotlin 协程官方文档（8）共享可变状态和并发性.html.vue"]]);export{y as default};
