import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,d as s,e as t,f as p}from"./app-6847d3e4.js";const i={},u={href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adbc507fc3704fd8955aae739a433db2~tplv-k3u1fbpfcp-zoom-1.image",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"希望对你有所帮助 🤣🤣",-1),r=p(`<p>Java 和 Kotlin 的泛型算作是一块挺大的知识难点了，涉及到很多很难理解的概念：<strong>泛型型参、泛型实参、类型参数、不变、型变、协变、逆变、内联</strong>等等。本篇文章就将 Java 和 Kotlin 结合着一起讲，按照我的个人理解来阐述泛型的各个知识难点，希望对你有所帮助 🤣🤣</p><h1 id="一、泛型类型" tabindex="-1"><a class="header-anchor" href="#一、泛型类型" aria-hidden="true">#</a> 一、泛型类型</h1><p>泛型允许你定义带<strong>类型形参</strong>的数据类型，当这种类型的实例被创建出来后，<strong>类型形参</strong>便被替换为称为<strong>类型实参</strong>的具体类型。例如，对于 <code>List&lt;T&gt;</code>，List 称为<strong>基础类型</strong>，T 便是<strong>类型型参</strong>，T 可以是任意类型，当没有指定 T 的具体类型时，我们只能知道<code>List&lt;T&gt;</code>是一个集合列表，但不知道承载的具体数据类型。而对于 <code>List&lt;String&gt;</code>，当中的 String 便是<strong>类型实参</strong>，我们可以明白地知道该列表承载的都是字符串，在这里 String 就相当于一个参数传递给了 List，在这语义下 String 也称为<strong>类型参数</strong></p><p>此外，在 Kotlin 中我们可以实现<strong>实化类型参数</strong>，在运行时的<strong>内联函数</strong>中拿到作为<strong>类型实参</strong>的具体类型，即可以实现 <code>T::class.java</code>，但在 Java 中却无法实现，因为<strong>内联函数</strong>是 Kotlin 中的概念，Java 中并不存在</p><h1 id="二、为什么需要泛型" tabindex="-1"><a class="header-anchor" href="#二、为什么需要泛型" aria-hidden="true">#</a> 二、为什么需要泛型</h1><p>泛型是在 Java 5 版本开始引入的，先通过几个小例子来明白泛型的重要性</p><p>以下代码可以成功编译，但是在运行时却抛出了 ClassCastException。了解 ArrayList 源码的同学就知道其内部是用一个<code>Object[]</code>数组来存储数据的，这使得 ArrayList 能够存储任何类型的对象，所以在没有泛型的年代开发者一不小心就有可能向 ArrayList 存入了非期望值，编译期完全正常，等到在运行时就会抛出类型转换异常了</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addData</span><span class="token punctuation">(</span>stringList<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> stringList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addData</span><span class="token punctuation">(</span><span class="token class-name">List</span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        dataList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Exception</span> in thread <span class="token string">&quot;main&quot;</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ClassCastException</span><span class="token operator">:</span> 
<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Integer</span> cannot be cast <span class="token keyword">to</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">String</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>而有了泛型后，我们就可以写出更加健壮安全的代码，以下错误就完全可以在编译阶段被发现，且取值的时候也不需要进行类型强转</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">addData</span><span class="token punctuation">(</span>stringList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//报错</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> stringList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addData</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> dataList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    dataList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，利用泛型我们可以写出更加具备通用性的代码。例如，假设我们需要从一个 List 中筛选出大于 0 的全部数字，那我们自然不想为 Integer、Float、Double 等多种类型各写一个筛选方法，此时就可以利用泛型来抽象筛选逻辑</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> result1 <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>integerList<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> floatList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    floatList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    floatList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    floatList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Float</span><span class="token punctuation">&gt;</span></span> result2 <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>floatList<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> filterList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">T</span> datum <span class="token operator">:</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>datum<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            filterList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>datum<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> filterList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总的来说，泛型有以下几点优势：</p><ul><li>类型检查，在编译阶段就能发现错误</li><li>更加语义化，看到 <code>List&lt;String&gt;</code>我们就知道存储的数据类型是 String</li><li>自动类型转换，在取值时无需进行手动类型转换</li><li>能够将逻辑抽象出来，使得代码更加具有通用性</li></ul><h1 id="三、类型擦除" tabindex="-1"><a class="header-anchor" href="#三、类型擦除" aria-hidden="true">#</a> 三、类型擦除</h1><p>泛型是在 Java 5 版本开始引入的，所以在 Java 4 中 ArrayList 还不属于泛型类，其内部通过 <strong>Object 向上转型</strong>和<strong>外部强制类型转换</strong>来实现数据存储和逻辑复用，此时开发者的项目中已经充斥了大量以下类型的代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;业志陈&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stringList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;https://juejin.cn/user/923245496518439&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> stringList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在推出泛型的同时，Java 官方也必须保证二进制的向后兼容性，用 Java 4 编译出的 Class 文件也必须能够在 Java 5 上正常运行，即 Java 5 必须保证以下两种类型的代码能够在 Java 5 上共存且正常运行</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>为了实现这一目的，Java 就通过<strong>类型擦除</strong>这种比较别扭的方式来实现泛型。编译器在编译时会擦除类型实参，在运行时不存在任何类型相关的信息，泛型对于 JVM 来说是透明的，有泛型和没有泛型的代码通过编译器编译后所生成的二进制代码是完全相同的</p><p>例如，分别声明两个泛型类和非泛型类，拿到其 class 文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NodeA</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token class-name">Object</span> obj<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">NodeA</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NodeB</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token class-name">T</span> obj<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">NodeB</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">NodeA</span> nodeA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeA</span><span class="token punctuation">(</span><span class="token string">&quot;业志陈&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">NodeB</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nodeB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeB</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;业志陈&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nodeB<span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 NodeA 和 NodeB 两个对象对应的字节码其实是完全一样的，最终都是使用 Object 来承载数据，就好像传递给 NodeB 的类型参数 String 不见了一样，这便是类型擦除</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">generic<span class="token punctuation">.</span></span>GenericTest</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">generic<span class="token punctuation">.</span></span>GenericTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> aload_0
       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">2</span>                  <span class="token comment">// class generic/GenericTest$NodeA</span>
       <span class="token number">3</span><span class="token operator">:</span> dup
       <span class="token number">4</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String 业志陈</span>
       <span class="token number">6</span><span class="token operator">:</span> invokespecial #<span class="token number">4</span>                  <span class="token comment">// Method generic/GenericTest$NodeA.&quot;&lt;init&gt;&quot;:(Ljava/lang/Object;)V</span>
       <span class="token number">9</span><span class="token operator">:</span> astore_1
      <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">5</span>                  <span class="token comment">// class generic/GenericTest$NodeB</span>
      <span class="token number">13</span><span class="token operator">:</span> dup
      <span class="token number">14</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String 业志陈</span>
      <span class="token number">16</span><span class="token operator">:</span> invokespecial #<span class="token number">6</span>                  <span class="token comment">// Method generic/GenericTest$NodeB.&quot;&lt;init&gt;&quot;:(Ljava/lang/Object;)V</span>
      <span class="token number">19</span><span class="token operator">:</span> astore_2
      <span class="token number">20</span><span class="token operator">:</span> getstatic     #<span class="token number">7</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">23</span><span class="token operator">:</span> aload_2
      <span class="token number">24</span><span class="token operator">:</span> invokestatic  #<span class="token number">8</span>                  <span class="token comment">// Method generic/GenericTest$NodeB.access$000:(Lgeneric/GenericTest$NodeB;)Ljava/lang/Object;</span>
      <span class="token number">27</span><span class="token operator">:</span> checkcast     #<span class="token number">9</span>                  <span class="token comment">// class java/lang/String</span>
      <span class="token number">30</span><span class="token operator">:</span> invokevirtual #<span class="token number">10</span>                 <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
      <span class="token number">33</span><span class="token operator">:</span> <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而如果让 NodeA 直接使用 String 类型，并且为泛型类 NodeB 设定上界约束 String，两者的字节码也会完全一样</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NodeA</span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token class-name">String</span> obj<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">NodeA</span><span class="token punctuation">(</span><span class="token class-name">String</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NodeB</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token class-name">T</span> obj<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">NodeB</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">NodeA</span> nodeA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeA</span><span class="token punctuation">(</span><span class="token string">&quot;业志陈&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">NodeB</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nodeB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeB</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;业志陈&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nodeB<span class="token punctuation">.</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到 NodeA 和 NodeB 的字节码是完全相同的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">generic<span class="token punctuation">.</span></span>GenericTest</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">generic<span class="token punctuation">.</span></span>GenericTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> aload_0
       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span>
       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>

  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Code</span><span class="token operator">:</span>
       <span class="token number">0</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">2</span>                  <span class="token comment">// class generic/GenericTest$NodeA</span>
       <span class="token number">3</span><span class="token operator">:</span> dup
       <span class="token number">4</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String 业志陈</span>
       <span class="token number">6</span><span class="token operator">:</span> invokespecial #<span class="token number">4</span>                  <span class="token comment">// Method generic/GenericTest$NodeA.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span>
       <span class="token number">9</span><span class="token operator">:</span> astore_1
      <span class="token number">10</span><span class="token operator">:</span> <span class="token keyword">new</span>           #<span class="token number">5</span>                  <span class="token comment">// class generic/GenericTest$NodeB</span>
      <span class="token number">13</span><span class="token operator">:</span> dup
      <span class="token number">14</span><span class="token operator">:</span> ldc           #<span class="token number">3</span>                  <span class="token comment">// String 业志陈</span>
      <span class="token number">16</span><span class="token operator">:</span> invokespecial #<span class="token number">6</span>                  <span class="token comment">// Method generic/GenericTest$NodeB.&quot;&lt;init&gt;&quot;:(Ljava/lang/String;)V</span>
      <span class="token number">19</span><span class="token operator">:</span> astore_2
      <span class="token number">20</span><span class="token operator">:</span> getstatic     #<span class="token number">7</span>                  <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>
      <span class="token number">23</span><span class="token operator">:</span> aload_2
      <span class="token number">24</span><span class="token operator">:</span> invokestatic  #<span class="token number">8</span>                  <span class="token comment">// Method generic/GenericTest$NodeB.access$000:(Lgeneric/GenericTest$NodeB;)Ljava/lang/String;</span>
      <span class="token number">27</span><span class="token operator">:</span> invokevirtual #<span class="token number">9</span>                  <span class="token comment">// Method java/io/PrintStream.println:(Ljava/lang/String;)V</span>
      <span class="token number">30</span><span class="token operator">:</span> <span class="token keyword">return</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以说，当泛型类型被擦除后有两种转换方式</p><ul><li>如果泛型没有设置上界约束，那么将泛型转化成 Object 类型</li><li>如果泛型设置了上界约束，那么将泛型转化成该上界约束</li></ul><p>该结论也可以通过反射泛型类的 Class 对象来验证</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NodeA</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token class-name">T</span> obj<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">NodeA</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">NodeB</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

        <span class="token keyword">private</span> <span class="token class-name">T</span> obj<span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token class-name">NodeB</span><span class="token punctuation">(</span><span class="token class-name">T</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>obj <span class="token operator">=</span> obj<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">NodeA</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nodeA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeA</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;业志陈&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getField</span><span class="token punctuation">(</span>nodeA<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">NodeB</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> nodeB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NodeB</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;https://juejin.cn/user/923245496518439&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">getField</span><span class="token punctuation">(</span>nodeB<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">getField</span><span class="token punctuation">(</span><span class="token class-name">Class</span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> field <span class="token operator">:</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;fieldName: &quot;</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;fieldTypeName: &quot;</span> <span class="token operator">+</span> field<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NodeA 对应的是 Object，NodeB 对应的是 String</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>fieldName<span class="token operator">:</span> obj
fieldTypeName<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>Object</span>
fieldName<span class="token operator">:</span> obj
fieldTypeName<span class="token operator">:</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那既然在运行时不存在任何类型相关的信息，泛型又为什么能够实现<strong>类型检查</strong>和<strong>类型自动转换</strong>等功能呢？</p><p>其实，类型检查是编译器在<strong>编译前</strong>帮我们完成的，编译器知道我们声明的具体的类型实参，所以类型擦除并不影响类型检查功能。而类型自动转换其实是通过内部强制类型转换来实现的，上面给出的字节码中也可以看到有一条类型强转 checkcast 的语句</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token number">27</span><span class="token operator">:</span> checkcast     #<span class="token number">9</span>                  <span class="token comment">// class java/lang/String</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如，ArrayList 内部虽然用于存储数据的是 Object 数组，但 get 方法内部会自动完成类型强转</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">transient</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> elementData<span class="token punctuation">;</span>
    
<span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">rangeCheck</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token function">elementData</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">E</span> <span class="token function">elementData</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//强制类型转换</span>
	<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span> elementData<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以 Java 的泛型可以看做是一种特殊的语法糖，因此也被人称为<strong>伪泛型</strong></p><h1 id="四、类型擦除的后遗症" tabindex="-1"><a class="header-anchor" href="#四、类型擦除的后遗症" aria-hidden="true">#</a> 四、类型擦除的后遗症</h1><p>Java 泛型对于类型的约束只在编译期存在，运行时仍然会按照 Java 5 之前的机制来运行，泛型的具体类型在运行时已经被删除了，所以 JVM 是识别不到我们在代码中指定的具体的泛型类型的</p><p>例如，虽然<code>List&lt;String&gt;</code>只能用于添加字符串，但我们只能<strong>泛化地</strong>识别到它属于<code>List&lt;?&gt;</code>类型，而无法具体判断出该 List 内部包含的具体类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//正常</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>stringList <span class="token keyword">instanceof</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
<span class="token comment">//报错</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>stringList <span class="token keyword">instanceof</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只能对具体的对象实例进行类型校验，但无法判断出泛型形参的具体类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">T</span> data<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">//正常</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>data <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token punctuation">}</span>
	<span class="token comment">//报错</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">T</span> <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

	<span class="token punctuation">}</span>
	<span class="token comment">//报错</span>
	<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> tClass <span class="token operator">=</span> <span class="token class-name">T</span><span class="token operator">::</span><span class="token function">getClass</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，类型擦除也会导致 Java 中出现多态问题。例如，以下两个方法的方法签名并不完全相同，但由于类型擦除的原因，入参参数的数据类型都会被看成 <code>List&lt;Object&gt;</code>，从而导致两者无法共存在同一个区域内</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringList<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> stringList<span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="五、kotlin-泛型" tabindex="-1"><a class="header-anchor" href="#五、kotlin-泛型" aria-hidden="true">#</a> 五、Kotlin 泛型</h1><p>Kotlin 泛型在大体上和 Java 一致，毕竟两者需要保证兼容性</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Plate<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">val</span> t<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">fun</span> <span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> Apple

<span class="token keyword">class</span> Banana

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> plateApple <span class="token operator">=</span> Plate<span class="token operator">&lt;</span>Apple<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token function">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">//泛型类型自动推导</span>
    <span class="token keyword">val</span> plateBanana <span class="token operator">=</span> <span class="token function">Plate</span><span class="token punctuation">(</span><span class="token function">Banana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    plateApple<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    plateBanana<span class="token punctuation">.</span><span class="token function">cut</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kotlin 也支持在扩展函数中使用泛型</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> List<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>t<span class="token operator">:</span> T<span class="token punctuation">)</span><span class="token operator">:</span> T<span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> index <span class="token operator">=</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，为了实现向后兼容，目前高版本 Java 依然允许实例化没有具体类型参数的泛型类，这可以说是一个对新版本 JDK 危险但对旧版本友好的兼容措施。但 Kotlin 要求在使用泛型时需要<strong>显式声明泛型类型</strong>或者是<strong>编译器能够类型推导出具体类型</strong>，任何不具备具体泛型类型的泛型类都无法被实例化。因为 Kotlin 一开始就是基于 Java 6 版本的，一开始就存在了泛型，自然就不存在需要兼容老代码的问题，因此以下例子和 Java 会有不同的表现</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> arrayList1 <span class="token operator">=</span> <span class="token function">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//错误，编译器报错</span>

<span class="token keyword">val</span> arrayList2 <span class="token operator">=</span> arrayListOf<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//正常</span>

<span class="token keyword">val</span> arrayList3 <span class="token operator">=</span> <span class="token function">arrayListOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">//正常</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一个比较容易让人误解的点。我们经常会使用 <code>as</code> 和 <code>as?</code> 来进行类型转换，但如果转换对象是泛型类型的话，那就会由于类型擦除而出现误判。如果转换对象有正确的<strong>基础类型</strong>，那么转换就会成功，而不管类型实参是否相符。因为在运行时转换发生的时候类型实参是未知的，此时编译器只会发出 “unchecked cast” 警告，代码还是可以正常编译的</p><p>例如，在以下例子中代码的运行结果还符合我们的预知。第一个转换操作由于类型相符，所以打印出了相加值。第二个转换操作由于基础类型是 Set 而非 List，所以抛出了 IllegalAccessException</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">printSum</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//6</span>
    <span class="token function">printSum</span><span class="token punctuation">(</span><span class="token function">setOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//IllegalAccessException</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">printSum</span><span class="token punctuation">(</span>c<span class="token operator">:</span> Collection<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> intList <span class="token operator">=</span> c <span class="token keyword">as</span><span class="token operator">?</span> List<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">IllegalAccessException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;List is expected&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>intList<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而在以下例子中抛出的却是 ClassCastException，这是因为在运行时不会判断且无法判断出类型实参到底是否是 Int，而只会判断基础类型 List 是否相符，所以 <code>as?</code> 操作会成功，等到要执行相加操作时才会发现拿到的是 String 而非 Number</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token function">printSum</span><span class="token punctuation">(</span><span class="token function">listOf</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;1&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;2&quot;</span></span><span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;3&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>

Exception <span class="token keyword">in</span> thread <span class="token string-literal singleline"><span class="token string">&quot;main&quot;</span></span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ClassCastException<span class="token operator">:</span> 
java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String cannot be cast <span class="token keyword">to</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Number
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="六、上界约束" tabindex="-1"><a class="header-anchor" href="#六、上界约束" aria-hidden="true">#</a> 六、上界约束</h1><p>泛型本身已经带有类型约束的作用，我们也可以进一步细化其支持的具体类型</p><p>例如，假设存在一个盘子 Plate，我们要求该 Plate 只能用于装水果 Fruit，那么就可以对其泛型声明做进一步约束，Java 中使用 extend 关键字来声明约束规则，而 Kotlin 使用的是 <strong>:</strong> 。这样 Plate 就只能用于 Fruit 和其子类，而无法用于 Noodles 等不相关的类型，这种类型约束就被称为<strong>上界约束</strong></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">open</span> <span class="token keyword">class</span> Fruit

<span class="token keyword">class</span> Apple <span class="token operator">:</span> <span class="token function">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> Noodles

<span class="token keyword">class</span> Plate<span class="token operator">&lt;</span>T <span class="token operator">:</span> Fruit<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">val</span> t<span class="token operator">:</span> T<span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> applePlate <span class="token operator">=</span> <span class="token function">Plate</span><span class="token punctuation">(</span><span class="token function">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//正常</span>
    <span class="token keyword">val</span> noodlesPlate <span class="token operator">=</span> <span class="token function">Plate</span><span class="token punctuation">(</span><span class="token function">Noodles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//报错</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果上界约束拥有多层类型元素，Java 是使用 &amp; 符号进行链式声明，Kotlin 则是用 where 关键字来依次进行声明</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Soft

<span class="token keyword">class</span> Plate<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token keyword">val</span> t<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token keyword">where</span> T <span class="token operator">:</span> Fruit<span class="token punctuation">,</span> T <span class="token operator">:</span> Soft

<span class="token keyword">open</span> <span class="token keyword">class</span> Fruit

<span class="token keyword">class</span> Apple <span class="token operator">:</span> <span class="token function">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> Banana <span class="token operator">:</span> <span class="token function">Fruit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Soft

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> applePlate <span class="token operator">=</span> <span class="token function">Plate</span><span class="token punctuation">(</span><span class="token function">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//报错</span>
    <span class="token keyword">val</span> bananaPlate <span class="token operator">=</span> <span class="token function">Plate</span><span class="token punctuation">(</span><span class="token function">Banana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//正常</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，没有指定上界约束的类型形参会默认使用 Any? 作为上界，即我们可以使用 String 或 String? 作为具体的类型实参。如果想确保最终的类型实参一定是非空类型，那么就需要主动声明上界约束为 Any</p><h1 id="七、类型通配符-星号投影" tabindex="-1"><a class="header-anchor" href="#七、类型通配符-星号投影" aria-hidden="true">#</a> 七、类型通配符 &amp; 星号投影</h1><p>假设现在有个需求，需要我们提供一个方法用于遍历所有类型的 List 集合并打印元素</p><p>第一种做法就是直接将方法参数类型声明为 List，不包含任何泛型类型声明。这种做法可行，但编译器会警告无法确定 <code>list</code>元素的具体类型，所以这不是最优解法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printList1</span><span class="token punctuation">(</span><span class="token class-name">List</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可能会想到的第二种做法是：将泛型类型直接声明为 Object，希望让其适用于任何类型的 List。这种做法完全不可行，因为即使 <code>String</code> 是 <code>Object</code> 的子类，但 <code>List&lt;String&gt;</code> 和 <code>List&lt;Object&gt;</code>并不具备从属关系，这导致 <code>printList2</code> 方法实际上只能用于<code>List&lt;Object&gt;</code>这一种具体类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printList2</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最优解法就是要用到 Java 的类型通配符 <strong>?</strong> 了，<code>printList3</code>方法完全可行且编译器也不会警告报错</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printList3</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> o <span class="token operator">:</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>？ 表示我们并不关心具体的泛型类型，而只是想配合其它类型进行一些条件限制。例如，<code>printList3</code>方法希望传入的是一个 List，但不限制泛型的具体类型，此时<code>List&lt;?&gt;</code>就达到了这一层限制条件</p><p>类型通配符也存在着一些限制。因为 <code>printList3</code> 方法并不包含具体的泛型类型，所以我们从中取出的值只能是 Object 类型，且无法向其插入值，这都是为了避免发生 ClassCastException</p><p>Java 的<strong>类型通配符</strong>对应 Kotlin 中的概念就是**星号投影 * **，Java 存在的限制在 Kotlin 中一样有</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">printList</span><span class="token punctuation">(</span>list<span class="token operator">:</span> List<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>any <span class="token keyword">in</span> list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>any<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，星号投影只能出现在<strong>类型形参</strong>的位置，不能作为<strong>类型实参</strong></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> list<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span>Number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//正常</span>

<span class="token keyword">val</span> list2<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span> <span class="token operator">=</span> ArrayList<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="八、协变-不变" tabindex="-1"><a class="header-anchor" href="#八、协变-不变" aria-hidden="true">#</a> 八、协变 &amp; 不变</h1><p>看以下例子。Apple 和 Banana 都是 Fruit 的子类，可以发现 Apple[] 类型的对象是可以赋值给 Fruit[] 的，且 Fruit[] 可以容纳 Apple 对象和 Banana 对象，这种设计就被称为<strong>协变</strong>，即如果 A 是 B 的子类，那么 A[] 就是 B[] 的子类型。相对的，Object[] 就是所有数组对象的父类型</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Apple</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Banana</span> <span class="token keyword">extends</span> <span class="token class-name">Fruit</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Fruit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fruitArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//正常</span>
    fruitArray<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//编译时正常，运行时抛出 ArrayStoreException</span>
    fruitArray<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Banana</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>而 Java 中的泛型是<strong>不变</strong>的，这意味着 String 虽然是 Object 的子类，但<code>List&lt;String&gt;</code>并不是<code>List&lt;Object&gt;</code>的子类型，两者并不具备继承关系</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> stringList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> objectList <span class="token operator">=</span> stringList<span class="token punctuation">;</span> <span class="token comment">//报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>那为什么 Java 中的泛型是<strong>不变</strong>的呢？</p><p>这可以通过看一个例子来解释。假设 Java 中的泛型是<strong>协变</strong>的，那么以下代码就可以成功通过编译阶段的检查，在运行时就不可避免地将抛出 ClassCastException，而引入泛型的初衷就是为了实现类型安全，支持协变的话那泛型也就没有比数组安全多少了，因此就将泛型被设计为<strong>不变</strong>的</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> strList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> objs <span class="token operator">=</span> strList<span class="token punctuation">;</span> <span class="token comment">//假设可以运行，实际上编译器会报错</span>
objs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> strList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将抛出 ClassCastException，无法将整数转换为字符串</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>再来想个问题，既然<strong>协变</strong>本身并不安全，那么数组为何又要被设计为协变呢？</p><p>Arrays 类包含一个 <code>equals</code>方法用于比较两个数组对象是否相等。如果数组是协变的，那么就需要为每一种数组对象都定义一个 <code>equals</code>方法，包括开发者自定义的数据类型。想要避免这种情况，就需要让 Object[] 可以接收任意数组类型，即<strong>让 Object[] 成为所有数组对象的父类型</strong>，这就使得数组必须支持协变，这样多态才能生效</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Arrays</span> <span class="token punctuation">{</span>
    
     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">==</span>a2<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">||</span> a2<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> length <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>a2<span class="token punctuation">.</span>length <span class="token operator">!=</span> length<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Object</span> o1 <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token class-name">Object</span> o2 <span class="token operator">=</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o1<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">?</span> o2<span class="token operator">==</span><span class="token keyword">null</span> <span class="token operator">:</span> o1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，Kotlin 中的数组和 Java 中的数组并不一样，Kotlin 数组并不支持协变，Kotlin 数组类似于集合框架，具有对应的实现类 Array，Array 属于泛型类，支持了泛型因此也不再协变</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> stringArray <span class="token operator">=</span> arrayOfNulls<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token keyword">val</span> anyArray<span class="token operator">:</span> Array<span class="token operator">&lt;</span>Any<span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token operator">=</span> stringArray <span class="token comment">//报错</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>Java 的泛型也并非完全<strong>不变</strong>的，只是实现<strong>协变</strong>需要满足一些条件，甚至也可以实现<strong>逆变</strong>，下面就来介绍下泛型如何实现<strong>协变</strong>和<strong>逆变</strong></p></blockquote><h1 id="九、泛型协变" tabindex="-1"><a class="header-anchor" href="#九、泛型协变" aria-hidden="true">#</a> 九、泛型协变</h1><p>假设我们定义了一个<code>copyAll</code>希望用于 List 数据迁移。那以下操作在我们看来就是完全安全的，因为 Integer 是 Number 的子类，按道理来说是能够将 Integer 保存为 Number 的，但由于泛型不变性，<code>List&lt;Integer&gt;</code>并不是<code>List&lt;Number&gt;</code>的子类型，所以实际上该操作将报错</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">&gt;</span></span> numberList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> integerList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    integerList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">copyAll</span><span class="token punctuation">(</span>numberList<span class="token punctuation">,</span> integerList<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//报错</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">copyAll</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">to</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思考下该操作为什么会报错？</p><p>编译器的作用之一就是<strong>进行安全检查并阻止可能发生不安全行为的操作</strong>，<code>copyAll</code> 方法会报错，那么肯定就是编译器觉得该方法有可能会触发不安全的操作。开发者的本意是希望将 Integer 类型的数据转移到 NumberList 中，只有这种操作且这种操作在我们看来肯定是安全的，但是编译器不知道开发者最终所要做的具体操作啊</p><p>假设 <code>copyAll</code>方法可以正常调用，那么<code>copyAll</code>方法自然只会把 <code>from</code> 当做 <code>List&lt;Number&gt;</code>来看待。因为 Integer 是 Number 的子类，从 <code>integerList</code> 获取到的数据对于 <code>numberList</code> 来说自然是安全的。而如果我们在<code>copyAll</code>方法中偷偷向 <code>integerList</code> 传入了一个 Number 类型的值的话，那么自然就将抛出异常，因为 from 实际上是 <code>List&lt;Integer&gt;</code>类型</p><p>为了阻止这种不安全的行为，编译器选择通过直接报错来进行提示。为了解决报错，我们就需要向编译器做出安全保证：<strong>从 from 取出来的值只会当做 Number 类型，且不会向 from 传入任何值</strong></p><p>为了达成以上保证，需要修改下 <code>copyAll</code> 方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">copyAll</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">to</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>? extends T</code> 表示 <code>from</code> 接受 T 或者 T 的子类型，而不单单是 T 自身，这意味着我们可以安全地从 <code>from</code> 中取值并声明为 T 类型，但由于我们并不知道 T 代表的具体类型，写入操作并不安全，因此编译器会阻止我们向 <code>from</code> 执行传值操作。有了该限制后，从<code>integerList</code>中取出来的值只能是当做 Number 类型，且避免了向<code>integerList</code>插入非法值的可能，此时<code>List&lt;Integer&gt;</code>就相当于<code>List&lt;? extends Number&gt;</code>的子类型了，从而使得 <code>copyAll</code> 方法可以正常使用</p><p>简而言之，带 <strong>extends</strong> 限定了上界的通配符类型使得<strong>泛型参数类型是协变的</strong>，即如果 A 是 B 的子类，那么 <code>Generic&lt;A&gt;</code> 就是<code>Generic&lt;? extends B&gt;</code>的子类型</p><h1 id="十、泛型逆变" tabindex="-1"><a class="header-anchor" href="#十、泛型逆变" aria-hidden="true">#</a> 十、泛型逆变</h1><p><strong>协变</strong>所能做到的是：如果 A 是 B 的子类，那么 <code>Generic&lt;A&gt;</code> 就是<code>Generic&lt;? extends B&gt;</code>的子类型。<strong>逆变</strong>相反，其代表的是：如果 A 是 B 的子类，那么 <code>Generic&lt;B&gt;</code> 就是 <code>Generic&lt;? super A&gt;</code> 的子类型</p><p>协变还比较好理解，毕竟其继承关系是相同的，但逆变就比较反直觉了，整个继承关系都倒过来了</p><p>逆变的作用可以通过相同的例子来理解，<code>copyAll</code> 方法如下修改也可以正常使用，此时就是向编译器做出了另一种安全保证：<strong>向 numberList 传递的值只会是 Integer 类型，且从 numberList 取出的值也只会当做 Object 类型</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">void</span> <span class="token function">copyAll</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> from<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">to</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>? super T</code>表示 <code>to</code> 接收 T 或者 T 的父类型，而不单单是 T 自身，这意味着我们可以安全地向 <code>to</code> 传类型为 T 的值，但由于我们并不知道 T 代表的具体类型，所以从 <code>to</code> 取出来的值只能是 Object 类型。有了该限制后，<code>integerList</code>只能向 <code>numberList</code>传递类型为 Integer 的值，且避免了从 <code>numberList</code> 中获取到非法类型值的可能，此时<code>List&lt;Number&gt;</code>就相当于<code>List&lt;? super Integer&gt;</code>的子类型了，从而使得 <code>copyAll</code> 方法可以正常使用</p><p>简而言之，带 <strong>super</strong> 限定了下界的通配符类型使得<strong>泛型参数类型是逆变的</strong>，即如果 A 是 B 的子类，那么 <code>Generic&lt;B&gt;</code> 就是 <code>Generic&lt;? super A&gt;</code> 的子类型</p><h1 id="十一、out-in" tabindex="-1"><a class="header-anchor" href="#十一、out-in" aria-hidden="true">#</a> 十一、out &amp; in</h1><p>Java 中关于泛型的困境在 Kotlin 中一样存在，out 和 in 都是 Kotlin 的关键字，其作用都是为了来应对泛型问题。<code>in</code> 和 <code>out</code> 是一个对立面，同时它们又与泛型<strong>不变</strong>相对立，统称为<strong>型变</strong></p><ul><li>out 本身带有<strong>出去</strong>的意思，本身带有倾向于<strong>取值操作</strong>的意思，用于<strong>泛型协变</strong></li><li>in 本身带有<strong>进来</strong>的意思，本身带有倾向于<strong>传值操作</strong>的意思，用于<strong>泛型逆变</strong></li></ul><p>再来看下相同例子，该例子在 Java 中存在的问题在 Kotlin 中一样有</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> numberList <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Number<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">val</span> intList <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>

    <span class="token function">copyAll</span><span class="token punctuation">(</span>numberList<span class="token punctuation">,</span> intList<span class="token punctuation">)</span> <span class="token comment">//报错</span>

    numberList<span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">copyAll</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span> from<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">to</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>报错原因和 Java 完全一样，因为此时编译器无法判断出我们到底是否会做出不安全的操作，所以我们依然要来向编译器做出安全保证</p><p>此时就需要在 Kotlin 中来实现<strong>泛型协变</strong>和<strong>泛型逆变</strong>了，以下两种方式都可以实现：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">copyAll</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span> from<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span><span class="token keyword">out</span> T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">to</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">copyAll</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token operator">:</span> MutableList<span class="token operator">&lt;</span><span class="token keyword">in</span> T<span class="token operator">&gt;</span><span class="token punctuation">,</span> from<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">to</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>out</code> 关键字就相当于 Java 中的<code>&lt;? extends T&gt;</code>，其作用就是限制了 <code>from</code> 不能用于接收值而只能向其取值，这样就避免了从 <code>to</code> 取出值然后向 <code>from</code> 赋值这种不安全的行为了，即实现了泛型协变</p><p><code>in</code> 关键字就相当于 Java 中的<code>&lt;? super T&gt;</code>，其作用就是限制了 <code>to</code> 只能用于接收值而不能向其取值，这样就避免了从 <code>to</code> 取出值然后向 <code>from</code> 赋值这种不安全的行为了，即实现了泛型逆变</p><blockquote><p>从这也可以联想到，<code>MutableList&lt;*&gt;</code> 就相当于 <code>MutableList&lt;out Any?&gt;</code>了，两者都带有相同的限制条件：不允许写值操作，允许读值操作，且读取出来的值只能当做 <code>Any?</code>进行处理</p></blockquote><h1 id="十二、支持协变的-list" tabindex="-1"><a class="header-anchor" href="#十二、支持协变的-list" aria-hidden="true">#</a> 十二、支持协变的 List</h1><p>在上述例子中，想要实现协变还有另外一种方式，那就是使用 List</p><p>将 from 的类型声明从 <code>MutableList&lt;T&gt;</code>修改为 <code>List&lt;T&gt;</code> 后，可以发现 <code>copyAll</code> 方法也可以正常调用了</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">copyAll</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span> from<span class="token operator">:</span> List<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">to</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对 Kotlin 有一定了解的同学应该知道，Kotlin 中的集合框架分为两种大类：<strong>可读可写</strong>和<strong>只能读不能写</strong></p><p>以 Java 中的 ArrayList 为例，Kotlin 将之分为了 MutableList 和 List 两种类型的接口。而 List 接口中的泛型已经使用 out 关键字进行修饰了，且不包含任何<strong>传入值并保存</strong>的方法，即 List 接口<strong>只支持读值而不支持写值</strong>，其本身就已经满足了协变所需要的条件，因此<code>copyAll</code> 方法可以正常使用</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> List<span class="token operator">&lt;</span><span class="token keyword">out</span> E<span class="token operator">&gt;</span> <span class="token operator">:</span> Collection<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">val</span> size<span class="token operator">:</span> Int
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">contains</span><span class="token punctuation">(</span>element<span class="token operator">:</span> <span class="token annotation builtin">@UnsafeVariance</span> E<span class="token punctuation">)</span><span class="token operator">:</span> Boolean
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Iterator<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">containsAll</span><span class="token punctuation">(</span>elements<span class="token operator">:</span> Collection<span class="token operator">&lt;</span><span class="token annotation builtin">@UnsafeVariance</span> E<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean
    <span class="token keyword">public</span> <span class="token keyword">operator</span> <span class="token keyword">fun</span> <span class="token keyword">get</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> E
    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">indexOf</span><span class="token punctuation">(</span>element<span class="token operator">:</span> <span class="token annotation builtin">@UnsafeVariance</span> E<span class="token punctuation">)</span><span class="token operator">:</span> Int
    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span>element<span class="token operator">:</span> <span class="token annotation builtin">@UnsafeVariance</span> E<span class="token punctuation">)</span><span class="token operator">:</span> Int
    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">listIterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ListIterator<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span>
    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">listIterator</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> ListIterator<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span>
    <span class="token keyword">public</span> <span class="token keyword">fun</span> <span class="token function">subList</span><span class="token punctuation">(</span>fromIndex<span class="token operator">:</span> Int<span class="token punctuation">,</span> toIndex<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>E<span class="token operator">&gt;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>虽然 List 接口中有几个方法也接收了 E 类型的入参参数，但该方法本身不会进行写值操作，所以实际上可以正常使用，Kotlin 也使用 <code>@UnsafeVariance</code>抑制了编译器警告</p></blockquote><h1 id="十三、reified-inline" tabindex="-1"><a class="header-anchor" href="#十三、reified-inline" aria-hidden="true">#</a> 十三、reified &amp; inline</h1><p>上文讲了，由于类型擦除，Java 和 Kotlin 的泛型类型实参都会在编译阶段被擦除，在 Kotlin 中存在一个额外手段可以来解决这个问题，即<strong>内联函数</strong></p><p>用关键字 inline 标记的函数就称为内联函数，再用 reified 关键字修饰内联函数中的泛型形参，编译器在进行编译的时候便会将内联函数的字节码插入到每一个调用的地方，当中就包括泛型的类型实参。而内联函数的类型形参能够被实化，就意味着我们可以在运行时引用实际的类型实参了</p><p>例如，我们可以写出以下这样的一个内联函数，用于判断一个对象是否是指定类型</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">.</span>isInstanceOf<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;string&quot;</span></span><span class="token punctuation">.</span>isInstanceOf<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">&gt;</span> Any<span class="token punctuation">.</span><span class="token function">isInstanceOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span> <span class="token keyword">is</span> T
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将以上的 Kotlin 代码反编译为 Java 代码，可以看出来 <code>main()</code>方法最终是没有调用 <code>isInstanceOf</code> 方法的，具体的判断逻辑都被插入到了<code>main()</code>方法内部，最终是执行了 <code>instanceof</code> 操作，且指定了具体的泛型类型参数 String 和 Integer</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest6Kt</span> <span class="token punctuation">{</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">Object</span> $<span class="token keyword">this</span>$isInstanceOf$iv <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
      <span class="token keyword">int</span> $i$f$isInstanceOf <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token keyword">boolean</span> var2 <span class="token operator">=</span> $<span class="token keyword">this</span>$isInstanceOf$iv <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span>
      $i$f$isInstanceOf <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Object</span> $<span class="token keyword">this</span>$isInstanceOf$iv <span class="token operator">=</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">;</span>
      $i$f$isInstanceOf <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      var2 <span class="token operator">=</span> $<span class="token keyword">this</span>$isInstanceOf$iv <span class="token keyword">instanceof</span> <span class="token class-name">Integer</span><span class="token punctuation">;</span>
      $i$f$isInstanceOf <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>var2<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// $FF: synthetic method</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var0<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>

   <span class="token comment">// $FF: synthetic method</span>
   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">isInstanceOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> $<span class="token keyword">this</span>$isInstanceOf<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">int</span> $i$f$isInstanceOf <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
      <span class="token class-name">Intrinsics</span><span class="token punctuation">.</span><span class="token function">checkNotNullParameter</span><span class="token punctuation">(</span>$<span class="token keyword">this</span>$isInstanceOf<span class="token punctuation">,</span> <span class="token string">&quot;$this$isInstanceOf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token class-name">Intrinsics</span><span class="token punctuation">.</span><span class="token function">reifiedOperationMarker</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">&quot;T&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> $<span class="token keyword">this</span>$isInstanceOf <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>inline 和 reified 比较有用的一个场景是用在 Gson 反序列的时候。由于泛型运行时<strong>类型擦除</strong>的问题，目前用 Gson 反序列化泛型类时步骤是比较繁琐的，利用 inline 和 reified 我们就可以简化很多操作</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> gson <span class="token operator">=</span> <span class="token function">Gson</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">inline</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span><span class="token keyword">reified</span> T<span class="token operator">&gt;</span> <span class="token function">toBean</span><span class="token punctuation">(</span>json<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> T <span class="token punctuation">{</span>
    <span class="token keyword">return</span> gson<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>json<span class="token punctuation">,</span> T<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">.</span>java<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">data</span> <span class="token keyword">class</span> <span class="token function">BlogBean</span><span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> String<span class="token punctuation">,</span> <span class="token keyword">val</span> url<span class="token operator">:</span> String<span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> json <span class="token operator">=</span> <span class="token string-literal multiline"><span class="token string">&quot;&quot;&quot;{&quot;name&quot;:&quot;业志陈&quot;,&quot;url&quot;:&quot;https://juejin.cn/user/923245496518439&quot;}&quot;&quot;&quot;</span></span>
    <span class="token keyword">val</span> listJson <span class="token operator">=</span> <span class="token string-literal multiline"><span class="token string">&quot;&quot;&quot;[{&quot;name&quot;:&quot;业志陈&quot;,&quot;url&quot;:&quot;https://juejin.cn/user/923245496518439&quot;},{&quot;name&quot;:&quot;业志陈&quot;,&quot;url&quot;:&quot;https://juejin.cn/user/923245496518439&quot;}]&quot;&quot;&quot;</span></span>

    <span class="token keyword">val</span> blogBean <span class="token operator">=</span> toBean<span class="token operator">&lt;</span>BlogBean<span class="token operator">&gt;</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
    <span class="token keyword">val</span> blogMap <span class="token operator">=</span> toBean<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span>
    <span class="token keyword">val</span> blogBeanList <span class="token operator">=</span> toBean<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>BlogBean<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>listJson<span class="token punctuation">)</span>
    
    <span class="token comment">//BlogBean(name=业志陈, url=https://juejin.cn/user/923245496518439)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>blogBean<span class="token punctuation">)</span>
    <span class="token comment">//{name=业志陈, url=https://juejin.cn/user/923245496518439}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>blogMap<span class="token punctuation">)</span>
    <span class="token comment">//[{name=业志陈, url=https://juejin.cn/user/923245496518439}, {name=业志陈, url=https://juejin.cn/user/923245496518439}]</span>
    <span class="token function">println</span><span class="token punctuation">(</span>blogBeanList<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,142),d={href:"https://github.com/leavesCZY/JsonHolder",target:"_blank",rel:"noopener noreferrer"},v=p('<h1 id="十四、总结" tabindex="-1"><a class="header-anchor" href="#十四、总结" aria-hidden="true">#</a> 十四、总结</h1><p>最后来做个简单的总结</p><table><thead><tr><th></th><th>协变</th><th>逆变</th><th>不变</th></tr></thead><tbody><tr><td>Kotlin</td><td><code>&lt;out T&gt;</code>，只能作为消费者，只能读取不能添加</td><td><code>&lt;in T&gt;</code>，只能作为生产者，只能添加，读取出的值只能当做 Any 类型</td><td><code>&lt;T&gt;</code>，既可以添加也可以读取</td></tr><tr><td>Java</td><td><code>&lt;? extends T&gt;</code>，只能作为消费者，只能读取不能添加</td><td><code>&lt;? super T&gt;</code>，只能作为生产者，只能添加，读取出的值只能当做 Object 类型</td><td><code>&lt;T&gt;</code>，既可以添加也可以读取</td></tr></tbody></table>',3);function m(b,g){const a=o("ExternalLinkIcon");return c(),l("div",null,[n("blockquote",null,[n("p",null,[s("公众号："),n("a",u,[s("字节数组"),t(a)])]),k]),r,n("p",null,[s("我也利用 Kotlin 的这个强大特性写了一个用于简化 Java / Kotlin 平台的序列化和反序列化操作的库："),n("a",d,[s("JsonHolder"),t(a)])]),v])}const f=e(i,[["render",m],["__file","一文读懂 Java 和 Kotlin 的泛型难点.html.vue"]]);export{f as default};
