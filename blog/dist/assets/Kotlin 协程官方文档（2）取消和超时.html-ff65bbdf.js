import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as i,a as n,d as s,e,f as l}from"./app-6847d3e4.js";const c={},u={href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adbc507fc3704fd8955aae739a433db2~tplv-k3u1fbpfcp-zoom-1.image",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,"希望对你有所帮助 🤣🤣",-1),k=n("p",null,[s("最近一直在了解关于 "),n("strong",null,"Kotlin协程"),s(" 的知识，那最好的学习资料自然是官方提供的学习文档了，看了看后我就萌生了翻译官方文档的想法。前后花了要接近一个月时间，一共九篇文章，在这里也分享出来，希望对读者有所帮助。个人知识所限，有些翻译得不是太顺畅，也希望读者能提出意见")],-1),d={href:"https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md",target:"_blank",rel:"noopener noreferrer"},m=l(`<p>本节讨论协程的取消和超时</p><h1 id="一、取消协程执行" tabindex="-1"><a class="header-anchor" href="#一、取消协程执行" aria-hidden="true">#</a> 一、取消协程执行</h1><p>在一个长时间运行的应用程序中，我们可能需要对协程进行细粒度控制。例如，用户可能关闭了启动了协程的页面，现在不再需要其运行结果，此时就应该主动取消协程。launch 函数的返回值 Job 对象就可用于取消正在运行的协程</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
<span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job: I&#39;m sleeping </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> ...&quot;</span></span><span class="token punctuation">)</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span> <span class="token comment">// delay a bit</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: I&#39;m tired of waiting!&quot;</span></span><span class="token punctuation">)</span>
    job<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// cancels the job</span>
    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// waits for job&#39;s completion </span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: Now I can quit.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span>
job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span>
job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span>
main<span class="token operator">:</span> I&#39;m tired of waiting<span class="token operator">!</span>
main<span class="token operator">:</span> Now I can quit<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要 main 函数调用了 <code>job.cancel</code>，我们就看不到 job 协程的任何输出了，因为它已被取消。还有一个 Job 的扩展函数 <code>cancelAndJoin</code> ，它结合了 <code>cancel</code> 和 <code>join</code> 的调用。</p><blockquote><p>cancel() 函数用于取消协程，join() 函数用于阻塞等待协程执行结束。之所以连续调用这两个方法，是因为 cancel() 函数调用后会马上返回而不是等待协程结束后再返回，所以此时协程不一定是马上就停止了，为了确保协程执行结束后再执行后续代码，此时就需要调用 join() 方法来阻塞等待。可以通过调用 Job 的扩展函数 cancelAndJoin() 来完成相同操作</p></blockquote><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">suspend</span> <span class="token keyword">fun</span> Job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="二、取消操作是协作完成的" tabindex="-1"><a class="header-anchor" href="#二、取消操作是协作完成的" aria-hidden="true">#</a> 二、取消操作是协作完成的</h1><p>协程的取消操作是协作(cooperative)完成的，协程必须协作才能取消。<code>kotlinx.coroutines</code> 中的所有挂起函数都是可取消的，它们在运行时会检查协程是否被取消了，并在取消时抛出 CancellationException 。但是，如果协程正在执行计算任务，并且未检查是否已处于取消状态的话，则无法取消协程，如以下示例所示：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> nextPrintTime <span class="token operator">=</span> startTime
        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// computation loop, just wastes CPU</span>
            <span class="token comment">// print a message twice a second</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> nextPrintTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job: I&#39;m sleeping </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">i<span class="token operator">++</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ...&quot;</span></span><span class="token punctuation">)</span>
                nextPrintTime <span class="token operator">+=</span> <span class="token number">500L</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span> <span class="token comment">// delay a bit</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: I&#39;m tired of waiting!&quot;</span></span><span class="token punctuation">)</span>
    job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// cancels the job and waits for its completion</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: Now I can quit.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行代码可以看到即使在 cancel 之后协程 job 也会继续打印 &quot;I&#39;m sleeping&quot; ，直到 Job 在迭代五次后（运行条件不再成立）自行结束</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span>
job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span>
job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span>
main<span class="token operator">:</span> I&#39;m tired of waiting<span class="token operator">!</span>
job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">3</span> <span class="token operator">..</span><span class="token punctuation">.</span>
job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">4</span> <span class="token operator">..</span><span class="token punctuation">.</span>
main<span class="token operator">:</span> Now I can quit<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="三、使计算代码可取消" tabindex="-1"><a class="header-anchor" href="#三、使计算代码可取消" aria-hidden="true">#</a> 三、使计算代码可取消</h1><p>有两种方法可以使计算类型的代码可以被取消。第一种方法是定期调用一个挂起函数来检查取消操作，<code>yieid()</code> 函数是一个很好的选择。另一个方法是显示检查取消操作。让我们来试试后一种方法</p><p>使用 <code>while (isActive)</code> 替换前面例子中的 <code>while (i &lt; 5)</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">var</span> nextPrintTime <span class="token operator">=</span> startTime
        <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>isActive<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// cancellable computation loop</span>
            <span class="token comment">// print a message twice a second</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> nextPrintTime<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job: I&#39;m sleeping </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">i<span class="token operator">++</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ...&quot;</span></span><span class="token punctuation">)</span>
                nextPrintTime <span class="token operator">+=</span> <span class="token number">500L</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span> <span class="token comment">// delay a bit</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: I&#39;m tired of waiting!&quot;</span></span><span class="token punctuation">)</span>
    job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// cancels the job and waits for its completion</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: Now I can quit.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如你所见，现在这个循环被取消了。isActive 是一个可通过 CoroutineScope 对象在协程内部使用的扩展属性</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span>
job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span>
job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span>
main<span class="token operator">:</span> I&#39;m tired of waiting<span class="token operator">!</span>
main<span class="token operator">:</span> Now I can quit<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、用-finally-关闭资源" tabindex="-1"><a class="header-anchor" href="#四、用-finally-关闭资源" aria-hidden="true">#</a> 四、用 finally 关闭资源</h1><p>可取消的挂起函数在取消时会抛出 CancellationException，可以用常用的方式来处理这种情况。例如，<code>try {...} finally {...}</code> 表达式和 kotlin 的 <code>use</code> 函数都可用于在取消协程时执行回收操作</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job: I&#39;m sleeping </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> ...&quot;</span></span><span class="token punctuation">)</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job: I&#39;m running finally&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span> <span class="token comment">// delay a bit</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: I&#39;m tired of waiting!&quot;</span></span><span class="token punctuation">)</span>
    job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// cancels the job and waits for its completion</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: Now I can quit.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>join() 和 cancelAndJoin() 两个函数都会等待所有回收操作完成后再继续执行之后的代码，因此上面的示例生成以下输出：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span>
job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span>
job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span>
main<span class="token operator">:</span> I&#39;m tired of waiting<span class="token operator">!</span>
job<span class="token operator">:</span> I&#39;m running <span class="token keyword">finally</span>
main<span class="token operator">:</span> Now I can quit<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="五、运行不可取消的代码块" tabindex="-1"><a class="header-anchor" href="#五、运行不可取消的代码块" aria-hidden="true">#</a> 五、运行不可取消的代码块</h1><p>如果在上一个示例中的 <code>finally</code> 块中使用挂起函数，将会导致抛出 CancellationException，因为此时协程已经被取消了（例如，在 finally 中先调用 delay(1000L) 函数，将导致之后的输出语句不执行）。通常这并不是什么问题，因为所有性能良好的关闭操作（关闭文件、取消作业、关闭任何类型的通信通道等）通常都是非阻塞的，且不涉及任何挂起函数。但是，在极少数情况下，当需要在取消的协程中调用挂起函数时，可以使用 withContext 函数和 NonCancellable 上下文将相应的代码包装在 <code>withContext(NonCancellable) {...}</code> 代码块中，如下例所示：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> launch <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job: I&#39;m sleeping </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> ...&quot;</span></span><span class="token punctuation">)</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token function">withContext</span><span class="token punctuation">(</span>NonCancellable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job: I&#39;m running finally&quot;</span></span><span class="token punctuation">)</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job: And I&#39;ve just delayed for 1 sec because I&#39;m non-cancellable&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span> <span class="token comment">// delay a bit</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: I&#39;m tired of waiting!&quot;</span></span><span class="token punctuation">)</span>
    job<span class="token punctuation">.</span><span class="token function">cancelAndJoin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// cancels the job and waits for its completion</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: Now I can quit.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时，即使在 finally 代码块中调用了挂起函数，其也将正常生效，且之后的输出语句也会正常输出</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span>
job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span>
job<span class="token operator">:</span> I&#39;m sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span>
main<span class="token operator">:</span> I&#39;m tired of waiting<span class="token operator">!</span>
job<span class="token operator">:</span> I&#39;m running <span class="token keyword">finally</span>
job<span class="token operator">:</span> And I&#39;ve just delayed <span class="token keyword">for</span> <span class="token number">1</span> sec because I&#39;m non<span class="token operator">-</span>cancellable
main<span class="token operator">:</span> Now I can quit<span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="六、超时" tabindex="-1"><a class="header-anchor" href="#六、超时" aria-hidden="true">#</a> 六、超时</h1><p>大多数情况下，我们会主动取消协程的原因是由于其执行时间已超出预估的最长时间。虽然我们可以手动跟踪对相应 Job 的引用，并在超时后取消 Job，但官方也提供了 withTimeout 函数来完成此类操作。看一下示例：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token function">withTimeout</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m sleeping </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> ...&quot;</span></span><span class="token punctuation">)</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//sampleEnd</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>I&#39;m sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span>
I&#39;m sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span>
I&#39;m sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span>
Exception <span class="token keyword">in</span> thread <span class="token string-literal singleline"><span class="token string">&quot;main&quot;</span></span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>TimeoutCancellationException<span class="token operator">:</span> Timed <span class="token keyword">out</span> waiting <span class="token keyword">for</span> <span class="token number">1300</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>withTimeout 引发的 <code>TimeoutCancellationException</code> 是 CancellationException 的子类。之前我们从未在控制台上看过 CancellationException 这类异常的堆栈信息。这是因为对于一个已取消的协程来说，CancellationException 被认为是触发协程结束的正常原因。但是，在这个例子中，我们在主函数中使用了 <code>withTimeout</code> 函数，该函数会主动抛出 TimeoutCancellationException</p><p>你可以通过使用 <code>try{...}catch（e:TimeoutCancellationException）{...}</code> 代码块来对任何情况下的超时操作执行某些特定的附加操作，或者通过使用 <code>withTimeoutOrNull</code> 函数以便在超时时返回 null 而不是抛出异常</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> <span class="token function">withTimeoutOrNull</span><span class="token punctuation">(</span><span class="token number">1300L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m sleeping </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> ...&quot;</span></span><span class="token punctuation">)</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token string-literal singleline"><span class="token string">&quot;Done&quot;</span></span> <span class="token comment">// will get cancelled before it produces this result</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Result is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">result</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时将不会打印出异常信息</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>I&#39;m sleeping <span class="token number">0</span> <span class="token operator">..</span><span class="token punctuation">.</span>
I&#39;m sleeping <span class="token number">1</span> <span class="token operator">..</span><span class="token punctuation">.</span>
I&#39;m sleeping <span class="token number">2</span> <span class="token operator">..</span><span class="token punctuation">.</span>
Result <span class="token keyword">is</span> <span class="token keyword">null</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40);function v(b,g){const a=p("ExternalLinkIcon");return o(),i("div",null,[n("blockquote",null,[n("p",null,[s("公众号："),n("a",u,[s("字节数组"),e(a)])]),r]),n("blockquote",null,[k,n("p",null,[s("协程官方文档："),n("a",d,[s("coroutines-guide"),e(a)])])]),m])}const w=t(c,[["render",v],["__file","Kotlin 协程官方文档（2）取消和超时.html.vue"]]);export{w as default};
