import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c as i,a as n,d as s,e as t,f as c}from"./app-51229bef.js";const l={},u={href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adbc507fc3704fd8955aae739a433db2~tplv-k3u1fbpfcp-zoom-1.image",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,"希望对你有所帮助 🤣🤣",-1),k=n("p",null,[s("最近一直在了解关于 "),n("strong",null,"Kotlin协程"),s(" 的知识，那最好的学习资料自然是官方提供的学习文档了，看了看后我就萌生了翻译官方文档的想法。前后花了要接近一个月时间，一共九篇文章，在这里也分享出来，希望对读者有所帮助。个人知识所限，有些翻译得不是太顺畅，也希望读者能提出意见")],-1),d={href:"https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md",target:"_blank",rel:"noopener noreferrer"},m=c(`<p>协程总是在由 Kotlin 标准库中定义的 CoroutineContext 表示的某个上下文中执行</p><p>协程上下文包含多种子元素。主要的元素是协程作业（Job，我们之前见过），以及它的调度器（Dispatche，本节将介绍）</p><h1 id="一、调度器和线程" tabindex="-1"><a class="header-anchor" href="#一、调度器和线程" aria-hidden="true">#</a> 一、调度器和线程</h1><p>协程上下文（coroutine context）包含一个协程调度器（参阅 CoroutineDispatcher），协程调度器 用于确定执行协程的目标载体，即运行于哪个线程，包含一个还是多个线程。协程调度器可以将协程的执行操作限制在特定线程上，也可以将其分派到线程池中，或者让它无限制地运行</p><p>所有协程构造器（如 launch 和 async）都接受一个可选参数，即 CoroutineContext ，该参数可用于显式指定要创建的协程和其它上下文元素所要使用的调度器</p><p>请尝试以下示例：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    launch <span class="token punctuation">{</span> <span class="token comment">// context of the parent, main runBlocking coroutine</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main runBlocking      : I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Unconfined<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// not confined -- will work with main thread</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Unconfined            : I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// will get dispatched to DefaultDispatcher </span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Default               : I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">launch</span><span class="token punctuation">(</span><span class="token function">newSingleThreadContext</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;MyOwnThread&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// will get its own new thread</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;newSingleThreadContext: I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果如下所示，日志的输出顺序可能不同</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>Unconfined            <span class="token operator">:</span> I&#39;m working <span class="token keyword">in</span> thread main
Default               <span class="token operator">:</span> I&#39;m working <span class="token keyword">in</span> thread DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span>
newSingleThreadContext<span class="token operator">:</span> I&#39;m working <span class="token keyword">in</span> thread MyOwnThread
main runBlocking      <span class="token operator">:</span> I&#39;m working <span class="token keyword">in</span> thread main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当 <code>launch {...}</code> 在不带参数的情况下使用时，它从外部的协程作用域继承上下文和调度器。在本例中，它继承于在主线程中中运行的 runBlocking 协程的上下文</p><p>Dispatchers.Unconfined 是一个特殊的调度器，看起来似乎也在主线程中运行，但实际上它是一种不同的机制，稍后将进行解释</p><p>在 GlobalScope 中启动协程时默认使用的调度器是 Dispatchers.default，并使用共享的后台线程池，因此 <code>launch(Dispatchers.default){...}</code> 与 <code>GlobalScope.launch{...}</code> 是使用相同的调度器</p><p>newSingleThreadContext 用于为协程专门创建一个新的线程来运行。专用线程是非常昂贵的资源。在实际的应用程序中，它必须在不再需要时使用 close 函数释放掉，或者存储在顶级变量中以此实现在整个应用程序中重用</p><h1 id="二、unconfined-vs-confined-dispatcher" tabindex="-1"><a class="header-anchor" href="#二、unconfined-vs-confined-dispatcher" aria-hidden="true">#</a> 二、Unconfined vs confined dispatcher</h1><p>Dispatchers.Unconfined 调度器在调用者线程中启动一个协程，但它仅仅只是运行到第一个挂起点。在挂起之后，它将恢复线程中的协程，该协程完全由调用的挂起函数决定。Unconfined 调度器适用于既不消耗CPU时间和不更新任何受限于特定线程的共享数据（如UI）的协程</p><p>另一方面，调度器是默认继承于外部的协程作用域的。尤其是 runBlocking 启动的协程的调度器只能是调用者所在的线程，因此继承 runBlocking 的结果是在此线程上的调度执行操作是可预测的 FIFO</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Unconfined<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// not confined -- will work with main thread</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Unconfined      : I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Unconfined      : After delay in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    launch <span class="token punctuation">{</span> <span class="token comment">// context of the parent, main runBlocking coroutine</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main runBlocking: I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main runBlocking: After delay in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>Unconfined      <span class="token operator">:</span> I&#39;m working <span class="token keyword">in</span> thread main
main runBlocking<span class="token operator">:</span> I&#39;m working <span class="token keyword">in</span> thread main
Unconfined      <span class="token operator">:</span> After delay <span class="token keyword">in</span> thread kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>DefaultExecutor
main runBlocking<span class="token operator">:</span> After delay <span class="token keyword">in</span> thread main
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，从 <code>runBlocking{...}</code> 继承了上下文的协程继续在主线程中执行，而调度器是 unconfined 的协程，在 delay 函数之后的代码则默认运行于 delay 函数所使用的运行线程</p><blockquote><p>unconfined 调度器是一种高级机制，可以在某些极端情况下提供帮助而不需要调度协程以便稍后执行或产生不希望的副作用， 因为某些操作必须立即在协程中执行。 非受限调度器不应该在一般的代码中使用</p></blockquote><h1 id="三、调试协程和线程" tabindex="-1"><a class="header-anchor" href="#三、调试协程和线程" aria-hidden="true">#</a> 三、调试协程和线程</h1><p>协程可以在一个线程上挂起，在另一个线程上继续运行。即使使用单线程的调度器，也可能很难明确知道协程当前在做什么、在哪里、处于什么状态。调试线程的常用方法是在在日志文件中为每条日志语句加上线程名，日志框架普遍支持此功能。当使用协程时，线程名本身没有提供太多的上下文信息，因此 <code>kotlinx.coroutines</code> 包含了调试工具以便使协程调试起来更加容易</p><p>开启 JVM 的 <code>-Dkotlinx.coroutines.debug</code> 配置后运行以下代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">msg</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> a <span class="token operator">=</span> async <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m computing a piece of the answer&quot;</span></span><span class="token punctuation">)</span>
        <span class="token number">6</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">val</span> b <span class="token operator">=</span> async <span class="token punctuation">{</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m computing another piece of the answer&quot;</span></span><span class="token punctuation">)</span>
        <span class="token number">7</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The answer is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">a<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> b<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>共有三个协程。runBlocking 中的主协程（#1）和两个计算延迟值a（#2）和b（#3）的协程。它们都在 runBlocking 的上下文中执行，并且仅限于主线程。此代码的输出为：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> I&#39;m computing a piece of the answer
<span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">3</span><span class="token punctuation">]</span> I&#39;m computing another piece of the answer
<span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> The answer <span class="token keyword">is</span> <span class="token number">42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>log 函数在方括号中打印线程名，可以看到协程都运行于主线程，线程名后附有有当前正在执行的协程的标识符。当调试模式打开时，此标识符将连续分配给所有创建的协程</p><p>当使用 -ea 选项运行 JVM 时，调试模式也将打开，可以在 DEBUG_PROPERTY_NAME 属性文档中阅读有关调试工具的更多信息</p><h1 id="四、在线程间切换" tabindex="-1"><a class="header-anchor" href="#四、在线程间切换" aria-hidden="true">#</a> 四、在线程间切换</h1><p>开启 JVM 的 <code>-Dkotlinx.coroutines.debug</code> 配置后运行以下代码：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">msg</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token function">newSingleThreadContext</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Ctx1&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> ctx1 <span class="token operator">-&gt;</span>
        <span class="token function">newSingleThreadContext</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Ctx2&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> ctx2 <span class="token operator">-&gt;</span>
            <span class="token function">runBlocking</span><span class="token punctuation">(</span>ctx1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Started in ctx1&quot;</span></span><span class="token punctuation">)</span>
                <span class="token function">withContext</span><span class="token punctuation">(</span>ctx2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Working in ctx2&quot;</span></span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Back to ctx1&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里演示了几种新技巧。一个是对显示指定的上下文使用 runBlocking，另一个是使用 withContext 函数更改协程的上下文并同时仍然保持在另一个协程中，如你在下面的输出中所看到的：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>Ctx1 <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> Started <span class="token keyword">in</span> ctx1
<span class="token punctuation">[</span>Ctx2 <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> Working <span class="token keyword">in</span> ctx2
<span class="token punctuation">[</span>Ctx1 <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">]</span> Back <span class="token keyword">to</span> ctx1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，本例还使用了 kotlin 标准库中的 <code>use</code> 函数用来在不再需要时释放 newSingleThreadContext 所创建的线程</p><h1 id="五、上下文中的-job" tabindex="-1"><a class="header-anchor" href="#五、上下文中的-job" aria-hidden="true">#</a> 五、上下文中的 Job</h1><p>协程中的 Job 是其上下文中的一部分，可以通过 <code>coroutineContext[Job]</code> 表达式从上下文中获取到</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;My job is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">coroutineContext<span class="token punctuation">[</span>Job<span class="token punctuation">]</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 debug 模式下，输出结果类似于：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>My job <span class="token keyword">is</span> <span class="token string-literal singleline"><span class="token string">&quot;coroutine#1&quot;</span></span><span class="token operator">:</span>BlockingCoroutine<span class="token punctuation">{</span>Active<span class="token punctuation">}</span><span class="token label symbol">@6d311334</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>注意，CoroutineScope 的 isActive 属性只是 <code>coroutineContext[Job]?.isActive == true</code> 的一种简便写法</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">public</span> <span class="token keyword">val</span> CoroutineScope<span class="token punctuation">.</span>isActive<span class="token operator">:</span> Boolean
    <span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> coroutineContext<span class="token punctuation">[</span>Job<span class="token punctuation">]</span><span class="token operator">?</span><span class="token punctuation">.</span>isActive <span class="token operator">?:</span> <span class="token boolean">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="六、子协程" tabindex="-1"><a class="header-anchor" href="#六、子协程" aria-hidden="true">#</a> 六、子协程</h1><p>当一个协程在另外一个协程的协程作用域中启动时，它将通过 CoroutineScope.coroutineContext 继承其上下文，新启动的协程的 Job 将成为父协程的 Job 的子 Job。当父协程被取消时，它的所有子协程也会递归地被取消</p><p>但是，当使用 GlobalScope 启动协程时，协程的 Job 没有父级。因此，它不受其启动的作用域和独立运作范围的限制</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token comment">// launch a coroutine to process some kind of incoming request</span>
    <span class="token keyword">val</span> request <span class="token operator">=</span> launch <span class="token punctuation">{</span>
        <span class="token comment">// it spawns two other jobs, one with GlobalScope</span>
        GlobalScope<span class="token punctuation">.</span><span class="token function">launch</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job1: I run in GlobalScope and execute independently!&quot;</span></span><span class="token punctuation">)</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job1: I am not affected by cancellation of the request&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// and the other inherits the parent context</span>
        launch <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job2: I am a child of the request coroutine&quot;</span></span><span class="token punctuation">)</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;job2: I will not execute this line if my parent request is cancelled&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
    request<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// cancel processing of the request</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// delay a second to see what happens</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main: Who has survived request cancellation?&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果是：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>job1<span class="token operator">:</span> I run <span class="token keyword">in</span> GlobalScope <span class="token operator">and</span> execute independently<span class="token operator">!</span>
job2<span class="token operator">:</span> I am a child of the request coroutine
job1<span class="token operator">:</span> I am not affected <span class="token keyword">by</span> cancellation of the request
main<span class="token operator">:</span> Who has survived request cancellation<span class="token operator">?</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="七、父协程的职责" tabindex="-1"><a class="header-anchor" href="#七、父协程的职责" aria-hidden="true">#</a> 七、父协程的职责</h1><p>父协程总是会等待其所有子协程完成。父协程不必显式跟踪它启动的所有子协程，也不必使用 Job.join 在末尾等待子协程完成</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token comment">// launch a coroutine to process some kind of incoming request</span>
    <span class="token keyword">val</span> request <span class="token operator">=</span> launch <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span> <span class="token comment">// launch a few children jobs</span>
            launch  <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200L</span><span class="token punctuation">)</span> <span class="token comment">// variable delay 200ms, 400ms, 600ms</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> is done&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;request: I&#39;m done and I don&#39;t explicitly join my children that are still active&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    request<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// wait for completion of the request, including all its children</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Now processing of the request is complete&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>request<span class="token operator">:</span> I&#39;m done <span class="token operator">and</span> I don&#39;t explicitly join my children that are still active
Coroutine <span class="token number">0</span> <span class="token keyword">is</span> done
Coroutine <span class="token number">1</span> <span class="token keyword">is</span> done
Coroutine <span class="token number">2</span> <span class="token keyword">is</span> done
Now processing of the request <span class="token keyword">is</span> complete
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="八、为协程命名以便调试" tabindex="-1"><a class="header-anchor" href="#八、为协程命名以便调试" aria-hidden="true">#</a> 八、为协程命名以便调试</h1><p>当协程经常需要进行日志调试时，协程自动分配到的 ID 是很有用处的，你只需要关联来自同一协程的日志记录。但是，当一个协程绑定到一个特定请求的处理或者执行某个特定的后台任务时，最好显式地为它命名，以便进行调试。CoroutineName 上下文元素的作用与线程名相同，它包含在启用调试模式时执行此协程的线程名中</p><p>以下代码展示了此概念：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token operator">:</span> String<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">msg</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">runBlocking</span><span class="token punctuation">(</span><span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Started main coroutine&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">// run two background value computations</span>
    <span class="token keyword">val</span> v1 <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span><span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;v1coroutine&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Computing v1&quot;</span></span><span class="token punctuation">)</span>
        <span class="token number">252</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">val</span> v2 <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span><span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;v2coroutine&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
        <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Computing v2&quot;</span></span><span class="token punctuation">)</span>
        <span class="token number">6</span>
    <span class="token punctuation">}</span>
    <span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The answer for v1 / v2 = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">v1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> v2<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启 <code>-Dkotlinx.coroutines.debug</code> JVM 配置后的输出结果类似于：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token punctuation">[</span>main <span class="token label symbol">@main</span>#<span class="token number">1</span><span class="token punctuation">]</span> Started main coroutine
<span class="token punctuation">[</span>main <span class="token label symbol">@v1coroutine</span>#<span class="token number">2</span><span class="token punctuation">]</span> Computing v1
<span class="token punctuation">[</span>main <span class="token label symbol">@v2coroutine</span>#<span class="token number">3</span><span class="token punctuation">]</span> Computing v2
<span class="token punctuation">[</span>main <span class="token label symbol">@main</span>#<span class="token number">1</span><span class="token punctuation">]</span> The answer <span class="token keyword">for</span> v1 <span class="token operator">/</span> v2 <span class="token operator">=</span> <span class="token number">42</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="九、组合上下文元素" tabindex="-1"><a class="header-anchor" href="#九、组合上下文元素" aria-hidden="true">#</a> 九、组合上下文元素</h1><p>有时我们需要为协程上下文定义多个元素。我们可以用 <code>+</code> 运算符。例如，我们可以同时使用显式指定的调度器和显式指定的名称来启动协程</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default <span class="token operator">+</span> <span class="token function">CoroutineName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;test&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;I&#39;m working in thread </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>开启 <code>-Dkotlinx.coroutines.debug</code> JVM 配置后的输出结果是：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>I&#39;m working <span class="token keyword">in</span> thread DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@test</span>#<span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="十、协程作用域" tabindex="-1"><a class="header-anchor" href="#十、协程作用域" aria-hidden="true">#</a> 十、协程作用域</h1><p>让我们把关于作用域、子元素和 Job 的知识点放在一起。假设我们的应用程序有一个具有生命周期的对象，但该对象不是协程。例如，我们正在编写一个Android应用程序，并在Android Activity中启动各种协程，以执行异步操作来获取和更新数据、指定动画等。当 Activity 销毁时，必须取消所有协程以避免内存泄漏。当然，我们可以手动操作上下文和 Job 来绑定 Activity 和协程的生命周期。但是，kotlinx.coroutines 提供了一个抽象封装：CoroutineScope。你应该已经对协程作用域很熟悉了，因为所有的协程构造器都被声明为它的扩展函数</p><p>我们通过创建与 Activity 生命周期相关联的协程作用域的实例来管理协程的生命周期。CoroutineScope 的实例可以通过 CoroutineScope() 或 MainScope() 的工厂函数来构建。前者创建通用作用域，后者创建 UI 应用程序的作用域并使用 Dispatchers.Main 作为默认的调度器</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Activity <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> mainScope <span class="token operator">=</span> <span class="token function">MainScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">fun</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        mainScope<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// to be continued ...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或者，我们可以在这个 Activity 类中实现 CoroutineScope 接口。最好的实现方式是对默认工厂函数使用委托。我们还可以将所需的调度器（在本例中使用Dispatchers.Default）与作用域结合起来：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>    <span class="token keyword">class</span> Activity <span class="token operator">:</span> CoroutineScope <span class="token keyword">by</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// to be continued ...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，我们可以在这个 Activity 内启动协程，而不必显示地指定它们的上下文。为了演示，我们启动了十个分别延时不同时间的协程：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>    <span class="token comment">// class Activity continues</span>
    <span class="token keyword">fun</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// launch ten coroutines for a demo, each working for a different time</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span>
            launch <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200L</span><span class="token punctuation">)</span> <span class="token comment">// variable delay 200ms, 400ms, ... etc</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> is done&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token comment">// class Activity ends</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在主函数中，我们创建 Activity 对象，调用测试 doSomething 函数，并在500毫秒后销毁该活动。这将取消从 doSomething 中启动的所有协程。我们可以看到这一点，因为在销毁 activity 对象后，即使我们再等待一会儿，也不会再打印消息</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">class</span> Activity <span class="token operator">:</span> CoroutineScope <span class="token keyword">by</span> <span class="token function">CoroutineScope</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">fun</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// Extension on CoroutineScope</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// to be continued ...</span>

    <span class="token comment">// class Activity continues</span>
    <span class="token keyword">fun</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// launch ten coroutines for a demo, each working for a different time</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> i <span class="token operator">-&gt;</span>
            launch <span class="token punctuation">{</span>
                <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">200L</span><span class="token punctuation">)</span> <span class="token comment">// variable delay 200ms, 400ms, ... etc</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Coroutine </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">i</span></span><span class="token string"> is done&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token comment">// class Activity ends</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> activity <span class="token operator">=</span> <span class="token function">Activity</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    activity<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// run test function</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Launched coroutines&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span> <span class="token comment">// delay for half a second</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Destroying activity!&quot;</span></span><span class="token punctuation">)</span>
    activity<span class="token punctuation">.</span><span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// cancels all coroutines</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// visually confirm that they don&#39;t work</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>Launched coroutines
Coroutine <span class="token number">0</span> <span class="token keyword">is</span> done
Coroutine <span class="token number">1</span> <span class="token keyword">is</span> done
Destroying activity<span class="token operator">!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如你所见，只有前两个协程会打印一条消息，其它的则会被 <code>Activity.destroy()</code> 中的 <code>job.cancel()</code> 所取消</p><h1 id="十一、线程局部数据" tabindex="-1"><a class="header-anchor" href="#十一、线程局部数据" aria-hidden="true">#</a> 十一、线程局部数据</h1><p>有时，将一些线程局部数据传递到协程或在协程之间传递是有实际用途的。但是，由于协程没有绑定到任何特定的线程，如果手动完成，这可能会导致模板代码</p><p>对于 ThreadLocal，扩展函数 asContextElement 可用于解决这个问题。它创建一个附加的上下文元素，该元素保持 <code>ThreadLocal</code> 给定的值，并在每次协程切换其上下文时恢复该值</p><p>很容易在实践中证明：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">val</span> threadLocal <span class="token operator">=</span> ThreadLocal<span class="token operator">&lt;</span>String<span class="token operator">?</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// declare thread-local variable</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Pre-main, current thread: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, thread local value: &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> job <span class="token operator">=</span> <span class="token function">launch</span><span class="token punctuation">(</span>Dispatchers<span class="token punctuation">.</span>Default <span class="token operator">+</span> threadLocal<span class="token punctuation">.</span><span class="token function">asContextElement</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;launch&quot;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Launch start, current thread: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, thread local value: &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;After yield, current thread: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, thread local value: &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    job<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Post-main, current thread: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, thread local value: &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在本例中，我们使用 Dispatchers.Default 在后台线程池中启动一个新的协程，因为它可以在线程池中不同的线程之间来回切换工作，但它仍然具有我们使用 <code>threadLocal.asContextElement（value=&quot;launch&quot;）</code>指定的线程局部变量的值，无论协程在哪个线程上执行。因此，输出结果是（开启了调试模式）：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>Pre<span class="token operator">-</span>main<span class="token punctuation">,</span> current thread<span class="token operator">:</span> Thread<span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span><span class="token punctuation">,</span> thread local value<span class="token operator">:</span> &#39;main&#39;
Launch start<span class="token punctuation">,</span> current thread<span class="token operator">:</span> Thread<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">1</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span><span class="token punctuation">,</span> thread local value<span class="token operator">:</span> &#39;launch&#39;
After yield<span class="token punctuation">,</span> current thread<span class="token operator">:</span> Thread<span class="token punctuation">[</span>DefaultDispatcher<span class="token operator">-</span>worker<span class="token operator">-</span><span class="token number">2</span> <span class="token label symbol">@coroutine</span>#<span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span><span class="token punctuation">,</span> thread local value<span class="token operator">:</span> &#39;launch&#39;
Post<span class="token operator">-</span>main<span class="token punctuation">,</span> current thread<span class="token operator">:</span> Thread<span class="token punctuation">[</span>main <span class="token label symbol">@coroutine</span>#<span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>main<span class="token punctuation">]</span><span class="token punctuation">,</span> thread local value<span class="token operator">:</span> &#39;main&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们很容易就忘记设置相应的上下文元素。如果运行协程的线程会有多个，则从协程访问的线程局部变量可能会有意外值。为了避免这种情况，建议使用 ensurePresent 方法，并在使用不当时可以快速失败</p><p>ThreadLocal 具备一等支持，可以与任何基础 kotlinx.coroutines 一起使用。不过，它有一个关键限制：当线程局部变量发生变化时，新值不会传导到协程调用方（因为上下文元素无法跟踪所有的线程本地对象引用）。并且更新的值在下次挂起时丢失。使用 withContext 更新协程中线程的局部值，有关详细信息，请参阅 asContextElement</p><p>或者，值可以存储在一个可变的类计数器中(var i: Int)，而类计数器又存储在一个线程局部变量中，但是，在这种情况下，您完全有责任同步此计数器中变量的潜在并发修改</p><p>有关高级用法，比如与 logging MDC, transactional contexts或其它在内部使用线程局部变量传递数据的库集成，请参阅实现了 ThreadContextElement 接口的文档</p>`,88);function v(b,g){const a=p("ExternalLinkIcon");return o(),i("div",null,[n("blockquote",null,[n("p",null,[s("公众号："),n("a",u,[s("字节数组"),t(a)])]),r]),n("blockquote",null,[k,n("p",null,[s("协程官方文档："),n("a",d,[s("coroutines-guide"),t(a)])])]),m])}const y=e(l,[["render",v],["__file","Kotlin 协程官方文档（4）协程上下文和调度器.html.vue"]]);export{y as default};
