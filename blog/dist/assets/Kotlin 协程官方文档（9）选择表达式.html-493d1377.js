import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,d as s,e as t,f as l}from"./app-6847d3e4.js";const i={},u={href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adbc507fc3704fd8955aae739a433db2~tplv-k3u1fbpfcp-zoom-1.image",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,"希望对你有所帮助 🤣🤣",-1),k=n("p",null,[s("最近一直在了解关于 "),n("strong",null,"Kotlin协程"),s(" 的知识，那最好的学习资料自然是官方提供的学习文档了，看了看后我就萌生了翻译官方文档的想法。前后花了要接近一个月时间，一共九篇文章，在这里也分享出来，希望对读者有所帮助。个人知识所限，有些翻译得不是太顺畅，也希望读者能提出意见")],-1),d={href:"https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md",target:"_blank",rel:"noopener noreferrer"},v=l(`<p>select 表达式可以同时等待多个挂起函数，并选择第一个可用的函数来执行</p><blockquote><p>选择表达式是 <code>kotlinx.coroutines</code> 的一个实验性的特性，这些 API 预计将在 <code>kotlinx.coroutines</code> 库的即将到来的更新中衍化，并可能会有突破性的变化</p></blockquote><h1 id="一、selecting-from-channels" tabindex="-1"><a class="header-anchor" href="#一、selecting-from-channels" aria-hidden="true">#</a> 一、Selecting from channels</h1><p>我们现在有两个字符串生产者：<code>fizz</code> 和 <code>buzz</code> 。其中 <code>fizz</code> 每 300 毫秒生成一个字符串“Fizz”：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">fizz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> produce<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// sends &quot;Fizz&quot; every 300 ms</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
        <span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Fizz&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着 <code>buzz</code> 每 500 毫秒生成一个字符串“Buzz!”：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">buzz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> produce<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// sends &quot;Buzz!&quot; every 500 ms</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
        <span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Buzz!&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用挂起函数 receive，我们可以从两个通道接收其中一个的数据。但是 select 表达式允许我们使用其 onReceive 子句同时从两者接收：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">selectFizzBuzz</span><span class="token punctuation">(</span>fizz<span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">,</span> buzz<span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    select<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// &lt;Unit&gt; means that this select expression does not produce any result </span>
        fizz<span class="token punctuation">.</span><span class="token function">onReceive</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span>  <span class="token comment">// this is the first select clause</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;fizz -&gt; &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        buzz<span class="token punctuation">.</span><span class="token function">onReceive</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span>  <span class="token comment">// this is the second select clause</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;buzz -&gt; &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们运行代码 7 次：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>channels<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>selects<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">fizz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> produce<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// sends &quot;Fizz&quot; every 300 ms</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>
        <span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Fizz&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">buzz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> produce<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// sends &quot;Buzz!&quot; every 500 ms</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>
        <span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Buzz!&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">selectFizzBuzz</span><span class="token punctuation">(</span>fizz<span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">,</span> buzz<span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    select<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// &lt;Unit&gt; means that this select expression does not produce any result </span>
        fizz<span class="token punctuation">.</span><span class="token function">onReceive</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span>  <span class="token comment">// this is the first select clause</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;fizz -&gt; &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        buzz<span class="token punctuation">.</span><span class="token function">onReceive</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span>  <span class="token comment">// this is the second select clause</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;buzz -&gt; &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&#39;&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
<span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> fizz <span class="token operator">=</span> <span class="token function">fizz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> buzz <span class="token operator">=</span> <span class="token function">buzz</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">selectFizzBuzz</span><span class="token punctuation">(</span>fizz<span class="token punctuation">,</span> buzz<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    coroutineContext<span class="token punctuation">.</span><span class="token function">cancelChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// cancel fizz &amp; buzz coroutines</span>
<span class="token comment">//sampleEnd        </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>fizz <span class="token operator">-&gt;</span> &#39;Fizz&#39;
buzz <span class="token operator">-&gt;</span> &#39;Buzz<span class="token operator">!</span>&#39;
fizz <span class="token operator">-&gt;</span> &#39;Fizz&#39;
fizz <span class="token operator">-&gt;</span> &#39;Fizz&#39;
buzz <span class="token operator">-&gt;</span> &#39;Buzz<span class="token operator">!</span>&#39;
fizz <span class="token operator">-&gt;</span> &#39;Fizz&#39;
buzz <span class="token operator">-&gt;</span> &#39;Buzz<span class="token operator">!</span>&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="二、selecting-on-close" tabindex="-1"><a class="header-anchor" href="#二、selecting-on-close" aria-hidden="true">#</a> 二、Selecting on close</h1><p>当通道关闭时，select 中的 onReceive 子句会失败并导致相应的 select 引发异常。我们可以使用 onReceiveOrNull 子句在通道关闭时执行特定操作。下面的示例还显示了 select 是一个返回其查询方法结果的表达式：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">selectAorB</span><span class="token punctuation">(</span>a<span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">,</span> b<span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span>
    select<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">.</span><span class="token function">onReceiveOrNull</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
                <span class="token string-literal singleline"><span class="token string">&quot;Channel &#39;a&#39; is closed&quot;</span></span> 
            <span class="token keyword">else</span> 
                <span class="token string-literal singleline"><span class="token string">&quot;a -&gt; &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&#39;&quot;</span></span>
        <span class="token punctuation">}</span>
        b<span class="token punctuation">.</span><span class="token function">onReceiveOrNull</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
                <span class="token string-literal singleline"><span class="token string">&quot;Channel &#39;b&#39; is closed&quot;</span></span>
            <span class="token keyword">else</span>    
                <span class="token string-literal singleline"><span class="token string">&quot;b -&gt; &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&#39;&quot;</span></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，onReceiveOrNull 是一个扩展函数，仅可用于具有不可为空元素的通道，这样就不会意外混淆<strong>通道是已关闭</strong>还是<strong>返回了空值</strong>这两种情况</p><p>让我们将其与生成四次“Hello”字符串的通道 <code>a</code> 和生成四次“World”字符串的通道 <code>b</code> 一起使用：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>channels<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>selects<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">selectAorB</span><span class="token punctuation">(</span>a<span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">,</span> b<span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> String <span class="token operator">=</span>
    select<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        a<span class="token punctuation">.</span><span class="token function">onReceiveOrNull</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
                <span class="token string-literal singleline"><span class="token string">&quot;Channel &#39;a&#39; is closed&quot;</span></span> 
            <span class="token keyword">else</span> 
                <span class="token string-literal singleline"><span class="token string">&quot;a -&gt; &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&#39;&quot;</span></span>
        <span class="token punctuation">}</span>
        b<span class="token punctuation">.</span><span class="token function">onReceiveOrNull</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span> 
            <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> 
                <span class="token string-literal singleline"><span class="token string">&quot;Channel &#39;b&#39; is closed&quot;</span></span>
            <span class="token keyword">else</span>    
                <span class="token string-literal singleline"><span class="token string">&quot;b -&gt; &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">value</span></span><span class="token string">&#39;&quot;</span></span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
<span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> a <span class="token operator">=</span> produce<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Hello </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">val</span> b <span class="token operator">=</span> produce<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;World </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">repeat</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// print first eight results</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token function">selectAorB</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    coroutineContext<span class="token punctuation">.</span><span class="token function">cancelChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token comment">//sampleEnd      </span>
<span class="token punctuation">}</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码的结果非常有趣，所以我们将在细节中分析它：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>a <span class="token operator">-&gt;</span> &#39;Hello <span class="token number">0</span>&#39;
a <span class="token operator">-&gt;</span> &#39;Hello <span class="token number">1</span>&#39;
b <span class="token operator">-&gt;</span> &#39;World <span class="token number">0</span>&#39;
a <span class="token operator">-&gt;</span> &#39;Hello <span class="token number">2</span>&#39;
a <span class="token operator">-&gt;</span> &#39;Hello <span class="token number">3</span>&#39;
b <span class="token operator">-&gt;</span> &#39;World <span class="token number">1</span>&#39;
Channel <span class="token char">&#39;a&#39;</span> <span class="token keyword">is</span> closed
Channel <span class="token char">&#39;a&#39;</span> <span class="token keyword">is</span> closed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从中可以观察到几点</p><p>首先，select 偏向于第一个子句。当同时可以选择多个子句时，将选择其中的第一个子句。在这里，两个通道都在不断地产生字符串，因此作为 select 中的第一个子句的通道获胜。但是，因为我们使用的是无缓冲通道，所以 a 在其发送调用时会不时地被挂起，从而给了 b 发送的机会</p><p>第二个观察结果是，当通道已经关闭时，onReceiveOrNull 将立即被选中</p><h1 id="三、selecting-to-send" tabindex="-1"><a class="header-anchor" href="#三、selecting-to-send" aria-hidden="true">#</a> 三、Selecting to send</h1><p>select 表达式有 onSend 子句，可以与 selection 的偏向性质结合使用。 让我们写一个整数生产者的例子，当主通道上的消费者跟不上时，它会将其值发送到 <code>side</code> 通道：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">produceNumbers</span><span class="token punctuation">(</span>side<span class="token operator">:</span> SendChannel<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> produce<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>num <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// produce 10 numbers from 1 to 10</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// every 100 ms</span>
        select<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">onSend</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// Send to the primary channel</span>
            side<span class="token punctuation">.</span><span class="token function">onSend</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// or to the side channel     </span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费者将会非常缓慢，每个数值处理需要 250 毫秒：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>channels<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>selects<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">produceNumbers</span><span class="token punctuation">(</span>side<span class="token operator">:</span> SendChannel<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> produce<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>num <span class="token keyword">in</span> <span class="token number">1</span><span class="token operator">..</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// produce 10 numbers from 1 to 10</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// every 100 ms</span>
        select<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
            <span class="token function">onSend</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// Send to the primary channel</span>
            side<span class="token punctuation">.</span><span class="token function">onSend</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token comment">// or to the side channel     </span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
<span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> side <span class="token operator">=</span> Channel<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// allocate side channel</span>
    launch <span class="token punctuation">{</span> <span class="token comment">// this is a very fast consumer for the side channel</span>
        side<span class="token punctuation">.</span><span class="token function">consumeEach</span> <span class="token punctuation">{</span> <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Side channel has </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">produceNumbers</span><span class="token punctuation">(</span>side<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">consumeEach</span> <span class="token punctuation">{</span> 
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Consuming </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">it</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span> <span class="token comment">// let us digest the consumed number properly, do not hurry</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Done consuming&quot;</span></span><span class="token punctuation">)</span>
    coroutineContext<span class="token punctuation">.</span><span class="token function">cancelChildren</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  
<span class="token comment">//sampleEnd      </span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们看看会发生什么：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>Consuming <span class="token number">1</span>
Side channel has <span class="token number">2</span>
Side channel has <span class="token number">3</span>
Consuming <span class="token number">4</span>
Side channel has <span class="token number">5</span>
Side channel has <span class="token number">6</span>
Consuming <span class="token number">7</span>
Side channel has <span class="token number">8</span>
Side channel has <span class="token number">9</span>
Consuming <span class="token number">10</span>
Done consuming
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、selecting-deferred-values" tabindex="-1"><a class="header-anchor" href="#四、selecting-deferred-values" aria-hidden="true">#</a> 四、Selecting deferred values</h1><p>延迟值可以使用 onAwait 子句来查询。让我们启动一个异步函数，它在随机的延迟后会延迟返回字符串：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">asyncString</span><span class="token punctuation">(</span>time<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> async <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token string-literal singleline"><span class="token string">&quot;Waited for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>让我们随机启动十余个异步函数，每个都延迟随机的时间</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">asyncStringsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>Deferred<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> random <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">asyncString</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，main 函数等待它们中的第一个完成，并统计仍处于活动状态的延迟值的数量。注意，我们在这里使用 <code>select</code> 表达式事实上是一种 Kotlin DSL，因此我们可以使用任意代码为它提供子句。在本例中，我们遍历一个延迟值列表，为每个延迟值提供 <code>onAwait</code> 子句。</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>selects<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token operator">*</span>
    
<span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">asyncString</span><span class="token punctuation">(</span>time<span class="token operator">:</span> Int<span class="token punctuation">)</span> <span class="token operator">=</span> async <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span><span class="token function">toLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token string-literal singleline"><span class="token string">&quot;Waited for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">asyncStringsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> List<span class="token operator">&lt;</span>Deferred<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> random <span class="token operator">=</span> <span class="token function">Random</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">asyncString</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
<span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> list <span class="token operator">=</span> <span class="token function">asyncStringsList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> result <span class="token operator">=</span> select<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        list<span class="token punctuation">.</span><span class="token function">withIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> deferred<span class="token punctuation">)</span> <span class="token operator">-&gt;</span>
            deferred<span class="token punctuation">.</span><span class="token function">onAwait</span> <span class="token punctuation">{</span> answer <span class="token operator">-&gt;</span>
                <span class="token string-literal singleline"><span class="token string">&quot;Deferred </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">index</span></span><span class="token string"> produced answer &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">answer</span></span><span class="token string">&#39;&quot;</span></span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>
    <span class="token keyword">val</span> countActive <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">count</span> <span class="token punctuation">{</span> it<span class="token punctuation">.</span>isActive <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">countActive</span></span><span class="token string"> coroutines are still active&quot;</span></span><span class="token punctuation">)</span>
<span class="token comment">//sampleEnd</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>Deferred <span class="token number">4</span> produced answer &#39;Waited <span class="token keyword">for</span> <span class="token number">128</span> ms&#39;
<span class="token number">11</span> coroutines are still active
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="五、switch-over-a-channel-of-deferred-values" tabindex="-1"><a class="header-anchor" href="#五、switch-over-a-channel-of-deferred-values" aria-hidden="true">#</a> 五、Switch over a channel of deferred values</h1><p>现在我们来编写一个通道生产者函数，它消费一个产生延迟字符串的通道，并等待每个接收的延迟值，但它只在下一个延迟值到达或者通道关闭之前处于运行状态。此示例将 onReceiveOrNull 和 onAwait 子句放在同一个 <code>select</code> 中：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">switchMapDeferreds</span><span class="token punctuation">(</span>input<span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>Deferred<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> produce<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> current <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// start with first received deferred value</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>isActive<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// loop while not cancelled/closed</span>
        <span class="token keyword">val</span> next <span class="token operator">=</span> select<span class="token operator">&lt;</span>Deferred<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// return next deferred value from this select or null</span>
            input<span class="token punctuation">.</span><span class="token function">onReceiveOrNull</span> <span class="token punctuation">{</span> update <span class="token operator">-&gt;</span>
                update <span class="token comment">// replaces next value to wait</span>
            <span class="token punctuation">}</span>
            current<span class="token punctuation">.</span><span class="token function">onAwait</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span>  
                <span class="token function">send</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// send value that current deferred has produced</span>
                input<span class="token punctuation">.</span><span class="token function">receiveOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// and use the next deferred from the input channel</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Channel was closed&quot;</span></span><span class="token punctuation">)</span>
            <span class="token keyword">break</span> <span class="token comment">// out of loop</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            current <span class="token operator">=</span> next
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了测试它，我们将用一个简单的异步函数，它在特定的延迟后返回特定的字符串：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">asyncString</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">,</span> time<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token operator">=</span> async <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
    str
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main 函数只是启动一个协程来打印 <code>switchMapDeferreds</code> 的结果并向它发送一些测试数据：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>channels<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span>selects<span class="token punctuation">.</span><span class="token operator">*</span>
    
<span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">switchMapDeferreds</span><span class="token punctuation">(</span>input<span class="token operator">:</span> ReceiveChannel<span class="token operator">&lt;</span>Deferred<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=</span> produce<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> current <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// start with first received deferred value</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>isActive<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// loop while not cancelled/closed</span>
        <span class="token keyword">val</span> next <span class="token operator">=</span> select<span class="token operator">&lt;</span>Deferred<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token operator">?</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// return next deferred value from this select or null</span>
            input<span class="token punctuation">.</span><span class="token function">onReceiveOrNull</span> <span class="token punctuation">{</span> update <span class="token operator">-&gt;</span>
                update <span class="token comment">// replaces next value to wait</span>
            <span class="token punctuation">}</span>
            current<span class="token punctuation">.</span><span class="token function">onAwait</span> <span class="token punctuation">{</span> value <span class="token operator">-&gt;</span>  
                <span class="token function">send</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token comment">// send value that current deferred has produced</span>
                input<span class="token punctuation">.</span><span class="token function">receiveOrNull</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// and use the next deferred from the input channel</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Channel was closed&quot;</span></span><span class="token punctuation">)</span>
            <span class="token keyword">break</span> <span class="token comment">// out of loop</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            current <span class="token operator">=</span> next
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> CoroutineScope<span class="token punctuation">.</span><span class="token function">asyncString</span><span class="token punctuation">(</span>str<span class="token operator">:</span> String<span class="token punctuation">,</span> time<span class="token operator">:</span> Long<span class="token punctuation">)</span> <span class="token operator">=</span> async <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span>
    str
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
<span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> chan <span class="token operator">=</span> Channel<span class="token operator">&lt;</span>Deferred<span class="token operator">&lt;</span>String<span class="token operator">&gt;</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// the channel for test</span>
    launch <span class="token punctuation">{</span> <span class="token comment">// launch printing coroutine</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span>s <span class="token keyword">in</span> <span class="token function">switchMapDeferreds</span><span class="token punctuation">(</span>chan<span class="token punctuation">)</span><span class="token punctuation">)</span> 
            <span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token comment">// print each received string</span>
    <span class="token punctuation">}</span>
    chan<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">asyncString</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;BEGIN&quot;</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token comment">// enough time for &quot;BEGIN&quot; to be produced</span>
    chan<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">asyncString</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Slow&quot;</span></span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment">// not enough time to produce slow</span>
    chan<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">asyncString</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Replace&quot;</span></span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">// give it time before the last one</span>
    chan<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">asyncString</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;END&quot;</span></span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token comment">// give it time to process</span>
    chan<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// close the channel ... </span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment">// and wait some time to let it finish</span>
<span class="token comment">//sampleEnd</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>代码的执行结果：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>BEGIN
Replace
END
Channel was closed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,49);function m(b,g){const a=p("ExternalLinkIcon");return o(),c("div",null,[n("blockquote",null,[n("p",null,[s("公众号："),n("a",u,[s("字节数组"),t(a)])]),r]),n("blockquote",null,[k,n("p",null,[s("协程官方文档："),n("a",d,[s("coroutines-guide"),t(a)])])]),v])}const y=e(i,[["render",m],["__file","Kotlin 协程官方文档（9）选择表达式.html.vue"]]);export{y as default};
