import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as p,o,c,a as n,d as s,e,f as i}from"./app-51229bef.js";const l={},u={href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adbc507fc3704fd8955aae739a433db2~tplv-k3u1fbpfcp-zoom-1.image",target:"_blank",rel:"noopener noreferrer"},r=n("p",null,"希望对你有所帮助 🤣🤣",-1),k=n("p",null,[s("最近一直在了解关于 "),n("strong",null,"Kotlin协程"),s(" 的知识，那最好的学习资料自然是官方提供的学习文档了，看了看后我就萌生了翻译官方文档的想法。前后花了要接近一个月时间，一共九篇文章，在这里也分享出来，希望对读者有所帮助。个人知识所限，有些翻译得不是太顺畅，也希望读者能提出意见")],-1),d={href:"https://github.com/Kotlin/kotlinx.coroutines/blob/master/coroutines-guide.md",target:"_blank",rel:"noopener noreferrer"},m=i(`<p>本节来介绍构成挂起函数的各种方法</p><h1 id="一、默认顺序" tabindex="-1"><a class="header-anchor" href="#一、默认顺序" aria-hidden="true">#</a> 一、默认顺序</h1><p>假设我们有两个定义于其它位置的挂起函数，它们用于执行一些有用操作，比如某种远程服务调用或者是计算操作。我们假设这两个函数是有实际意义的，但实际上它们只是为了模拟情况而延迟了一秒钟</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here</span>
    <span class="token keyword">return</span> <span class="token number">13</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here, too</span>
    <span class="token keyword">return</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在实践中，如果我们需要依靠第一个函数的运行结果来决定是否需要调用或者如何调用第二个函数，此时我们就需要按顺序来运行这两个函数</p><p>我们使用默认顺序来调用这两个函数，因为协程中的代码和常规代码一样，在默认情况下是顺序的执行的。下面来计算两个挂起函数运行所需的总时间</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        <span class="token keyword">val</span> one <span class="token operator">=</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> two <span class="token operator">=</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The answer is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">one <span class="token operator">+</span> two</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here</span>
    <span class="token keyword">return</span> <span class="token number">13</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here, too</span>
    <span class="token keyword">return</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将得到类似于下边这样的输出，可以看出函数是按顺序先后执行的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>The answer <span class="token keyword">is</span> <span class="token number">42</span>
Completed <span class="token keyword">in</span> <span class="token number">2007</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="二、使用-async-并发" tabindex="-1"><a class="header-anchor" href="#二、使用-async-并发" aria-hidden="true">#</a> 二、使用 async 并发</h1><p>如果 doSomethingUsefulOne() 和 doSomethingUsefulTwo() 这两个函数之间没有依赖关系，并且我们希望通过同时执行这两个操作（并发）以便更快地得到答案，此时就需要用到 <code>async</code> 了</p><p>从概念上讲，async 就类似于 launch。async 启动一个单独的协程，这是一个与所有其它协程同时工作的轻量级协程。不同之处在于，launch 返回 Job 对象并且不携带任何运行结果值。而 async 返回一个轻量级非阻塞的 <code>Deferred</code> 对象，可用于在之后取出返回值，可以通过调用 Deferred 的 <code>await()</code> 方法来获取最终结果。此外，Deferred 也实现了 Job 接口，所以也可以根据需要来取消它</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        <span class="token keyword">val</span> one <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
        <span class="token keyword">val</span> two <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The answer is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here</span>
    <span class="token keyword">return</span> <span class="token number">13</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here, too</span>
    <span class="token keyword">return</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果类似于以下所示</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>The answer <span class="token keyword">is</span> <span class="token number">42</span>
Completed <span class="token keyword">in</span> <span class="token number">1014</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到运行耗时几乎是减半了，因为这两个协程是同时运行，总的耗时时间可以说是取决于耗时最长的任务。需要注意，协程的并发总是显式的</p><h1 id="三、惰性启动-async" tabindex="-1"><a class="header-anchor" href="#三、惰性启动-async" aria-hidden="true">#</a> 三、惰性启动 async</h1><p>可选的，可以将 async 的 <code>start</code> 参数设置为 <code>CoroutineStart.lazy</code> 使其变为懒加载模式。在这种模式下，只有在主动调用 Deferred 的 <code>await()</code> 或者 <code>start()</code> 方法时才会启动协程。运行以下示例：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        <span class="token keyword">val</span> one <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>start <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
        <span class="token keyword">val</span> two <span class="token operator">=</span> <span class="token function">async</span><span class="token punctuation">(</span>start <span class="token operator">=</span> CoroutineStart<span class="token punctuation">.</span>LAZY<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
        <span class="token comment">// some computation</span>
        one<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// start the first one</span>
        two<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// start the second one</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The answer is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here</span>
    <span class="token keyword">return</span> <span class="token number">13</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here, too</span>
    <span class="token keyword">return</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将得到以下类似输出：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>The answer <span class="token keyword">is</span> <span class="token number">42</span>
Completed <span class="token keyword">in</span> <span class="token number">1016</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>以上定义了两个协程，但没有像前面的例子那样直接执行，而是将控制权交给了开发者，由开发者通过调用 <code>start()</code> 函数来确切地开始执行。首先启动了协程 one，然后启动了协程 two，然后再等待协程运行结束</p><p>注意，如果只是在 <code>println</code> 中调用了 <code>await()</code> 而不首先调用 <code>start()</code> ,这将形成顺序行为，因为 <code>await()</code> 会启动协程并等待其完成，这不是 lazy 模式的预期结果。<code>async(start=CoroutineStart.LAZY)</code> 的用例是标准标准库中的 lazy 函数的替代品，用于在值的计算涉及挂起函数的情况下</p><h1 id="四、异步风格的函数" tabindex="-1"><a class="header-anchor" href="#四、异步风格的函数" aria-hidden="true">#</a> 四、异步风格的函数</h1><p>我们可以定义异步风格的函数，使用带有显式 GlobalScope 引用的异步协程生成器来调用 <code>doSomethingUsefulOne</code> 和 <code>doSomethingUsefulTwo</code> 函数。用 “…Async” 后缀来命名这些函数，以此来强调它们用来启动异步计算，并且需要通过其返回的延迟值来获取结果</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">// The result type of somethingUsefulOneAsync is Deferred&lt;Int&gt;</span>
<span class="token keyword">fun</span> <span class="token function">somethingUsefulOneAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>
    <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">// The result type of somethingUsefulTwoAsync is Deferred&lt;Int&gt;</span>
<span class="token keyword">fun</span> <span class="token function">somethingUsefulTwoAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>
    <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，这些 <code>xxxAsync</code> 函数不是挂起函数，它们可以从任何地方调用。但是，调用这些函数意味着是要用异步形式来执行操作</p><p>以下示例展示了它们在协程之外的使用：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token comment">//sampleStart</span>
<span class="token comment">// note that we don&#39;t have \`runBlocking\` to the right of \`main\` in this example</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        <span class="token comment">// we can initiate async actions outside of a coroutine</span>
        <span class="token keyword">val</span> one <span class="token operator">=</span> <span class="token function">somethingUsefulOneAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> two <span class="token operator">=</span> <span class="token function">somethingUsefulTwoAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// but waiting for a result must involve either suspending or blocking.</span>
        <span class="token comment">// here we use \`runBlocking { ... }\` to block the main thread while waiting for the result</span>
        runBlocking <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The answer is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">//sampleEnd</span>

<span class="token keyword">fun</span> <span class="token function">somethingUsefulOneAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>
    <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">somethingUsefulTwoAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> GlobalScope<span class="token punctuation">.</span><span class="token function">async</span> <span class="token punctuation">{</span>
    <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here</span>
    <span class="token keyword">return</span> <span class="token number">13</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here, too</span>
    <span class="token keyword">return</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里展示的带有异步函数的编程样式仅供说明，因为它是其它编程语言中的流行样式。强烈建议不要将此样式与 kotlin 协程一起使用，因为如下所述</p></blockquote><p>想象一下，如果在 <code>val one = somethingUsefulOneAsync()</code> 和 <code>one.await()</code> 这两行代码之间存在逻辑错误，导致程序抛出异常，正在执行的操作也被中止，此时会发生什么情况？通常，全局的错误处理者可以捕获此异常，为开发人员记录并报告错误，但是程序可以继续执行其它操作。但是这里 <code>somethingUsefulOneAsync()</code> 函数仍然还在后台运行（因为其协程作用域是 GlobalScope），即使其启动者已经被中止了。这个问题不会在结构化并发中出现，如下一节所示</p><h1 id="五、使用-async-的结构化并发" tabindex="-1"><a class="header-anchor" href="#五、使用-async-的结构化并发" aria-hidden="true">#</a> 五、使用 async 的结构化并发</h1><p>让我们以 <code>Concurrent using async</code> 章节为例，提取一个同时执行 <code>doSomethingUsefulOne()</code> 和 <code>doSomethingUsefulTwo()</code> 并返回其结果之和的函数。因为 async 函数被定义为 CoroutineScope 上的一个扩展函数，所以我们需要将它放在 CoroutineScope 中，这就是 coroutineScope 函数提供的功能：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">concurrentSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> coroutineScope <span class="token punctuation">{</span>
    <span class="token keyword">val</span> one <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token keyword">val</span> two <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样，如果 <code>concurrentSum()</code> 函数发生错误并引发异常，则在其作用域中启动的所有协程都将被取消</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">import</span> kotlinx<span class="token punctuation">.</span>coroutines<span class="token punctuation">.</span><span class="token operator">*</span>
<span class="token keyword">import</span> kotlin<span class="token punctuation">.</span>system<span class="token punctuation">.</span><span class="token operator">*</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">//sampleStart</span>
    <span class="token keyword">val</span> time <span class="token operator">=</span> measureTimeMillis <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;The answer is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">concurrentSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Completed in </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">time</span></span><span class="token string"> ms&quot;</span></span><span class="token punctuation">)</span>
    <span class="token comment">//sampleEnd    </span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">concurrentSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> coroutineScope <span class="token punctuation">{</span>
    <span class="token keyword">val</span> one <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    <span class="token keyword">val</span> two <span class="token operator">=</span> async <span class="token punctuation">{</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
    one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here</span>
    <span class="token keyword">return</span> <span class="token number">13</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">doSomethingUsefulTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token punctuation">{</span>
    <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span> <span class="token comment">// pretend we are doing something useful here, too</span>
    <span class="token keyword">return</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从 main 函数的输出结果来看，两个操作仍然是同时执行的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>The answer <span class="token keyword">is</span> <span class="token number">42</span>
Completed <span class="token keyword">in</span> <span class="token number">1017</span> ms
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>取消操作始终通过协程的层次结构来进行传播</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> runBlocking<span class="token operator">&lt;</span>Unit<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token function">failedConcurrentSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token operator">:</span> ArithmeticException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Computation failed with ArithmeticException&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">suspend</span> <span class="token keyword">fun</span> <span class="token function">failedConcurrentSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Int <span class="token operator">=</span> coroutineScope <span class="token punctuation">{</span>
    <span class="token keyword">val</span> one <span class="token operator">=</span> async<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token function">delay</span><span class="token punctuation">(</span>Long<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token comment">// Emulates very long computation</span>
            <span class="token number">42</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;First child was cancelled&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">val</span> two <span class="token operator">=</span> async<span class="token operator">&lt;</span>Int<span class="token operator">&gt;</span> <span class="token punctuation">{</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Second child throws an exception&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token function">ArithmeticException</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    one<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> two<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意协程 one 和正在等待的父级是如何在协程 two 失败时取消的</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>Second child throws an exception
First child was cancelled
Computation failed with ArithmeticException
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,42);function v(b,f){const a=p("ExternalLinkIcon");return o(),c("div",null,[n("blockquote",null,[n("p",null,[s("公众号："),n("a",u,[s("字节数组"),e(a)])]),r]),n("blockquote",null,[k,n("p",null,[s("协程官方文档："),n("a",d,[s("coroutines-guide"),e(a)])])]),m])}const y=t(l,[["render",v],["__file","Kotlin 协程官方文档（3）组合挂起函数.html.vue"]]);export{y as default};
