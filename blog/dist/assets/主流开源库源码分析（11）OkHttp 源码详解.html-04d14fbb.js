import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,a as n,d as s,e,f as t}from"./app-6847d3e4.js";const i={},u=t(`<div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>                         \\\\           <span class="token comment">//</span>
                          \\\\  <span class="token punctuation">.</span>ooo<span class="token punctuation">.</span>  <span class="token comment">//</span>
                           <span class="token punctuation">.</span>@@@@@@@@@<span class="token punctuation">.</span>
                         <span class="token operator">:</span>@@@@@@@@@@@@@<span class="token operator">:</span>
                        <span class="token operator">:</span>@@<span class="token punctuation">.</span> &#39;@@@@@&#39; <span class="token punctuation">.</span>@@<span class="token operator">:</span>
                        @@@@@@@@@@@@@@@@@
                        @@@@@@@@@@@@@@@@@

                   <span class="token operator">:</span>@@ <span class="token operator">:</span>@@@@@@@@@@@@@@@@@<span class="token punctuation">.</span> @@<span class="token operator">:</span>
                   @@@ &#39;@@@@@@@@@@@@@@@@@<span class="token punctuation">,</span> @@@
                   @@@ &#39;@@@@@@@@@@@@@@@@@<span class="token punctuation">,</span> @@@
                   @@@ &#39;@@@@@@@@@@@@@@@@@<span class="token punctuation">,</span> @@@
                   @@@ &#39;@@@@@@@@@@@@@@@@@<span class="token punctuation">,</span> @@@
                   @@@ &#39;@@@@@@@@@@@@@@@@@<span class="token punctuation">,</span> @@@
                   @@@ &#39;@@@@@@@@@@@@@@@@@<span class="token punctuation">,</span> @@@
                        @@@@@@@@@@@@@@@@@
                        &#39;@@@@@@@@@@@@@@@&#39;
                           @@@@   @@@@
                           @@@@   @@@@
                           @@@@   @@@@
                           &#39;@@&#39;   &#39;@@&#39;

     <span class="token operator">:</span>@@@<span class="token punctuation">.</span>
   <span class="token punctuation">.</span>@@@@@@@<span class="token operator">:</span>   <span class="token operator">+</span>@@       \`@@      @@\`   @@     @@
  <span class="token punctuation">.</span>@@@@&#39;@@@@<span class="token operator">:</span>  <span class="token operator">+</span>@@       \`@@      @@\`   @@     @@
  @@@     @@@  <span class="token operator">+</span>@@       \`@@      @@\`   @@     @@
 <span class="token punctuation">.</span>@@       @@<span class="token operator">:</span> <span class="token operator">+</span>@@   @@@ \`@@      @@\` @@@@@@ @@@@@@  @@<span class="token punctuation">;</span>@@@@@
 @@@       @@@ <span class="token operator">+</span>@@  @@@  \`@@      @@\` @@@@@@ @@@@@@  @@@@@@@@@
 @@@       @@@ <span class="token operator">+</span>@@ @@@   \`@@@@@@@@@@\`   @@     @@    @@@   <span class="token operator">:</span>@@
 @@@       @@@ <span class="token operator">+</span>@@@@@    \`@@@@@@@@@@\`   @@     @@    @@#    @@<span class="token operator">+</span>
 @@@       @@@ <span class="token operator">+</span>@@@@@<span class="token operator">+</span>   \`@@      @@\`   @@     @@    @@<span class="token operator">:</span>    @@#
  @@<span class="token operator">:</span>     <span class="token punctuation">.</span>@@\` <span class="token operator">+</span>@@@<span class="token operator">+</span>@@   \`@@      @@\`   @@     @@    @@#    @@<span class="token operator">+</span>
  @@@<span class="token punctuation">.</span>   <span class="token punctuation">.</span>@@@  <span class="token operator">+</span>@@  @@@  \`@@      @@\`   @@     @@    @@@   <span class="token punctuation">,</span>@@
   @@@@@@@@@   <span class="token operator">+</span>@@   @@@ \`@@      @@\`   @@@@   @@@@  @@@@#@@@@
    @@@@@@@    <span class="token operator">+</span>@@   #@@ \`@@      @@\`   @@@@<span class="token operator">:</span>  @@@@<span class="token operator">:</span> @@&#39;@@@@@
                                                     @@<span class="token operator">:</span>
                                                     @@<span class="token operator">:</span>
                                                     @@<span class="token operator">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1),r={href:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/adbc507fc3704fd8955aae739a433db2~tplv-k3u1fbpfcp-zoom-1.image",target:"_blank",rel:"noopener noreferrer"},k=n("p",null,"希望对你有所帮助 🤣🤣",-1),d=n("blockquote",null,[n("p",null,[s("对于 Android Developer 来说，很多开源库都是属于"),n("strong",null,"开发必备"),s("的知识点，从使用方式到实现原理再到源码解析，这些都需要我们有一定程度的了解和运用能力。所以我打算来写一系列关于开源库"),n("strong",null,"源码解析"),s("和"),n("strong",null,"实战演练"),s("的文章，初定的目标是 "),n("strong",null,"EventBus、ARouter、LeakCanary、Retrofit、Glide、OkHttp、Coil"),s(" 等七个知名开源库，希望对你有所帮助 🤣🤣")])],-1),v={href:"https://juejin.im/post/6880602489297895438",target:"_blank",rel:"noopener noreferrer"},m=t(`<div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>dependencies <span class="token punctuation">{</span>
    implementation <span class="token string">&#39;com.squareup.okhttp3:okhttp:4.9.0&#39;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先来看一个小例子，后面的讲解都会基于这个例子涉及到的模块来展开</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * @Author: leavesCZY
 * @Github：https://github.com/leavesCZY
 */</span>
<span class="token keyword">const</span> <span class="token keyword">val</span> URL <span class="token operator">=</span> <span class="token string-literal singleline"><span class="token string">&quot;https://publicobject.com/helloworld.txt&quot;</span></span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> okHttClient <span class="token operator">=</span> OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">connectTimeout</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">readTimeout</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">writeTimeout</span><span class="token punctuation">(</span>Duration<span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">retryOnConnectionFailure</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> request <span class="token operator">=</span> Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span>URL<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> call <span class="token operator">=</span> okHttClient<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    <span class="token keyword">val</span> response <span class="token operator">=</span> call<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>body<span class="token operator">?</span><span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码就完成了一次 Get 请求，其包含的操作有：</p><ol><li>通过 Builder 模式得到 OkHttpClient，OkHttpClient 包含了对网络请求的全局配置信息，包括 <strong>链接超时时间、读写超时时间、链接失败重试</strong> 等各种配置</li><li>通过 Builder 模式得到 Request，Request 包含了本次网络请求的所有请求参数，包括 <strong>url、method、headers、body</strong> 等</li><li>通过 newCall 方法得到 Call，Call 就用于发起请求，可用于执行 <strong>同步请求（execute）、异步请求（enqueue）、取消请求（cancel）</strong> 等各种操作</li><li>调用 execute 方法发起同步请求并返回一个 Response 对象，Response 就包含了此次网络请求的所有返回信息，如果请求失败的话此方法会抛出异常</li><li>拿到 Response 对象的 body 并以字符串流的方式进行读取，打印结果即文章开头的 Android 机器人彩蛋</li></ol><h1 id="一、okhttpclient" tabindex="-1"><a class="header-anchor" href="#一、okhttpclient" aria-hidden="true">#</a> 一、OkHttpClient</h1><p>OkHttpClient 使用了 Builder 模式来完成初始化，其提供了很多的配置参数，每个选项都有默认值，但大多数时候我们还是需要来进行自定义，所以也有必要来了解下其包含的所有参数</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Builder <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//调度器</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> dispatcher<span class="token operator">:</span> Dispatcher <span class="token operator">=</span> <span class="token function">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//连接池</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> connectionPool<span class="token operator">:</span> ConnectionPool <span class="token operator">=</span> <span class="token function">ConnectionPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//拦截器列表</span>
    <span class="token keyword">internal</span> <span class="token keyword">val</span> interceptors<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>Interceptor<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//网络拦截器列表</span>
    <span class="token keyword">internal</span> <span class="token keyword">val</span> networkInterceptors<span class="token operator">:</span> MutableList<span class="token operator">&lt;</span>Interceptor<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">mutableListOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//事件监听</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> eventListenerFactory<span class="token operator">:</span> EventListener<span class="token punctuation">.</span>Factory <span class="token operator">=</span> EventListener<span class="token punctuation">.</span>NONE<span class="token punctuation">.</span><span class="token function">asFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//连接失败的时候是否重试</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> retryOnConnectionFailure <span class="token operator">=</span> <span class="token boolean">true</span> 
    <span class="token comment">//源服务器身份验证</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> authenticator<span class="token operator">:</span> Authenticator <span class="token operator">=</span> Authenticator<span class="token punctuation">.</span>NONE
    <span class="token comment">//是否允许重定向</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> followRedirects <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">//是否允许ssl重定向</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> followSslRedirects <span class="token operator">=</span> <span class="token boolean">true</span>
    <span class="token comment">//Cookie</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> cookieJar<span class="token operator">:</span> CookieJar <span class="token operator">=</span> CookieJar<span class="token punctuation">.</span>NO_COOKIES
    <span class="token comment">//缓存</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> cache<span class="token operator">:</span> Cache<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token comment">//DNS</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> dns<span class="token operator">:</span> Dns <span class="token operator">=</span> Dns<span class="token punctuation">.</span>SYSTEM
    <span class="token comment">//代理</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> proxy<span class="token operator">:</span> Proxy<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token comment">//代理选择器</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> proxySelector<span class="token operator">:</span> ProxySelector<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token comment">//代理身份验证</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> proxyAuthenticator<span class="token operator">:</span> Authenticator <span class="token operator">=</span> Authenticator<span class="token punctuation">.</span>NONE
    <span class="token comment">//Socket工厂</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> socketFactory<span class="token operator">:</span> SocketFactory <span class="token operator">=</span> SocketFactory<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//安全套接层</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> sslSocketFactoryOrNull<span class="token operator">:</span> SSLSocketFactory<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> x509TrustManagerOrNull<span class="token operator">:</span> X509TrustManager<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> connectionSpecs<span class="token operator">:</span> List<span class="token operator">&lt;</span>ConnectionSpec<span class="token operator">&gt;</span> <span class="token operator">=</span> DEFAULT_CONNECTION_SPECS
    <span class="token comment">//HTTP 协议</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> protocols<span class="token operator">:</span> List<span class="token operator">&lt;</span>Protocol<span class="token operator">&gt;</span> <span class="token operator">=</span> DEFAULT_PROTOCOLS
    <span class="token comment">//主机名字确认</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> hostnameVerifier<span class="token operator">:</span> HostnameVerifier <span class="token operator">=</span> OkHostnameVerifier
    <span class="token comment">//证书链</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> certificatePinner<span class="token operator">:</span> CertificatePinner <span class="token operator">=</span> CertificatePinner<span class="token punctuation">.</span>DEFAULT
    <span class="token keyword">internal</span> <span class="token keyword">var</span> certificateChainCleaner<span class="token operator">:</span> CertificateChainCleaner<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> callTimeout <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> connectTimeout <span class="token operator">=</span> <span class="token number">10_000</span>
    <span class="token comment">//读超时</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> readTimeout <span class="token operator">=</span> <span class="token number">10_000</span>
    <span class="token comment">//写超时</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> writeTimeout <span class="token operator">=</span> <span class="token number">10_000</span>
    <span class="token comment">//ping 之间的时间间隔</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> pingInterval <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">internal</span> <span class="token keyword">var</span> minWebSocketMessageToCompress <span class="token operator">=</span> RealWebSocket<span class="token punctuation">.</span>DEFAULT_MINIMUM_DEFLATE_SIZE
    <span class="token keyword">internal</span> <span class="token keyword">var</span> routeDatabase<span class="token operator">:</span> RouteDatabase<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="二、request" tabindex="-1"><a class="header-anchor" href="#二、request" aria-hidden="true">#</a> 二、Request</h1><p>Request 包含了网络请求时的所有请求参数，一共包含以下五个：</p><ol><li>url。即本次的网络请求地址以及可能包含的 query 键值对</li><li>method。即请求方式，可选参数有 GET、HEAD、POST、DELETE、PUT、PATCH</li><li>headers。即请求头，可用来存 token、时间戳等</li><li>body。即请求体</li><li>tags。可用来唯一标识本次请求</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">internal</span> <span class="token keyword">var</span> url<span class="token operator">:</span> HttpUrl<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token keyword">internal</span> <span class="token keyword">var</span> method<span class="token operator">:</span> String
<span class="token keyword">internal</span> <span class="token keyword">var</span> headers<span class="token operator">:</span> Headers<span class="token punctuation">.</span>Builder
<span class="token keyword">internal</span> <span class="token keyword">var</span> body<span class="token operator">:</span> RequestBody<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token comment">/** A mutable map of tags, or an immutable empty map if we don&#39;t have any. */</span>
<span class="token keyword">internal</span> <span class="token keyword">var</span> tags<span class="token operator">:</span> MutableMap<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">*</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> Any<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token function">mutableMapOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="三、call" tabindex="-1"><a class="header-anchor" href="#三、call" aria-hidden="true">#</a> 三、Call</h1><p>当调用 <code>okHttClient.newCall(request)</code>时就会得到一个 Call 对象</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/** Prepares the [request] to be executed at some point in the future. */</span>
<span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token operator">:</span> Request<span class="token punctuation">)</span><span class="token operator">:</span> Call <span class="token operator">=</span> <span class="token function">RealCall</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> request<span class="token punctuation">,</span> forWebSocket <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Call 是一个接口，我们可以将其看做是网络请求的启动器，可用于发起同步请求或异步请求，<strong>但重复发起多次请求的话会抛出异常</strong></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">interface</span> Call <span class="token operator">:</span> Cloneable <span class="token punctuation">{</span>
    
  <span class="token comment">//返回本次网络请求的 Request 对象</span>
  <span class="token keyword">fun</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Request
    
  <span class="token comment">//发起同步请求，可能会抛出异常</span>
  <span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>IOException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token keyword">fun</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Response
    
  <span class="token comment">//发起异步请求，通过 Callback 来回调最终结果 </span>
  <span class="token keyword">fun</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>responseCallback<span class="token operator">:</span> Callback<span class="token punctuation">)</span>

  <span class="token comment">//取消网络请求</span>
  <span class="token keyword">fun</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">//是否已经发起过请求</span>
  <span class="token keyword">fun</span> <span class="token function">isExecuted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean

  <span class="token comment">//是否已经取消请求</span>
  <span class="token keyword">fun</span> <span class="token function">isCanceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean
  
  <span class="token comment">//超时计算</span>
  <span class="token keyword">fun</span> <span class="token function">timeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Timeout

  <span class="token comment">//同个 Call 不允许重复发起请求，想要再次发起请求可以通过此方法得到一个新的 Call 对象</span>
  <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Call

  <span class="token keyword">fun</span> <span class="token keyword">interface</span> Factory <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token operator">:</span> Request<span class="token punctuation">)</span><span class="token operator">:</span> Call
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>newCall</code> 方法返回的实际类型是 RealCall，它是 Call 接口的唯一实现类</p><p>当我们调用 <code>execute</code> 方法发起同步请求时，其主要逻辑是：</p><ol><li>判读是否重复请求</li><li>事件记录</li><li>将自身加入到 dispatcher 中，并在请求结束时从 dispatcher 中移除自身</li><li>通过 <code>getResponseWithInterceptorChain</code> 方法得到 Response 对象</li></ol><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">RealCall</span><span class="token punctuation">(</span>
  <span class="token keyword">val</span> client<span class="token operator">:</span> OkHttpClient<span class="token punctuation">,</span>
  <span class="token comment">/** The application&#39;s original request unadulterated by redirects or auth headers. */</span>
  <span class="token keyword">val</span> originalRequest<span class="token operator">:</span> Request<span class="token punctuation">,</span>
  <span class="token keyword">val</span> forWebSocket<span class="token operator">:</span> Boolean
<span class="token punctuation">)</span> <span class="token operator">:</span> Call <span class="token punctuation">{</span>
    
  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Response <span class="token punctuation">{</span>
    <span class="token function">check</span><span class="token punctuation">(</span>executed<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;Already Executed&quot;</span></span> <span class="token punctuation">}</span>
    timeout<span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">callStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      client<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span><span class="token function">executed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token function">getResponseWithInterceptorChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      client<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、dispatcher" tabindex="-1"><a class="header-anchor" href="#四、dispatcher" aria-hidden="true">#</a> 四、Dispatcher</h1><p>从上面的分析可以看出来，<code>getResponseWithInterceptorChain</code> 方法就是重头戏了，其返回了我们最终得到的 Response。但这里先不介绍该方法，先来看看 Dispatcher 的逻辑</p><p>Dispatcher 是一个调度器，用于对全局的网络请求进行缓存调度，其包含以下几个成员变量</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">var</span> maxRequests <span class="token operator">=</span> <span class="token number">64</span>

<span class="token keyword">var</span> maxRequestsPerHost <span class="token operator">=</span> <span class="token number">5</span>

<span class="token comment">/** Ready async calls in the order they&#39;ll be run. */</span>
<span class="token keyword">private</span> <span class="token keyword">val</span> readyAsyncCalls <span class="token operator">=</span> ArrayDeque<span class="token operator">&lt;</span>AsyncCall<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">/** Running asynchronous calls. Includes canceled calls that haven&#39;t finished yet. */</span>
<span class="token keyword">private</span> <span class="token keyword">val</span> runningAsyncCalls <span class="token operator">=</span> ArrayDeque<span class="token operator">&lt;</span>AsyncCall<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token comment">/** Running synchronous calls. Includes canceled calls that haven&#39;t finished yet. */</span>
<span class="token keyword">private</span> <span class="token keyword">val</span> runningSyncCalls <span class="token operator">=</span> ArrayDeque<span class="token operator">&lt;</span>RealCall<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>maxRequests。同一时间允许并发执行网络请求的最大线程数</li><li>maxRequestsPerHost。同一 host 下的最大同时请求数</li><li>readyAsyncCalls。保存当前等待执行的异步任务</li><li>runningAsyncCalls。保存当前正在执行的异步任务</li><li>runningSyncCalls。保存当前正在执行的同步任务</li></ul><p>客户端不应该无限制地同时发起多个网络请求，因为除了网络资源所限外，系统资源也是有限的，每个请求都需要由一个线程来执行，而系统支持并发执行的线程数量是有限的，所以 OkHttp 内部就使用 maxRequests 来控制同时执行异步请求的最大线程数。此外，OkHttp 为了提高效率，允许多个指向同一 host 的网络请求共享同一个 Socket，而最大共享数量即 maxRequestsPerHost</p><p>为了统计以上两个运行参数，就需要使用 readyAsyncCalls、runningAsyncCalls 和 runningSyncCalls 来保存当前正在执行或者准备执行的网络请求。runningSyncCalls 用于保存<strong>当前正在执行的同步任务</strong>，其存储的是 RealCall。readyAsyncCalls 和 runningAsyncCalls 用于保存<strong>异步任务</strong>，其存储的是 AsyncCall</p><h2 id="_1、同步请求" tabindex="-1"><a class="header-anchor" href="#_1、同步请求" aria-hidden="true">#</a> 1、同步请求</h2><p>RealCall 的 <code>execute()</code> 方法在开始请求前，会先将自身传给 dispatcher，在请求结束后又会从 dispatcher 中移除</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">RealCall</span><span class="token punctuation">(</span>
  <span class="token keyword">val</span> client<span class="token operator">:</span> OkHttpClient<span class="token punctuation">,</span>
  <span class="token comment">/** The application&#39;s original request unadulterated by redirects or auth headers. */</span>
  <span class="token keyword">val</span> originalRequest<span class="token operator">:</span> Request<span class="token punctuation">,</span>
  <span class="token keyword">val</span> forWebSocket<span class="token operator">:</span> Boolean
<span class="token punctuation">)</span> <span class="token operator">:</span> Call <span class="token punctuation">{</span>
 
  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Response <span class="token punctuation">{</span>
    <span class="token function">check</span><span class="token punctuation">(</span>executed<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;Already Executed&quot;</span></span> <span class="token punctuation">}</span>
    timeout<span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">callStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">//添加到 dispatcher</span>
      client<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span><span class="token function">executed</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token function">getResponseWithInterceptorChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">//从 dispatcher 中移除</span>
      client<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dispatcher 内部也只是相应的将 RealCall 添加到 runningSyncCalls 中或者是将其从 runningSyncCalls 中移除，保存到 runningSyncCalls 的目的是为了方便<strong>统计当前所有正在运行的请求总数</strong>以及<strong>能够取消所有请求</strong>。此外，由于同步请求会直接运行在调用者所在线程上，所以同步请求并不会受 maxRequests 的限制</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Dispatcher <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    
      <span class="token comment">/** Used by [Call.execute] to signal it is in-flight. */</span>
  	  <span class="token annotation builtin">@Synchronized</span> 
      <span class="token keyword">internal</span> <span class="token keyword">fun</span> <span class="token function">executed</span><span class="token punctuation">(</span>call<span class="token operator">:</span> RealCall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	runningSyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    
      <span class="token comment">/** Used by [Call.execute] to signal completion. */</span>
  	  <span class="token keyword">internal</span> <span class="token keyword">fun</span> <span class="token function">finished</span><span class="token punctuation">(</span>call<span class="token operator">:</span> RealCall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token function">finished</span><span class="token punctuation">(</span>runningSyncCalls<span class="token punctuation">,</span> call<span class="token punctuation">)</span>
  	  <span class="token punctuation">}</span>

  	  <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">finished</span><span class="token punctuation">(</span>calls<span class="token operator">:</span> Deque<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span> call<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    	<span class="token keyword">val</span> idleCallback<span class="token operator">:</span> Runnable<span class="token operator">?</span>
    	<span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>calls<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Call wasn&#39;t in-flight!&quot;</span></span><span class="token punctuation">)</span>
      		idleCallback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idleCallback
    	<span class="token punctuation">}</span>
        <span class="token comment">//判断是否有需要处理的网络请求</span>
    	<span class="token keyword">val</span> isRunning <span class="token operator">=</span> <span class="token function">promoteAndExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRunning <span class="token operator">&amp;&amp;</span> idleCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      		idleCallback<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    	<span class="token punctuation">}</span>
     <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2、异步请求" tabindex="-1"><a class="header-anchor" href="#_2、异步请求" aria-hidden="true">#</a> 2、异步请求</h2><p>RealCall 的 <code>enqueue</code>方法会将外部传入的 Callback 包装为一个 AsyncCall 对象后传给 dispatcher</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">RealCall</span><span class="token punctuation">(</span>
  <span class="token keyword">val</span> client<span class="token operator">:</span> OkHttpClient<span class="token punctuation">,</span>
  <span class="token comment">/** The application&#39;s original request unadulterated by redirects or auth headers. */</span>
  <span class="token keyword">val</span> originalRequest<span class="token operator">:</span> Request<span class="token punctuation">,</span>
  <span class="token keyword">val</span> forWebSocket<span class="token operator">:</span> Boolean
<span class="token punctuation">)</span> <span class="token operator">:</span> Call <span class="token punctuation">{</span>
    
  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>responseCallback<span class="token operator">:</span> Callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">check</span><span class="token punctuation">(</span>executed<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token string-literal singleline"><span class="token string">&quot;Already Executed&quot;</span></span> <span class="token punctuation">}</span>
    <span class="token function">callStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    client<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span><span class="token function">enqueue</span><span class="token punctuation">(</span><span class="token function">AsyncCall</span><span class="token punctuation">(</span>responseCallback<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 <code>enqueue</code>对应的是异步请求，所以 OkHttp 内部就需要自己构造一个线程来执行请求，在请求结束后再通过 Callback 来将结果值回调给外部，异步请求逻辑对应的载体就是 AsyncCall 这个类</p><p>AsyncCall 是 RealCall 的非静态内部类，所以 AsyncCall 可以访问到 RealCall 的所有变量和方法。此外，AsyncCall 继承了 Runnable 接口，其 <code>executeOn</code> 方法就用于传入一个线程池对象来执行<code>run</code> 方法。<code>run</code> 方法内还是调用了 <code>getResponseWithInterceptorChain()</code>方法来获取 response，并通过 Callback 来将执行结果（不管成功还是失败）回调出去，在请求结束后也会将自身从 dispatcher 中移除</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">internal</span> <span class="token keyword">inner</span> <span class="token keyword">class</span> <span class="token function">AsyncCall</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">val</span> responseCallback<span class="token operator">:</span> Callback<span class="token punctuation">)</span> <span class="token operator">:</span> Runnable <span class="token punctuation">{</span>
	
    <span class="token annotation builtin">@Volatile</span> <span class="token keyword">var</span> callsPerHost <span class="token operator">=</span> <span class="token function">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
  		<span class="token keyword">private</span> <span class="token keyword">set</span>

	<span class="token keyword">fun</span> <span class="token function">reuseCallsPerHostFrom</span><span class="token punctuation">(</span>other<span class="token operator">:</span> AsyncCall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  		<span class="token keyword">this</span><span class="token punctuation">.</span>callsPerHost <span class="token operator">=</span> other<span class="token punctuation">.</span>callsPerHost
	<span class="token punctuation">}</span>

	<span class="token keyword">fun</span> <span class="token function">executeOn</span><span class="token punctuation">(</span>executorService<span class="token operator">:</span> ExecutorService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        client<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span><span class="token function">assertThreadDoesntHoldLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">var</span> success <span class="token operator">=</span> <span class="token boolean">false</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            executorService<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
            success <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> RejectedExecutionException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">val</span> ioException <span class="token operator">=</span> <span class="token function">InterruptedIOException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;executor rejected&quot;</span></span><span class="token punctuation">)</span>
            ioException<span class="token punctuation">.</span><span class="token function">initCause</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
            <span class="token function">noMoreExchanges</span><span class="token punctuation">(</span>ioException<span class="token punctuation">)</span>
            responseCallback<span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@RealCall</span><span class="token punctuation">,</span> ioException<span class="token punctuation">)</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                client<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token comment">// This call is no longer running!</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">threadName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;OkHttp </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">redactedUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> signalledCallback <span class="token operator">=</span> <span class="token boolean">false</span>
            timeout<span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">val</span> response <span class="token operator">=</span> <span class="token function">getResponseWithInterceptorChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                signalledCallback <span class="token operator">=</span> <span class="token boolean">true</span>
                responseCallback<span class="token punctuation">.</span><span class="token function">onResponse</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@RealCall</span><span class="token punctuation">,</span> response<span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>signalledCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// Do not signal the callback twice!</span>
                    Platform<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Callback failure for </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression"><span class="token function">toLoggableString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">,</span> Platform<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span> e<span class="token punctuation">)</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    responseCallback<span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@RealCall</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>t<span class="token operator">:</span> Throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>signalledCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">val</span> canceledException <span class="token operator">=</span> <span class="token function">IOException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;canceled due to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">t</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
                    canceledException<span class="token punctuation">.</span><span class="token function">addSuppressed</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>
                    responseCallback<span class="token punctuation">.</span><span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token label symbol">@RealCall</span><span class="token punctuation">,</span> canceledException<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">throw</span> t
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                client<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span><span class="token function">finished</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Dispatcher 在拿到 AsyncCall 对象后，会先将其存到 readyAsyncCalls 中，然后通过 <code>findExistingCallWithHost</code>方法来查找当前是否有指向同一 Host 的异步请求，有的话则交换 callsPerHost 变量，该变量就用于标记当前指向同一 Host 的请求数量，最后调用 <code>promoteAndExecute</code> 方法来判断当前是否允许发起请求</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Dispatcher <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 
   <span class="token keyword">internal</span> <span class="token keyword">fun</span> <span class="token function">enqueue</span><span class="token punctuation">(</span>call<span class="token operator">:</span> AsyncCall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      readyAsyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span>

      <span class="token comment">// Mutate the AsyncCall so that it shares the AtomicInteger of an existing running call to</span>
      <span class="token comment">// the same host.</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>call<span class="token punctuation">.</span>call<span class="token punctuation">.</span>forWebSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//查找当前是否有指向同一 Host 的异步请求</span>
        <span class="token keyword">val</span> existingCall <span class="token operator">=</span> <span class="token function">findExistingCallWithHost</span><span class="token punctuation">(</span>call<span class="token punctuation">.</span>host<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>existingCall <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> call<span class="token punctuation">.</span><span class="token function">reuseCallsPerHostFrom</span><span class="token punctuation">(</span>existingCall<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">promoteAndExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">findExistingCallWithHost</span><span class="token punctuation">(</span>host<span class="token operator">:</span> String<span class="token punctuation">)</span><span class="token operator">:</span> AsyncCall<span class="token operator">?</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>existingCall <span class="token keyword">in</span> runningAsyncCalls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>existingCall<span class="token punctuation">.</span>host <span class="token operator">==</span> host<span class="token punctuation">)</span> <span class="token keyword">return</span> existingCall
    <span class="token punctuation">}</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>existingCall <span class="token keyword">in</span> readyAsyncCalls<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>existingCall<span class="token punctuation">.</span>host <span class="token operator">==</span> host<span class="token punctuation">)</span> <span class="token keyword">return</span> existingCall
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span>
  <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于当前正在执行的网络请求总数可能已经达到限制，或者是指向同一 Host 的请求也达到限制了，所以 <code>promoteAndExecute()</code>方法就用于从待执行列表 readyAsyncCalls 中获取当前符合运行条件的所有请求，将请求存到 runningAsyncCalls 中，并调用线程池来执行</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">promoteAndExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Boolean <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">assertThreadDoesntHoldLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">val</span> executableCalls <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>AsyncCall<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> isRunning<span class="token operator">:</span> Boolean
    <span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">val</span> i <span class="token operator">=</span> readyAsyncCalls<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
      <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">val</span> asyncCall <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	    <span class="token comment">//如果当前正在执行的异步请求总数已经超出限制，则直接返回</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>runningAsyncCalls<span class="token punctuation">.</span>size <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxRequests<span class="token punctuation">)</span> <span class="token keyword">break</span> <span class="token comment">// Max capacity.</span>
        <span class="token comment">//如果指向同个 Host 的请求总数已经超出限制，则取下一个请求</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>asyncCall<span class="token punctuation">.</span>callsPerHost<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxRequestsPerHost<span class="token punctuation">)</span> <span class="token keyword">continue</span> <span class="token comment">// Host max capacity.</span>

        i<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">//将 callsPerHost 递增加一，表示指向该 Host 的链接数加一了</span>
        asyncCall<span class="token punctuation">.</span>callsPerHost<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">//将 asyncCall 存到可执行列表中</span>
        executableCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>asyncCall<span class="token punctuation">)</span>
        <span class="token comment">//将 asyncCall 存到正在执行列表中</span>
        runningAsyncCalls<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>asyncCall<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      isRunning <span class="token operator">=</span> <span class="token function">runningCallsCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>

    <span class="token comment">//执行所有符合条件的请求</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> <span class="token number">0</span> until executableCalls<span class="token punctuation">.</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">val</span> asyncCall <span class="token operator">=</span> executableCalls<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
      asyncCall<span class="token punctuation">.</span><span class="token function">executeOn</span><span class="token punctuation">(</span>executorService<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> isRunning
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3、arraydeque" tabindex="-1"><a class="header-anchor" href="#_3、arraydeque" aria-hidden="true">#</a> 3、ArrayDeque</h2><p>上面有讲到，三种请求的存储容器是 ArrayDeque。ArrayDeque 属于非线程安全的双端队列，所以涉及到多线程操作时都需要外部主动线程同步。那么让我们想一想，OkHttp 选择 ArrayDeque 作为任务容器的理由是什么？以我粗浅的眼光来看，有以下几点：</p><ul><li>ArrayDeque 内部使用数组结构来存储数据，元素具有明确的先后顺序，这符合我们对网络请求<strong>先到先执行</strong>的基本预期</li><li>在选择符合运行条件的异步请求时，需要对 readyAsyncCalls 进行遍历，数组在遍历效率上会比较高</li><li>在遍历到符合条件的请求后，需要将请求从 readyAsyncCalls 中移除并转移到 runningAsyncCalls 中，而 ArrayDeque 作为双端队列，在内存空间利用率上比较高</li><li>Dispatcher 面对的就是多线程环境，本身就需要进行线程同步，选择 ArrayDeque 这个非线程安全的容器可以省去多余的线程同步消耗</li></ul><h2 id="_4、线程池" tabindex="-1"><a class="header-anchor" href="#_4、线程池" aria-hidden="true">#</a> 4、线程池</h2><p>OkHttp 的异步请求是交由其内部的线程池来完成的，该线程池就长这样：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">private</span> <span class="token keyword">var</span> executorServiceOrNull<span class="token operator">:</span> ExecutorService<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>

<span class="token annotation builtin">@get:Synchronized</span>
<span class="token annotation builtin">@get:JvmName</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;executorService&quot;</span></span><span class="token punctuation">)</span> <span class="token keyword">val</span> executorService<span class="token operator">:</span> ExecutorService
<span class="token keyword">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>executorServiceOrNull <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    executorServiceOrNull <span class="token operator">=</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Int<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>
        <span class="token function">SynchronousQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">threadFactory</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">okHttpName</span></span><span class="token string"> Dispatcher&quot;</span></span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> executorServiceOrNull<span class="token operator">!!</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该线程池的参数设置有什么优势呢？以我粗浅的眼光来看，有以下两点：</p><ol><li>核心线程数为 0，线程超时时间是 60 秒。说明在没有待执行的任务的时候，如果线程闲置了 60 秒，那么线程就会被回收，这可以避免空闲线程白白浪费系统资源，适合于移动设备资源紧缺的情景</li><li>允许的最大线程数为 Int.MAX_VALUE，可以看做是完全没有限制的，且任务队列是 SynchronousQueue。SynchronousQueue 的特点是当有任务入队时，必须等待该任务被消费否则入队操作就会一直被阻塞，而由于线程池允许的最大线程数量是无限的，所以每个入队的任务都能马上交由线程处理（交付给空闲线程或者新建一个线程来处理），这就保证了任务的处理及时性，符合我们对网络请求应该尽快发起并完成的期望</li></ol><p>虽然线程池本身对于最大线程数几乎没有限制，但是由于提交任务的操作还受 maxRequests 的控制，所以实际上该线程池最多同时运行 maxRequests 个线程</p><h2 id="_5、推动请求执行" tabindex="-1"><a class="header-anchor" href="#_5、推动请求执行" aria-hidden="true">#</a> 5、推动请求执行</h2><p>既然 OkHttp 内部的线程池是不可能无限制地新建线程来执行请求的，那么当请求总数已达到 maxRequests 后，后续的请求只能是先处于等待状态，那么这些等待状态的请求会在什么时候被启动呢？</p><p>同步请求和异步请求结束后都会调用到 Dispatcher 的两个 <code>finished</code> 方法，在这两个方法里又会触发到 <code>promoteAndExecute()</code>方法去遍历任务列表来执行，此时就推动了待处理列表的任务执行操作。所以说，Dispatcher 中的请求都可以看做是在自发性地启动，每个请求结束都会自动触发下一个请求执行（如果有的话），省去了多余的定时检查这类操作</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/** Used by [AsyncCall.run] to signal completion. */</span>
<span class="token keyword">internal</span> <span class="token keyword">fun</span> <span class="token function">finished</span><span class="token punctuation">(</span>call<span class="token operator">:</span> AsyncCall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	call<span class="token punctuation">.</span>callsPerHost<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token function">finished</span><span class="token punctuation">(</span>runningAsyncCalls<span class="token punctuation">,</span> call<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token comment">/** Used by [Call.execute] to signal completion. */</span>
<span class="token keyword">internal</span> <span class="token keyword">fun</span> <span class="token function">finished</span><span class="token punctuation">(</span>call<span class="token operator">:</span> RealCall<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token function">finished</span><span class="token punctuation">(</span>runningSyncCalls<span class="token punctuation">,</span> call<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token operator">&lt;</span>T<span class="token operator">&gt;</span> <span class="token function">finished</span><span class="token punctuation">(</span>calls<span class="token operator">:</span> Deque<span class="token operator">&lt;</span>T<span class="token operator">&gt;</span><span class="token punctuation">,</span> call<span class="token operator">:</span> T<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">val</span> idleCallback<span class="token operator">:</span> Runnable<span class="token operator">?</span>
	<span class="token function">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>calls<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>call<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token function">AssertionError</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Call wasn&#39;t in-flight!&quot;</span></span><span class="token punctuation">)</span>
  		idleCallback <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>idleCallback
	<span class="token punctuation">}</span>
	<span class="token comment">//判断当前是否有可以启动的待执行任务，有的话则启动</span>
	<span class="token keyword">val</span> isRunning <span class="token operator">=</span> <span class="token function">promoteAndExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

	<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRunning <span class="token operator">&amp;&amp;</span> idleCallback <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  		idleCallback<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_6、总结" tabindex="-1"><a class="header-anchor" href="#_6、总结" aria-hidden="true">#</a> 6、总结</h2><ul><li>如果是同步请求，那么网络请求过程就会直接在调用者所在线程上完成，不受 Dispatcher 的控制</li><li>如果是异步请求，该请求会先存到待执行列表 readyAsyncCalls 中，该请求是否可以立即发起受 maxRequests 和 maxRequestsPerHost 两个条件的限制。如果符合条件，那么就会从 readyAsyncCalls 取出并存到 runningAsyncCalls 中，然后交由 OkHttp 内部的线程池来执行</li><li>不管外部是同步请求还是异步请求，内部都是通过调用<code>getResponseWithInterceptorChain()</code>方法来拿到 Response 的</li><li>Dispatcher 内部的线程池本身允许同时运行 Int.MAX_VALUE 个线程，但是实际上的线程数量还是受 maxRequests 的控制</li></ul><h1 id="五、realinterceptorchain" tabindex="-1"><a class="header-anchor" href="#五、realinterceptorchain" aria-hidden="true">#</a> 五、RealInterceptorChain</h1><p>重点再来看 <code>getResponseWithInterceptorChain()</code>方法，其主要逻辑就是通过拦截器来完成整个网络请求过程。在该方法中，除了会获取外部主动设置的拦截器外，也会默认添加以下几个拦截器</p><ol><li>RetryAndFollowUpInterceptor。负责失败重试以及重定向</li><li>BridgeInterceptor。负责对用户构造的 Request 进行转换，添加必要的 header 和 cookie，在得到 response 后如果有需要的会进行 gzip 解压</li><li>CacheInterceptor。用于处理缓存</li><li>ConnectInterceptor。负责和服务器建立连接</li><li>CallServerInterceptor。负责向服务器发送请求和从服务器接收数据</li></ol><p>最后，request 和 interceptors 会用来生成一个 RealInterceptorChain 对象，由其来最终返回 response</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>IOException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">internal</span> <span class="token keyword">fun</span> <span class="token function">getResponseWithInterceptorChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Response <span class="token punctuation">{</span>
    <span class="token comment">// Build a full stack of interceptors.</span>
    <span class="token keyword">val</span> interceptors <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Interceptor<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment">//添加开发者设置的拦截器</span>
    interceptors <span class="token operator">+=</span> client<span class="token punctuation">.</span>interceptors
    
    <span class="token comment">//添加默认的拦截器</span>
    interceptors <span class="token operator">+=</span> <span class="token function">RetryAndFollowUpInterceptor</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>
    interceptors <span class="token operator">+=</span> <span class="token function">BridgeInterceptor</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>cookieJar<span class="token punctuation">)</span>
    interceptors <span class="token operator">+=</span> <span class="token function">CacheInterceptor</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>cache<span class="token punctuation">)</span>
    interceptors <span class="token operator">+=</span> ConnectInterceptor
      
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>forWebSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">//如果不是 WebSocket 的话，那就再添加开发者设置的 NetworkInterceptors</span>
      interceptors <span class="token operator">+=</span> client<span class="token punctuation">.</span>networkInterceptors
    <span class="token punctuation">}</span>
      
    <span class="token comment">//CallServerInterceptor 是实际上发起网络请求的地方</span>
    interceptors <span class="token operator">+=</span> <span class="token function">CallServerInterceptor</span><span class="token punctuation">(</span>forWebSocket<span class="token punctuation">)</span>

    <span class="token keyword">val</span> chain <span class="token operator">=</span> <span class="token function">RealInterceptorChain</span><span class="token punctuation">(</span>
        call <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>
        interceptors <span class="token operator">=</span> interceptors<span class="token punctuation">,</span>
        index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
        exchange <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>
        request <span class="token operator">=</span> originalRequest<span class="token punctuation">,</span>
        connectTimeoutMillis <span class="token operator">=</span> client<span class="token punctuation">.</span>connectTimeoutMillis<span class="token punctuation">,</span>
        readTimeoutMillis <span class="token operator">=</span> client<span class="token punctuation">.</span>readTimeoutMillis<span class="token punctuation">,</span>
        writeTimeoutMillis <span class="token operator">=</span> client<span class="token punctuation">.</span>writeTimeoutMillis
    <span class="token punctuation">)</span>

    <span class="token keyword">var</span> calledNoMoreExchanges <span class="token operator">=</span> <span class="token boolean">false</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">val</span> response <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>originalRequest<span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isCanceled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">closeQuietly</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token function">IOException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Canceled&quot;</span></span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">return</span> response
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token operator">:</span> IOException<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      calledNoMoreExchanges <span class="token operator">=</span> <span class="token boolean">true</span>
      <span class="token keyword">throw</span> <span class="token function">noMoreExchanges</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token keyword">as</span> Throwable
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>calledNoMoreExchanges<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">noMoreExchanges</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Interceptor 是 OkHttp 里很重要的一环，OkHttp 也是靠此为开发者提供了很高的自由度</strong>。Interceptor 接口本身只包含一个 <code>intercept</code> 方法，在此方法内可拿到原始的 Request 对象以及最终的 Response</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">fun</span> <span class="token keyword">interface</span> Interceptor <span class="token punctuation">{</span>
   <span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>IOException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
   <span class="token keyword">fun</span> <span class="token function">intercept</span><span class="token punctuation">(</span>chain<span class="token operator">:</span> Chain<span class="token punctuation">)</span><span class="token operator">:</span> Response   
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>例如，我们可以自定义一个 LogInterceptor 来打印网络请求的请求参数以及最终的返回值</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> LogInterceptor <span class="token operator">:</span> Interceptor <span class="token punctuation">{</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">intercept</span><span class="token punctuation">(</span>chain<span class="token operator">:</span> Interceptor<span class="token punctuation">.</span>Chain<span class="token punctuation">)</span><span class="token operator">:</span> Response <span class="token punctuation">{</span>
        <span class="token keyword">val</span> request <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
        <span class="token keyword">val</span> response <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>
        <span class="token keyword">return</span> response
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Interceptor 的实现初衷是为了给开发者提供一个可以控制网络请求的<strong>发起过程</strong>及<strong>收尾工作</strong>的入口，例如**添加 header、日志记录、请求拦截、ResponseBody修改 **等，每个 Interceptor 只负责自己关心的操作，那么势必就会有添加多个 Interceptor 的需求</p><p>我们知道，只有让每个 Interceptor 都依次处理完 request 之后，OkHttp 才能根据最终的 request 对象去联网请求得到 response，所以每个 Interceptor 需要依次拿到 request 进行自定义处理。请求到 response 后，Interceptor 可能还需要对 response 进行处理，那么就还需要将 response 再依次传递给每个 Interceptor。那么，怎么实现将多个 Interceptor 给串联起来呢？</p><p><strong>这里来看一个简化版本的 Interceptor 实现思路</strong></p><p>假设我们自己定义的 Interceptor 实现类有两个：LogInterceptor 和 HeaderInterceptor，这里只是简单地将获取到 request 和 response 的时机给打印出来，重点是要看每个 Interceptor 的先后调用顺序。为了将两个 Interceptor 给串联起来，RealInterceptorChain 会循环获取 index 指向的下一个 Interceptor 对象，每次构建一个新的 RealInterceptorChain 对象作为参数来调用 <code>intercept</code> 方法，这样外部只需要调用一次 <code>realInterceptorChain.proceed</code> 就可以拿到最终的 response 对象</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> Request

<span class="token keyword">class</span> Response

<span class="token keyword">interface</span> Chain <span class="token punctuation">{</span>

    <span class="token keyword">fun</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Request

    <span class="token keyword">fun</span> <span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token operator">:</span> Request<span class="token punctuation">)</span><span class="token operator">:</span> Response

<span class="token punctuation">}</span>

<span class="token keyword">interface</span> Interceptor <span class="token punctuation">{</span>

    <span class="token keyword">fun</span> <span class="token function">intercept</span><span class="token punctuation">(</span>chain<span class="token operator">:</span> Chain<span class="token punctuation">)</span><span class="token operator">:</span> Response

<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token function">RealInterceptorChain</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> request<span class="token operator">:</span> Request<span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> interceptors<span class="token operator">:</span> List<span class="token operator">&lt;</span>Interceptor<span class="token operator">&gt;</span><span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> index<span class="token operator">:</span> Int
<span class="token punctuation">)</span> <span class="token operator">:</span> Chain <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">copy</span><span class="token punctuation">(</span>index<span class="token operator">:</span> Int<span class="token punctuation">)</span><span class="token operator">:</span> RealInterceptorChain <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">RealInterceptorChain</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> interceptors<span class="token punctuation">,</span> index<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Request <span class="token punctuation">{</span>
        <span class="token keyword">return</span> request
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token operator">:</span> Request<span class="token punctuation">)</span><span class="token operator">:</span> Response <span class="token punctuation">{</span>
        <span class="token keyword">val</span> next <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> interceptor <span class="token operator">=</span> interceptors<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
        <span class="token keyword">val</span> response <span class="token operator">=</span> interceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span>
        <span class="token keyword">return</span> response
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>

<span class="token keyword">class</span> LogInterceptor <span class="token operator">:</span> Interceptor <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">intercept</span><span class="token punctuation">(</span>chain<span class="token operator">:</span> Chain<span class="token punctuation">)</span><span class="token operator">:</span> Response <span class="token punctuation">{</span>
        <span class="token keyword">val</span> request <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;LogInterceptor -- getRequest&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> response <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;LogInterceptor ---- getResponse&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> response
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> HeaderInterceptor <span class="token operator">:</span> Interceptor <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">intercept</span><span class="token punctuation">(</span>chain<span class="token operator">:</span> Chain<span class="token punctuation">)</span><span class="token operator">:</span> Response <span class="token punctuation">{</span>
        <span class="token keyword">val</span> request <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;HeaderInterceptor -- getRequest&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> response <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;HeaderInterceptor ---- getResponse&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> response
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> interceptorList <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Interceptor<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    interceptorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">LogInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    interceptorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">HeaderInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> request <span class="token operator">=</span> <span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> realInterceptorChain <span class="token operator">=</span> <span class="token function">RealInterceptorChain</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> interceptorList<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> response <span class="token operator">=</span> realInterceptorChain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main response&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码看着思路还可以，可是当运行后就会发现抛出了 IndexOutOfBoundsException，因为代码里并没有对 index 进行越界判断。而且，上面的代码也缺少了一个真正的生成 Response 对象的地方，每个 Interceptor 只是在进行中转调用而已，因此还需要一个来真正地完成网络请求并返回 Response 对象的地方，即 CallServerInterceptor</p><p>所以，CallServerInterceptor 的<code>intercept</code> 方法就用来真正地执行网络请求并生成 Response 对象，在这里就不能再调用 <code>proceed</code> 方法了，且 CallServerInterceptor 需要放在 interceptorList 的最后一位</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> CallServerInterceptor <span class="token operator">:</span> Interceptor <span class="token punctuation">{</span>
    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">intercept</span><span class="token punctuation">(</span>chain<span class="token operator">:</span> Chain<span class="token punctuation">)</span><span class="token operator">:</span> Response <span class="token punctuation">{</span>
        <span class="token keyword">val</span> request <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;CallServerInterceptor -- getRequest&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">val</span> response <span class="token operator">=</span> <span class="token function">Response</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;CallServerInterceptor ---- getResponse&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> response
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> interceptorList <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Interceptor<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    interceptorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">LogInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    interceptorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">HeaderInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    interceptorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token function">CallServerInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> request <span class="token operator">=</span> <span class="token function">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> realInterceptorChain <span class="token operator">=</span> <span class="token function">RealInterceptorChain</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> interceptorList<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> response <span class="token operator">=</span> realInterceptorChain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>
    <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;main response&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最终的运行结果如下所示，可以看出来，<code>intercept</code> 方法是根据添加顺序来调用，而 response 是按照反方向来传递</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>LogInterceptor <span class="token operator">--</span> getRequest
HeaderInterceptor <span class="token operator">--</span> getRequest
CallServerInterceptor <span class="token operator">--</span> getRequest
CallServerInterceptor <span class="token operator">--</span><span class="token operator">--</span> getResponse
HeaderInterceptor <span class="token operator">--</span><span class="token operator">--</span> getResponse
LogInterceptor <span class="token operator">--</span><span class="token operator">--</span> getResponse
main response
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码我简化了 OkHttp 在实现 RealInterceptorChain 时的思路，其本质上就是通过将多个拦截器以责任链的方式来一层层调用，上一个拦截器处理完后将就将结果传给下一个拦截器，直到最后一个拦截器（即 CallServerInterceptor ）处理完后将 Response 再一层层往上传递</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">class</span> <span class="token function">RealInterceptorChain</span><span class="token punctuation">(</span>
  <span class="token keyword">internal</span> <span class="token keyword">val</span> call<span class="token operator">:</span> RealCall<span class="token punctuation">,</span>
  <span class="token keyword">private</span> <span class="token keyword">val</span> interceptors<span class="token operator">:</span> List<span class="token operator">&lt;</span>Interceptor<span class="token operator">&gt;</span><span class="token punctuation">,</span>
  <span class="token keyword">private</span> <span class="token keyword">val</span> index<span class="token operator">:</span> Int<span class="token punctuation">,</span>
  <span class="token keyword">internal</span> <span class="token keyword">val</span> exchange<span class="token operator">:</span> Exchange<span class="token operator">?</span><span class="token punctuation">,</span>
  <span class="token keyword">internal</span> <span class="token keyword">val</span> request<span class="token operator">:</span> Request<span class="token punctuation">,</span>
  <span class="token keyword">internal</span> <span class="token keyword">val</span> connectTimeoutMillis<span class="token operator">:</span> Int<span class="token punctuation">,</span>
  <span class="token keyword">internal</span> <span class="token keyword">val</span> readTimeoutMillis<span class="token operator">:</span> Int<span class="token punctuation">,</span>
  <span class="token keyword">internal</span> <span class="token keyword">val</span> writeTimeoutMillis<span class="token operator">:</span> Int
<span class="token punctuation">)</span> <span class="token operator">:</span> Interceptor<span class="token punctuation">.</span><span class="token function">Chain</span> <span class="token punctuation">{</span>
    
  <span class="token keyword">internal</span> <span class="token keyword">fun</span> <span class="token function">copy</span><span class="token punctuation">(</span>
    index<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index<span class="token punctuation">,</span>
    exchange<span class="token operator">:</span> Exchange<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>exchange<span class="token punctuation">,</span>
    request<span class="token operator">:</span> Request <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>request<span class="token punctuation">,</span>
    connectTimeoutMillis<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>connectTimeoutMillis<span class="token punctuation">,</span>
    readTimeoutMillis<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>readTimeoutMillis<span class="token punctuation">,</span>
    writeTimeoutMillis<span class="token operator">:</span> Int <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>writeTimeoutMillis
  <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">RealInterceptorChain</span><span class="token punctuation">(</span>call<span class="token punctuation">,</span> interceptors<span class="token punctuation">,</span> index<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> request<span class="token punctuation">,</span> connectTimeoutMillis<span class="token punctuation">,</span>
      readTimeoutMillis<span class="token punctuation">,</span> writeTimeoutMillis<span class="token punctuation">)</span>
    
  <span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>IOException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
  <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">proceed</span><span class="token punctuation">(</span>request<span class="token operator">:</span> Request<span class="token punctuation">)</span><span class="token operator">:</span> Response <span class="token punctuation">{</span>
    ···
    <span class="token keyword">val</span> next <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>index <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> request <span class="token operator">=</span> request<span class="token punctuation">)</span>
    <span class="token keyword">val</span> interceptor <span class="token operator">=</span> interceptors<span class="token punctuation">[</span>index<span class="token punctuation">]</span>
    <span class="token annotation builtin">@Suppress</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;USELESS_ELVIS&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> response <span class="token operator">=</span> interceptor<span class="token punctuation">.</span><span class="token function">intercept</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">?:</span> <span class="token keyword">throw</span> <span class="token function">NullPointerException</span><span class="token punctuation">(</span>
        <span class="token string-literal singleline"><span class="token string">&quot;interceptor </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">interceptor</span></span><span class="token string"> returned null&quot;</span></span><span class="token punctuation">)</span>
    ···
    <span class="token keyword">return</span> response
  <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="六、interceptor" tabindex="-1"><a class="header-anchor" href="#六、interceptor" aria-hidden="true">#</a> 六、Interceptor</h1><p>我们在构建 OkHttpClient 的时候，添加拦截器的方法分为两类：<code>addInterceptor</code>和<code>addNetworkInterceptor</code></p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> okHttClient <span class="token operator">=</span> OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">addInterceptor</span> <span class="token punctuation">{</span> chain <span class="token operator">-&gt;</span>
        chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">addNetworkInterceptor</span> <span class="token punctuation">{</span> chain <span class="token operator">-&gt;</span>
        chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Interceptor 和 NetworkInterceptor 分别被称为<strong>应用拦截器</strong>和<strong>网络拦截器</strong>，那么它们有什么区别呢？</p><p>前面有讲到，OkHttp 在执行拦截器的时候，是按照如下顺序的，这个顺序就已经决定了不同拦截器的调用时机差异</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token keyword">val</span> interceptors <span class="token operator">=</span> mutableListOf<span class="token operator">&lt;</span>Interceptor<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
interceptors <span class="token operator">+=</span> client<span class="token punctuation">.</span>interceptors
interceptors <span class="token operator">+=</span> <span class="token function">RetryAndFollowUpInterceptor</span><span class="token punctuation">(</span>client<span class="token punctuation">)</span>
interceptors <span class="token operator">+=</span> <span class="token function">BridgeInterceptor</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>cookieJar<span class="token punctuation">)</span>
interceptors <span class="token operator">+=</span> <span class="token function">CacheInterceptor</span><span class="token punctuation">(</span>client<span class="token punctuation">.</span>cache<span class="token punctuation">)</span>
interceptors <span class="token operator">+=</span> ConnectInterceptor
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>forWebSocket<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  	interceptors <span class="token operator">+=</span> client<span class="token punctuation">.</span>networkInterceptors
<span class="token punctuation">}</span>
interceptors <span class="token operator">+=</span> <span class="token function">CallServerInterceptor</span><span class="token punctuation">(</span>forWebSocket<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>由于应用拦截器处于列表头部，所以在整个责任链路中应用拦截器会首先被执行，即使之后在 RetryAndFollowUpInterceptor 中发生了<strong>请求失败重试或者网络重定向</strong>等情况，应用拦截器也只会被触发一次，但网络拦截器会被调用多次</li><li>网络拦截器位于 CacheInterceptor 之后，那么当 CacheInterceptor 命中缓存的时候就不会去执行网络请求了，此时网络拦截器就不会被调用，因此网络拦截器是存在短路的可能。此外，网络拦截器位于 ConnectInterceptor 之后，在调用网络拦截器之前就已经准备好网络链接了，说明网络拦截器本身就关联着实际的网络请求逻辑</li><li>从单次请求流程上来看，应用拦截器被调用并不意味着真正有发起了网络请求，而网络拦截器被调用就说明的确发起了一次网络请求。因此如果我们希望通过拦截器来记录网络请求详情的话，就需要考虑两者的调用时机差异：应用拦截器无法感知到 OkHttp 自动添加的一些 header，但是网络拦截器可以；应用拦截器除非主动中断请求，否则每次请求一定都会被执行，但网络拦截器可能存在被短路的可能</li></ul><p>借用官方的一张图片来表示</p><figure><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/46eebdde38824c5491cdb54450dadc7e~tplv-k3u1fbpfcp-zoom-1.image" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>`,88),b={href:"https://github.com/square/okhttp/blob/master/samples/guide/src/main/java/okhttp3/recipes/Progress.java",target:"_blank",rel:"noopener noreferrer"},y=t(`<p>实现思路就是对原始的 ResponseBody 进行多一层代理，计算已经从网络中读取到的字节数和资源的 contentLength 之间的百分比，从而得到下载进度。此外，因为该拦截器是和确切的网络请求相关，所以应该要设为网络拦截器才比较合理</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code><span class="token comment">/**
 * @Author: leavesCZY
 * @Github：https://github.com/leavesCZY
 */</span>
<span class="token keyword">fun</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> ProgressListener <span class="token punctuation">{</span>
    <span class="token keyword">fun</span> <span class="token function">update</span><span class="token punctuation">(</span>bytesRead<span class="token operator">:</span> Long<span class="token punctuation">,</span> contentLength<span class="token operator">:</span> Long<span class="token punctuation">,</span> done<span class="token operator">:</span> Boolean<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">val</span> request <span class="token operator">=</span> Request<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;https://images.pexels.com/photos/5177790/pexels-photo-5177790.jpeg&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">val</span> progressListener<span class="token operator">:</span> ProgressListener <span class="token operator">=</span> <span class="token keyword">object</span> <span class="token operator">:</span> ProgressListener <span class="token punctuation">{</span>
        <span class="token keyword">var</span> firstUpdate <span class="token operator">=</span> <span class="token boolean">true</span>
        <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">update</span><span class="token punctuation">(</span>bytesRead<span class="token operator">:</span> Long<span class="token punctuation">,</span> contentLength<span class="token operator">:</span> Long<span class="token punctuation">,</span> done<span class="token operator">:</span> Boolean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>done<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;completed&quot;</span></span><span class="token punctuation">)</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>firstUpdate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    firstUpdate <span class="token operator">=</span> <span class="token boolean">false</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>contentLength <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">println</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;content-length: unknown&quot;</span></span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;content-length: %d\\n&quot;</span></span><span class="token punctuation">,</span> contentLength<span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token function">println</span><span class="token punctuation">(</span>bytesRead<span class="token punctuation">)</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>contentLength <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;%d%% done\\n&quot;</span></span><span class="token punctuation">,</span> <span class="token number">100</span> <span class="token operator">*</span> bytesRead <span class="token operator">/</span> contentLength<span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">val</span> client <span class="token operator">=</span> OkHttpClient<span class="token punctuation">.</span><span class="token function">Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">addNetworkInterceptor</span> <span class="token punctuation">{</span> chain<span class="token operator">:</span> Interceptor<span class="token punctuation">.</span>Chain <span class="token operator">-&gt;</span>
            <span class="token keyword">val</span> originalResponse <span class="token operator">=</span> chain<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            originalResponse<span class="token punctuation">.</span><span class="token function">newBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span><span class="token function">ProgressResponseBody</span><span class="token punctuation">(</span>originalResponse<span class="token punctuation">.</span>body<span class="token operator">!!</span><span class="token punctuation">,</span> progressListener<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    client<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span> <span class="token punctuation">{</span> response <span class="token operator">-&gt;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>isSuccessful<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token function">IOException</span><span class="token punctuation">(</span><span class="token string-literal singleline"><span class="token string">&quot;Unexpected code </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$</span><span class="token expression">response</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">val</span> desktopDir <span class="token operator">=</span> FileSystemView<span class="token punctuation">.</span><span class="token function">getFileSystemView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>homeDirectory
        <span class="token keyword">val</span> imageFile <span class="token operator">=</span> <span class="token function">File</span><span class="token punctuation">(</span>desktopDir<span class="token punctuation">,</span> <span class="token string-literal singleline"><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token expression">System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.jpeg&quot;</span></span><span class="token punctuation">)</span>
        imageFile<span class="token punctuation">.</span><span class="token function">createNewFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">//读取 InputStream 写入到图片文件中</span>
        response<span class="token punctuation">.</span>body<span class="token operator">!!</span><span class="token punctuation">.</span><span class="token function">byteStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">copyTo</span><span class="token punctuation">(</span>imageFile<span class="token punctuation">.</span><span class="token function">outputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">class</span> ProgressResponseBody <span class="token keyword">constructor</span><span class="token punctuation">(</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> responseBody<span class="token operator">:</span> ResponseBody<span class="token punctuation">,</span>
    <span class="token keyword">private</span> <span class="token keyword">val</span> progressListener<span class="token operator">:</span> ProgressListener
<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ResponseBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">var</span> bufferedSource<span class="token operator">:</span> BufferedSource<span class="token operator">?</span> <span class="token operator">=</span> <span class="token keyword">null</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">contentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> MediaType<span class="token operator">?</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> responseBody<span class="token punctuation">.</span><span class="token function">contentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token punctuation">{</span>
        <span class="token keyword">return</span> responseBody<span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> BufferedSource <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>bufferedSource <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            bufferedSource <span class="token operator">=</span> <span class="token function">source</span><span class="token punctuation">(</span>responseBody<span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> bufferedSource<span class="token operator">!!</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">fun</span> <span class="token function">source</span><span class="token punctuation">(</span>source<span class="token operator">:</span> Source<span class="token punctuation">)</span><span class="token operator">:</span> Source <span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token keyword">object</span> <span class="token operator">:</span> <span class="token function">ForwardingSource</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token keyword">var</span> totalBytesRead <span class="token operator">=</span> <span class="token number">0L</span>

            <span class="token annotation builtin">@Throws</span><span class="token punctuation">(</span>IOException<span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span>
            <span class="token keyword">override</span> <span class="token keyword">fun</span> <span class="token function">read</span><span class="token punctuation">(</span>sink<span class="token operator">:</span> Buffer<span class="token punctuation">,</span> byteCount<span class="token operator">:</span> Long<span class="token punctuation">)</span><span class="token operator">:</span> Long <span class="token punctuation">{</span>
                <span class="token keyword">val</span> bytesRead <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>sink<span class="token punctuation">,</span> byteCount<span class="token punctuation">)</span>
                <span class="token comment">// read() returns the number of bytes read, or -1 if this source is exhausted.</span>
                totalBytesRead <span class="token operator">+=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>bytesRead <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span> bytesRead <span class="token keyword">else</span> <span class="token number">0</span>
                progressListener<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>totalBytesRead<span class="token punctuation">,</span> responseBody<span class="token punctuation">.</span><span class="token function">contentLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bytesRead <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1L</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> bytesRead
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>进度输出就类似于：</p><div class="language-kotlin line-numbers-mode" data-ext="kt"><pre class="language-kotlin"><code>content<span class="token operator">-</span>length<span class="token operator">:</span> <span class="token number">11448857</span>
<span class="token number">467</span>
<span class="token number">0</span><span class="token operator">%</span> done
<span class="token number">1836</span>
<span class="token number">0</span><span class="token operator">%</span> done
<span class="token number">3205</span>

···

<span class="token number">99</span><span class="token operator">%</span> done
<span class="token number">11442570</span>
<span class="token number">99</span><span class="token operator">%</span> done
<span class="token number">11448857</span>
<span class="token number">100</span><span class="token operator">%</span> done
completed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="七、结尾" tabindex="-1"><a class="header-anchor" href="#七、结尾" aria-hidden="true">#</a> 七、结尾</h1><p>关于 OkHttp 的源码讲解到这里就结束了，但本文还缺少了对 ConnectInterceptor 和 CallServerInterceptor 的讲解，这两者是 OkHttp 完成实际网络请求的地方，涉及到了 Connection 和 Socket 这些比较底层的领域，我没法讲得多清晰，就直接略过这块内容了~~</p>`,6),f={href:"https://juejin.im/post/6886121327845965838",target:"_blank",rel:"noopener noreferrer"},w=n("p",null,"下篇文章就来写关于 OkHttp 拦截器的实战内容吧",-1);function g(h,C){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,n("blockquote",null,[n("p",null,[s("公众号："),n("a",r,[s("字节数组"),e(a)])]),k]),d,n("p",null,[s("本文基于 OkHttp 的以下版本进行讲解。值得一提的是，OkHttp 和 OkIO 目前已经被官方用 Kotlin 语言重写了一遍，所以还没学 Kotlin 的同学可能连源码都比较难看懂了，Kotlin 入门可以看我的这篇文章："),n("a",v,[s("两万六千字带你 Kotlin 入门"),e(a)])]),m,n("p",null,[s("这里可以根据 "),n("a",b,[s("square"),e(a)]),s(" 官方提供的一个例子，来实现在下载一张 10 MB 图片的时候通过拦截器对下载进度进行监听，并同时把图片下载到系统的桌面")]),y,n("p",null,[s("OkHttp 的运行效率很高，但在使用上还是比较原始，一般我们还是需要在 OkHttp 之上进行一层封装，Retrofit 就是一个对 OkHttp 的优秀封装库，对 Retrofit 的源码讲解可以看我的这篇文章："),n("a",f,[s("三方库源码笔记（7）-Retrofit 源码详解"),e(a)])]),w])}const R=p(i,[["render",g],["__file","主流开源库源码分析（11）OkHttp 源码详解.html.vue"]]);export{R as default};
